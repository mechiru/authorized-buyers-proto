// Protocol version: v.52

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: openrtb-adx.proto

package openrtbadx

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Possible requirement types for AMP ads.
type ImpExt_AmpAdRequirementType int32

const (
	// AMP ad requirements unknown.
	ImpExt_UNKNOWN_AMP_AD_REQUIREMENT_TYPE ImpExt_AmpAdRequirementType = 1
	// AMP ads are not allowed.
	ImpExt_AMP_AD_NOT_ALLOWED ImpExt_AmpAdRequirementType = 2
	// Either AMP ads or non-AMP ads are allowed;
	// AMP ads are not early rendered.
	ImpExt_AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED ImpExt_AmpAdRequirementType = 3
	// Either AMP ads or non-AMP ads are allowed;
	// AMP ads are early rendered.
	ImpExt_AMP_AD_ALLOWED_AND_EARLY_RENDERED ImpExt_AmpAdRequirementType = 4
	// AMP ads are required.
	// Ads that are non-AMP may be rejected by the publisher.
	ImpExt_AMP_AD_REQUIRED ImpExt_AmpAdRequirementType = 5 // Exchange-specific values above 500.
)

// Enum value maps for ImpExt_AmpAdRequirementType.
var (
	ImpExt_AmpAdRequirementType_name = map[int32]string{
		1: "UNKNOWN_AMP_AD_REQUIREMENT_TYPE",
		2: "AMP_AD_NOT_ALLOWED",
		3: "AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED",
		4: "AMP_AD_ALLOWED_AND_EARLY_RENDERED",
		5: "AMP_AD_REQUIRED",
	}
	ImpExt_AmpAdRequirementType_value = map[string]int32{
		"UNKNOWN_AMP_AD_REQUIREMENT_TYPE":       1,
		"AMP_AD_NOT_ALLOWED":                    2,
		"AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED": 3,
		"AMP_AD_ALLOWED_AND_EARLY_RENDERED":     4,
		"AMP_AD_REQUIRED":                       5,
	}
)

func (x ImpExt_AmpAdRequirementType) Enum() *ImpExt_AmpAdRequirementType {
	p := new(ImpExt_AmpAdRequirementType)
	*p = x
	return p
}

func (x ImpExt_AmpAdRequirementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImpExt_AmpAdRequirementType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_adx_proto_enumTypes[0].Descriptor()
}

func (ImpExt_AmpAdRequirementType) Type() protoreflect.EnumType {
	return &file_openrtb_adx_proto_enumTypes[0]
}

func (x ImpExt_AmpAdRequirementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ImpExt_AmpAdRequirementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ImpExt_AmpAdRequirementType(num)
	return nil
}

// Deprecated: Use ImpExt_AmpAdRequirementType.Descriptor instead.
func (ImpExt_AmpAdRequirementType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{0, 0}
}

// [AdX: BidResponse.Ad.AdSlot.exchange_deal_type]
type BidExt_ExchangeDealType int32

const (
	BidExt_OPEN_AUCTION             BidExt_ExchangeDealType = 0
	BidExt_PRIVATE_AUCTION          BidExt_ExchangeDealType = 1
	BidExt_PREFERRED_DEAL           BidExt_ExchangeDealType = 2
	BidExt_EXCHANGE_AUCTION_PACKAGE BidExt_ExchangeDealType = 3
)

// Enum value maps for BidExt_ExchangeDealType.
var (
	BidExt_ExchangeDealType_name = map[int32]string{
		0: "OPEN_AUCTION",
		1: "PRIVATE_AUCTION",
		2: "PREFERRED_DEAL",
		3: "EXCHANGE_AUCTION_PACKAGE",
	}
	BidExt_ExchangeDealType_value = map[string]int32{
		"OPEN_AUCTION":             0,
		"PRIVATE_AUCTION":          1,
		"PREFERRED_DEAL":           2,
		"EXCHANGE_AUCTION_PACKAGE": 3,
	}
)

func (x BidExt_ExchangeDealType) Enum() *BidExt_ExchangeDealType {
	p := new(BidExt_ExchangeDealType)
	*p = x
	return p
}

func (x BidExt_ExchangeDealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidExt_ExchangeDealType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_adx_proto_enumTypes[1].Descriptor()
}

func (BidExt_ExchangeDealType) Type() protoreflect.EnumType {
	return &file_openrtb_adx_proto_enumTypes[1]
}

func (x BidExt_ExchangeDealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidExt_ExchangeDealType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidExt_ExchangeDealType(num)
	return nil
}

// Deprecated: Use BidExt_ExchangeDealType.Descriptor instead.
func (BidExt_ExchangeDealType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{3, 0}
}

// [AdX: BidRequest.AdSlot.native_ad_template[0].style_layout_type]
type NativeRequestExt_LayoutType int32

const (
	NativeRequestExt_PIXEL NativeRequestExt_LayoutType = 0
	NativeRequestExt_FLUID NativeRequestExt_LayoutType = 1
)

// Enum value maps for NativeRequestExt_LayoutType.
var (
	NativeRequestExt_LayoutType_name = map[int32]string{
		0: "PIXEL",
		1: "FLUID",
	}
	NativeRequestExt_LayoutType_value = map[string]int32{
		"PIXEL": 0,
		"FLUID": 1,
	}
)

func (x NativeRequestExt_LayoutType) Enum() *NativeRequestExt_LayoutType {
	p := new(NativeRequestExt_LayoutType)
	*p = x
	return p
}

func (x NativeRequestExt_LayoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NativeRequestExt_LayoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_adx_proto_enumTypes[2].Descriptor()
}

func (NativeRequestExt_LayoutType) Type() protoreflect.EnumType {
	return &file_openrtb_adx_proto_enumTypes[2]
}

func (x NativeRequestExt_LayoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NativeRequestExt_LayoutType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NativeRequestExt_LayoutType(num)
	return nil
}

// Deprecated: Use NativeRequestExt_LayoutType.Descriptor instead.
func (NativeRequestExt_LayoutType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{4, 0}
}

// Additional context provided for rendering.
type EventTrackerExt_Context int32

const (
	EventTrackerExt_UNKNOWN EventTrackerExt_Context = 0
	// Currently not supported.
	EventTrackerExt_OMID EventTrackerExt_Context = 1
)

// Enum value maps for EventTrackerExt_Context.
var (
	EventTrackerExt_Context_name = map[int32]string{
		0: "UNKNOWN",
		1: "OMID",
	}
	EventTrackerExt_Context_value = map[string]int32{
		"UNKNOWN": 0,
		"OMID":    1,
	}
)

func (x EventTrackerExt_Context) Enum() *EventTrackerExt_Context {
	p := new(EventTrackerExt_Context)
	*p = x
	return p
}

func (x EventTrackerExt_Context) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTrackerExt_Context) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_adx_proto_enumTypes[3].Descriptor()
}

func (EventTrackerExt_Context) Type() protoreflect.EnumType {
	return &file_openrtb_adx_proto_enumTypes[3]
}

func (x EventTrackerExt_Context) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventTrackerExt_Context) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventTrackerExt_Context(num)
	return nil
}

// Deprecated: Use EventTrackerExt_Context.Descriptor instead.
func (EventTrackerExt_Context) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{5, 0}
}

type SiteExt_AmpPage int32

const (
	// This is not an AMP page.
	SiteExt_DIALECT_HTML SiteExt_AmpPage = 0
	// This is an Amp page.
	SiteExt_DIALECT_HTML_AMP SiteExt_AmpPage = 1
)

// Enum value maps for SiteExt_AmpPage.
var (
	SiteExt_AmpPage_name = map[int32]string{
		0: "DIALECT_HTML",
		1: "DIALECT_HTML_AMP",
	}
	SiteExt_AmpPage_value = map[string]int32{
		"DIALECT_HTML":     0,
		"DIALECT_HTML_AMP": 1,
	}
)

func (x SiteExt_AmpPage) Enum() *SiteExt_AmpPage {
	p := new(SiteExt_AmpPage)
	*p = x
	return p
}

func (x SiteExt_AmpPage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SiteExt_AmpPage) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_adx_proto_enumTypes[4].Descriptor()
}

func (SiteExt_AmpPage) Type() protoreflect.EnumType {
	return &file_openrtb_adx_proto_enumTypes[4]
}

func (x SiteExt_AmpPage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SiteExt_AmpPage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SiteExt_AmpPage(num)
	return nil
}

// Deprecated: Use SiteExt_AmpPage.Descriptor instead.
func (SiteExt_AmpPage) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{7, 0}
}

// The type of the deal. Note that Authorized Buyers policy overrides apply to
// all Programmatic Guaranteed and Preferred Deal bids, and do not apply to
// bids for other deal types.
type DealExt_DealType int32

const (
	DealExt_UNKNOWN_DEAL_TYPE DealExt_DealType = 0
	// Bids are fixed-price and evaluated before the Open Auction. Bidders are
	// not required to bid with Preferred Deals when they are present on the bid
	// request. See https://support.google.com/authorizedbuyers/answer/2604595
	// for more information.
	DealExt_PREFERRED_DEAL DealExt_DealType = 1
	// Bids participate in a Private Auction against a select list of buyers
	// with specific floors. See
	// https://support.google.com/authorizedbuyers/answer/2839853 for more
	// information.
	DealExt_PRIVATE_AUCTION DealExt_DealType = 2
	// Bids are fixed-price and evaluated before the Open Auction. Bidders are
	// expected to bid with Programmatic Guaranteed deals whenever they are
	// present on a bid request and the must_bid field is true in order to
	// ensure that the number of impressions agreed upon for a given deal are
	// served. See https://support.google.com/authorizedbuyers/answer/7174589
	// for more information.
	DealExt_PROGRAMMATIC_GUARANTEED DealExt_DealType = 3
	// The deal ID is an identifier for a collection of Open Auction inventory
	// matching a given set of targeting criteria. See
	// https://support.google.com/authorizedbuyers/answer/7516884 for more
	// information.
	DealExt_AUCTION_PACKAGE DealExt_DealType = 4
)

// Enum value maps for DealExt_DealType.
var (
	DealExt_DealType_name = map[int32]string{
		0: "UNKNOWN_DEAL_TYPE",
		1: "PREFERRED_DEAL",
		2: "PRIVATE_AUCTION",
		3: "PROGRAMMATIC_GUARANTEED",
		4: "AUCTION_PACKAGE",
	}
	DealExt_DealType_value = map[string]int32{
		"UNKNOWN_DEAL_TYPE":       0,
		"PREFERRED_DEAL":          1,
		"PRIVATE_AUCTION":         2,
		"PROGRAMMATIC_GUARANTEED": 3,
		"AUCTION_PACKAGE":         4,
	}
)

func (x DealExt_DealType) Enum() *DealExt_DealType {
	p := new(DealExt_DealType)
	*p = x
	return p
}

func (x DealExt_DealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealExt_DealType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_adx_proto_enumTypes[5].Descriptor()
}

func (DealExt_DealType) Type() protoreflect.EnumType {
	return &file_openrtb_adx_proto_enumTypes[5]
}

func (x DealExt_DealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DealExt_DealType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DealExt_DealType(num)
	return nil
}

// Deprecated: Use DealExt_DealType.Descriptor instead.
func (DealExt_DealType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{12, 0}
}

// Ad Exchange extensions for the Imp object.
type ImpExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [AdX: BidRequest.AdSlot.MatchingAdData.billing_id]
	BillingId []int64 `protobuf:"varint,1,rep,name=billing_id,json=billingId" json:"billing_id,omitempty"`
	// [AdX: BidRequest.publisher_settings_list_id]
	// [AdX: BidRequest.AdSlot.publisher_settings_list_id]
	PublisherSettingsListId []uint64 `protobuf:"fixed64,2,rep,name=publisher_settings_list_id,json=publisherSettingsListId" json:"publisher_settings_list_id,omitempty"`
	// [AdX: BidRequest.AdSlot.allowed_vendor_type]
	AllowedVendorType []int32 `protobuf:"varint,3,rep,packed,name=allowed_vendor_type,json=allowedVendorType" json:"allowed_vendor_type,omitempty"`
	// Creatives that are disallowed for the impression. Submitting a bid with
	// one of the creatives in this list will result in such bid being filtered
	// before the auction. Please contact your account manager if you would like
	// to enable this feature.
	ExcludedCreatives []*ImpExt_ExcludedCreative `protobuf:"bytes,10,rep,name=excluded_creatives,json=excludedCreatives" json:"excluded_creatives,omitempty"`
	// [AdX: BidRequest.AdSlot.ExchangeBidding.publisher_parameter]
	PublisherParameter []string `protobuf:"bytes,4,rep,name=publisher_parameter,json=publisherParameter" json:"publisher_parameter,omitempty"`
	// [AdX: BidRequest.AdSlot.dfp_ad_unit_code]
	DfpAdUnitCode *string `protobuf:"bytes,6,opt,name=dfp_ad_unit_code,json=dfpAdUnitCode" json:"dfp_ad_unit_code,omitempty"`
	// [AdX: BidRequest.AdSlot.is_rewarded]
	IsRewardedInventory       *bool                               `protobuf:"varint,7,opt,name=is_rewarded_inventory,json=isRewardedInventory" json:"is_rewarded_inventory,omitempty"`
	Ampad                     *ImpExt_AmpAdRequirementType        `protobuf:"varint,8,opt,name=ampad,enum=com.google.doubleclick.ImpExt_AmpAdRequirementType,def=1" json:"ampad,omitempty"`
	BuyerGeneratedRequestData []*ImpExt_BuyerGeneratedRequestData `protobuf:"bytes,9,rep,name=buyer_generated_request_data,json=buyerGeneratedRequestData" json:"buyer_generated_request_data,omitempty"`
	OpenBidding               *ImpExt_OpenBidding                 `protobuf:"bytes,12,opt,name=open_bidding,json=openBidding" json:"open_bidding,omitempty"`
	// The allowed restricted ad categories. See
	// https://storage.googleapis.com/adx-rtb-dictionaries/ad-restricted-categories.txt
	// for a list of ids. If you bid with an ad in a restricted category, you MUST
	// ALWAYS declare the category in the bid response regardless of the values in
	// this field.
	AllowedRestrictedCategory []int32 `protobuf:"varint,13,rep,name=allowed_restricted_category,json=allowedRestrictedCategory" json:"allowed_restricted_category,omitempty"`
	// [AdX: BidRequest.Mobile.skadn]
	Skadn *ImpExt_SKAdNetworkRequest `protobuf:"bytes,14,opt,name=skadn" json:"skadn,omitempty"`
}

// Default values for ImpExt fields.
const (
	Default_ImpExt_Ampad = ImpExt_UNKNOWN_AMP_AD_REQUIREMENT_TYPE
)

func (x *ImpExt) Reset() {
	*x = ImpExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpExt) ProtoMessage() {}

func (x *ImpExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpExt.ProtoReflect.Descriptor instead.
func (*ImpExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{0}
}

func (x *ImpExt) GetBillingId() []int64 {
	if x != nil {
		return x.BillingId
	}
	return nil
}

func (x *ImpExt) GetPublisherSettingsListId() []uint64 {
	if x != nil {
		return x.PublisherSettingsListId
	}
	return nil
}

func (x *ImpExt) GetAllowedVendorType() []int32 {
	if x != nil {
		return x.AllowedVendorType
	}
	return nil
}

func (x *ImpExt) GetExcludedCreatives() []*ImpExt_ExcludedCreative {
	if x != nil {
		return x.ExcludedCreatives
	}
	return nil
}

func (x *ImpExt) GetPublisherParameter() []string {
	if x != nil {
		return x.PublisherParameter
	}
	return nil
}

func (x *ImpExt) GetDfpAdUnitCode() string {
	if x != nil && x.DfpAdUnitCode != nil {
		return *x.DfpAdUnitCode
	}
	return ""
}

func (x *ImpExt) GetIsRewardedInventory() bool {
	if x != nil && x.IsRewardedInventory != nil {
		return *x.IsRewardedInventory
	}
	return false
}

func (x *ImpExt) GetAmpad() ImpExt_AmpAdRequirementType {
	if x != nil && x.Ampad != nil {
		return *x.Ampad
	}
	return Default_ImpExt_Ampad
}

func (x *ImpExt) GetBuyerGeneratedRequestData() []*ImpExt_BuyerGeneratedRequestData {
	if x != nil {
		return x.BuyerGeneratedRequestData
	}
	return nil
}

func (x *ImpExt) GetOpenBidding() *ImpExt_OpenBidding {
	if x != nil {
		return x.OpenBidding
	}
	return nil
}

func (x *ImpExt) GetAllowedRestrictedCategory() []int32 {
	if x != nil {
		return x.AllowedRestrictedCategory
	}
	return nil
}

func (x *ImpExt) GetSkadn() *ImpExt_SKAdNetworkRequest {
	if x != nil {
		return x.Skadn
	}
	return nil
}

type AppExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstalledSdk []*AppExt_InstalledSdk `protobuf:"bytes,1,rep,name=installed_sdk,json=installedSdk" json:"installed_sdk,omitempty"`
}

func (x *AppExt) Reset() {
	*x = AppExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppExt) ProtoMessage() {}

func (x *AppExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppExt.ProtoReflect.Descriptor instead.
func (*AppExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{1}
}

func (x *AppExt) GetInstalledSdk() []*AppExt_InstalledSdk {
	if x != nil {
		return x.InstalledSdk
	}
	return nil
}

// Ad Exchange extensions for the BidResponse object.
type BidResponseExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [AdX: BidResponse.processing_time_ms]
	ProcessingTimeMs *int32 `protobuf:"varint,1,opt,name=processing_time_ms,json=processingTimeMs" json:"processing_time_ms,omitempty"`
}

func (x *BidResponseExt) Reset() {
	*x = BidResponseExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponseExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponseExt) ProtoMessage() {}

func (x *BidResponseExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponseExt.ProtoReflect.Descriptor instead.
func (*BidResponseExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{2}
}

func (x *BidResponseExt) GetProcessingTimeMs() int32 {
	if x != nil && x.ProcessingTimeMs != nil {
		return *x.ProcessingTimeMs
	}
	return 0
}

// Ad Exchange extensions for the Bid object.
type BidExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [AdX: BidResponse.Ad.impression_tracking_url]
	ImpressionTrackingUrl []string `protobuf:"bytes,1,rep,name=impression_tracking_url,json=impressionTrackingUrl" json:"impression_tracking_url,omitempty"`
	// [AdX: BidResponse.Ad.ad_choices_destination_url]
	AdChoicesDestinationUrl *string `protobuf:"bytes,2,opt,name=ad_choices_destination_url,json=adChoicesDestinationUrl" json:"ad_choices_destination_url,omitempty"`
	// [AdX: BidResponse.Ad.bidder_name]
	BidderName       *string                  `protobuf:"bytes,3,opt,name=bidder_name,json=bidderName" json:"bidder_name,omitempty"`
	ExchangeDealType *BidExt_ExchangeDealType `protobuf:"varint,4,opt,name=exchange_deal_type,json=exchangeDealType,enum=com.google.doubleclick.BidExt_ExchangeDealType,def=0" json:"exchange_deal_type,omitempty"`
	// [AdX: BidResponse.Ad.attribute]
	// See buyer-declarable-creative-attributes.txt in the technical documentation
	// for a list of ids. Note that not all declarable attributes come through in
	// the BidRequest in the various `battr` fields.
	Attribute []int32 `protobuf:"varint,5,rep,packed,name=attribute" json:"attribute,omitempty"`
	// The URL to fetch an AMPHTML ad. Only one of the following should be set:
	// html_snippet, video_url, amp_ad_url, native_ad.
	AmpAdUrl      *string               `protobuf:"bytes,6,opt,name=amp_ad_url,json=ampAdUrl" json:"amp_ad_url,omitempty"`
	SdkRenderedAd *BidExt_SdkRenderedAd `protobuf:"bytes,7,opt,name=sdk_rendered_ad,json=sdkRenderedAd" json:"sdk_rendered_ad,omitempty"`
	// A token set by bidders for troubleshooting which will be included in the
	// real-time feedback for the Bid it is sent in. The contents of the token
	// will not be logged.
	EventNotificationToken *BidExt_EventNotificationToken `protobuf:"bytes,8,opt,name=event_notification_token,json=eventNotificationToken" json:"event_notification_token,omitempty"`
	// All restricted categories for the ads that may be shown from this snippet.
	// See ad-restricted-categories.txt in the technical documentation for a list
	// of ids. If you are bidding with ads in restricted categories, you must
	// always declare them here.
	RestrictedCategory []int32 `protobuf:"varint,9,rep,name=restricted_category,json=restrictedCategory" json:"restricted_category,omitempty"`
	// The billing ID to attribute this impression to. The value must be in the
	// repeated BidRequest.Imp.ImpExt.billing_id field sent for this impression.
	// If the length of BidRequest.Imp.ImpExt.billing_id is exactly 1
	// and the bidder does not have any active child seats, this field
	// is not required and its contents will be ignored.
	BillingId *int64 `protobuf:"varint,10,opt,name=billing_id,json=billingId" json:"billing_id,omitempty"`
	// This field is deprecated as of July 8, 2020 and will be removed July 31,
	// 2020.
	//
	// [AdX: BidResponse.Ad.AdSlot.use_bid_translation_service]
	// This field is applicable only for bid requests that are marked as first
	// price, and will otherwise be ignored. If the field is set to true on a
	// first price request, then the bid will go through a bid translation service
	// that converts the second price bid into a first price bid for
	// participation in the first price auction (i.e. may reduce but will
	// never increase the bid). If the field is not set, then for first price
	// eligible queries the bid will be treated as a first price bid. This
	// field is a temporary product for bidders that require assistance
	// migrating to 1st price bidding.
	DEPRECATEDUseBidTranslationService *bool `protobuf:"varint,12,opt,name=DEPRECATED_use_bid_translation_service,json=DEPRECATEDUseBidTranslationService" json:"DEPRECATED_use_bid_translation_service,omitempty"`
	// Token used to identify end third party buyer information if an
	// exchange as an open bidder is an intermediary. This is obtained from the
	// third party buyer and must be passed to Google unaltered in the bid
	// response.
	ThirdPartyBuyerToken *string `protobuf:"bytes,14,opt,name=third_party_buyer_token,json=thirdPartyBuyerToken" json:"third_party_buyer_token,omitempty"`
	// Buyer declared ID which will be used to break down spend and invalid
	// traffic metrics in IVT transparency reporting in Query Tool. Note that IDs
	// with fewer than 1000 impressions will not be used to break down metrics.
	// IDs longer than 64 bytes will be ignored.
	BuyerReportingId *string `protobuf:"bytes,17,opt,name=buyer_reporting_id,json=buyerReportingId" json:"buyer_reporting_id,omitempty"`
	// [AdX: BidResponse.Ad.skadn]
	Skadn *BidExt_SKAdNetworkResponse `protobuf:"bytes,19,opt,name=skadn" json:"skadn,omitempty"`
}

// Default values for BidExt fields.
const (
	Default_BidExt_ExchangeDealType = BidExt_OPEN_AUCTION
)

func (x *BidExt) Reset() {
	*x = BidExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidExt) ProtoMessage() {}

func (x *BidExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidExt.ProtoReflect.Descriptor instead.
func (*BidExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{3}
}

func (x *BidExt) GetImpressionTrackingUrl() []string {
	if x != nil {
		return x.ImpressionTrackingUrl
	}
	return nil
}

func (x *BidExt) GetAdChoicesDestinationUrl() string {
	if x != nil && x.AdChoicesDestinationUrl != nil {
		return *x.AdChoicesDestinationUrl
	}
	return ""
}

func (x *BidExt) GetBidderName() string {
	if x != nil && x.BidderName != nil {
		return *x.BidderName
	}
	return ""
}

func (x *BidExt) GetExchangeDealType() BidExt_ExchangeDealType {
	if x != nil && x.ExchangeDealType != nil {
		return *x.ExchangeDealType
	}
	return Default_BidExt_ExchangeDealType
}

func (x *BidExt) GetAttribute() []int32 {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *BidExt) GetAmpAdUrl() string {
	if x != nil && x.AmpAdUrl != nil {
		return *x.AmpAdUrl
	}
	return ""
}

func (x *BidExt) GetSdkRenderedAd() *BidExt_SdkRenderedAd {
	if x != nil {
		return x.SdkRenderedAd
	}
	return nil
}

func (x *BidExt) GetEventNotificationToken() *BidExt_EventNotificationToken {
	if x != nil {
		return x.EventNotificationToken
	}
	return nil
}

func (x *BidExt) GetRestrictedCategory() []int32 {
	if x != nil {
		return x.RestrictedCategory
	}
	return nil
}

func (x *BidExt) GetBillingId() int64 {
	if x != nil && x.BillingId != nil {
		return *x.BillingId
	}
	return 0
}

func (x *BidExt) GetDEPRECATEDUseBidTranslationService() bool {
	if x != nil && x.DEPRECATEDUseBidTranslationService != nil {
		return *x.DEPRECATEDUseBidTranslationService
	}
	return false
}

func (x *BidExt) GetThirdPartyBuyerToken() string {
	if x != nil && x.ThirdPartyBuyerToken != nil {
		return *x.ThirdPartyBuyerToken
	}
	return ""
}

func (x *BidExt) GetBuyerReportingId() string {
	if x != nil && x.BuyerReportingId != nil {
		return *x.BuyerReportingId
	}
	return ""
}

func (x *BidExt) GetSkadn() *BidExt_SKAdNetworkResponse {
	if x != nil {
		return x.Skadn
	}
	return nil
}

type NativeRequestExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [AdX: BidRequest.AdSlot.native_ad_template[0].style_id]
	StyleId *int32 `protobuf:"varint,1,opt,name=style_id,json=styleId" json:"style_id,omitempty"`
	// [AdX: BidRequest.AdSlot.native_ad_template[0].style_height]
	StyleHeight *int32 `protobuf:"varint,2,opt,name=style_height,json=styleHeight" json:"style_height,omitempty"`
	// [AdX: BidRequest.AdSlot.native_ad_template[0].style_width]
	StyleWidth      *int32                       `protobuf:"varint,3,opt,name=style_width,json=styleWidth" json:"style_width,omitempty"`
	StyleLayoutType *NativeRequestExt_LayoutType `protobuf:"varint,4,opt,name=style_layout_type,json=styleLayoutType,enum=com.google.doubleclick.NativeRequestExt_LayoutType,def=0" json:"style_layout_type,omitempty"`
}

// Default values for NativeRequestExt fields.
const (
	Default_NativeRequestExt_StyleLayoutType = NativeRequestExt_PIXEL
)

func (x *NativeRequestExt) Reset() {
	*x = NativeRequestExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequestExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequestExt) ProtoMessage() {}

func (x *NativeRequestExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequestExt.ProtoReflect.Descriptor instead.
func (*NativeRequestExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{4}
}

func (x *NativeRequestExt) GetStyleId() int32 {
	if x != nil && x.StyleId != nil {
		return *x.StyleId
	}
	return 0
}

func (x *NativeRequestExt) GetStyleHeight() int32 {
	if x != nil && x.StyleHeight != nil {
		return *x.StyleHeight
	}
	return 0
}

func (x *NativeRequestExt) GetStyleWidth() int32 {
	if x != nil && x.StyleWidth != nil {
		return *x.StyleWidth
	}
	return 0
}

func (x *NativeRequestExt) GetStyleLayoutType() NativeRequestExt_LayoutType {
	if x != nil && x.StyleLayoutType != nil {
		return *x.StyleLayoutType
	}
	return Default_NativeRequestExt_StyleLayoutType
}

type EventTrackerExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context []EventTrackerExt_Context `protobuf:"varint,1,rep,name=context,enum=com.google.doubleclick.EventTrackerExt_Context" json:"context,omitempty"`
	// Parameters associated with the resource that will be passed to the
	// resource when it is loaded. The format of the parameters is dependent
	// on the script vendor.
	VerificationParameters *string `protobuf:"bytes,2,opt,name=verification_parameters,json=verificationParameters" json:"verification_parameters,omitempty"`
	// Used to uniquely identify the verification script provider.
	VendorKey *string `protobuf:"bytes,3,opt,name=vendor_key,json=vendorKey" json:"vendor_key,omitempty"`
}

func (x *EventTrackerExt) Reset() {
	*x = EventTrackerExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTrackerExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrackerExt) ProtoMessage() {}

func (x *EventTrackerExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrackerExt.ProtoReflect.Descriptor instead.
func (*EventTrackerExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{5}
}

func (x *EventTrackerExt) GetContext() []EventTrackerExt_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *EventTrackerExt) GetVerificationParameters() string {
	if x != nil && x.VerificationParameters != nil {
		return *x.VerificationParameters
	}
	return ""
}

func (x *EventTrackerExt) GetVendorKey() string {
	if x != nil && x.VendorKey != nil {
		return *x.VendorKey
	}
	return ""
}

type PublisherExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The billing address country code of the publisher. This may be different
	// from the hosting country of the website. For a complete list of country
	// codes, please refer to
	// https://developers.google.com/adwords/api/docs/appendix/codes-formats#country-codes
	Country *string `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
}

func (x *PublisherExt) Reset() {
	*x = PublisherExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherExt) ProtoMessage() {}

func (x *PublisherExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherExt.ProtoReflect.Descriptor instead.
func (*PublisherExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{6}
}

func (x *PublisherExt) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

type SiteExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this is an AMP page or not. Omitted if unknown.
	Amp *SiteExt_AmpPage `protobuf:"varint,1,opt,name=amp,enum=com.google.doubleclick.SiteExt_AmpPage" json:"amp,omitempty"`
}

func (x *SiteExt) Reset() {
	*x = SiteExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteExt) ProtoMessage() {}

func (x *SiteExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteExt.ProtoReflect.Descriptor instead.
func (*SiteExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{7}
}

func (x *SiteExt) GetAmp() SiteExt_AmpPage {
	if x != nil && x.Amp != nil {
		return *x.Amp
	}
	return SiteExt_DIALECT_HTML
}

type BidRequestExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidFeedback []*BidRequestExt_BidFeedback `protobuf:"bytes,1,rep,name=bid_feedback,json=bidFeedback" json:"bid_feedback,omitempty"`
	// This represents a unique ID for the overall query.  In the event
	// that there are multiple callouts for a query, all callout requests for that
	// query will contain the same google_query_id.
	GoogleQueryId *string `protobuf:"bytes,2,opt,name=google_query_id,json=googleQueryId" json:"google_query_id,omitempty"`
}

func (x *BidRequestExt) Reset() {
	*x = BidRequestExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestExt) ProtoMessage() {}

func (x *BidRequestExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestExt.ProtoReflect.Descriptor instead.
func (*BidRequestExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{8}
}

func (x *BidRequestExt) GetBidFeedback() []*BidRequestExt_BidFeedback {
	if x != nil {
		return x.BidFeedback
	}
	return nil
}

func (x *BidRequestExt) GetGoogleQueryId() string {
	if x != nil && x.GoogleQueryId != nil {
		return *x.GoogleQueryId
	}
	return ""
}

type UserExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the ad tech providers for whom the publisher has
	// specified to Google that its EEA user has consented to the use of their
	// personal data for ads personalization in accordance with Google's EU User
	// Consent Policy. This field will only be populated when RegsExt.gdpr is
	// true.
	ConsentedProvidersSettings *UserExt_ConsentedProvidersSettings `protobuf:"bytes,1,opt,name=consented_providers_settings,json=consentedProvidersSettings" json:"consented_providers_settings,omitempty"`
	// The web-safe base64-encoded IAB Transparency and Consent Framework (TCF) v2
	// consent string fetched from the publisher's IAB Consent Management Platform
	// (CMP). The structure of the string is defined by the IAB TCF v2. This field
	// will be populated if the publisher has integrated with a CMP for TCF v2 and
	// that CMP indicates that GDPR applies to this ad request and provides a
	// valid consent string.  See
	// https://support.google.com/authorizedbuyers/answer/9789378 for additional
	// information about the Google TCF v2 integration.
	//
	// See the IAB Global Vendor List at
	// https://vendorlist.consensu.org/v2/vendor-list.json for details about the
	// vendors listed in the consent string.
	Consent *string `protobuf:"bytes,2,opt,name=consent" json:"consent,omitempty"`
}

func (x *UserExt) Reset() {
	*x = UserExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExt) ProtoMessage() {}

func (x *UserExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExt.ProtoReflect.Descriptor instead.
func (*UserExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{9}
}

func (x *UserExt) GetConsentedProvidersSettings() *UserExt_ConsentedProvidersSettings {
	if x != nil {
		return x.ConsentedProvidersSettings
	}
	return nil
}

func (x *UserExt) GetConsent() string {
	if x != nil && x.Consent != nil {
		return *x.Consent
	}
	return ""
}

type DeviceExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Beta feature. Represents a short-lived user session on CTV/OTT devices,
	// with a maximum session duration of 6 hours.
	// The use of session_id is never allowed for ads personalization.
	// session_id may only be used for frequency capping, competitive exclusions
	// or related purposes. Please contact your account manager if you would like
	// to enable this feature.
	SessionId *string `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *DeviceExt) Reset() {
	*x = DeviceExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceExt) ProtoMessage() {}

func (x *DeviceExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceExt.ProtoReflect.Descriptor instead.
func (*DeviceExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{10}
}

func (x *DeviceExt) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

type RegsExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field will be set to true in either of the two following cases:
	//   1. Google receives a valid IAB Transparency and Consent Framework (TCF)
	//      v2 consent string and the Consent Management Platform indicates that
	//      GDPR applies to this ad request.
	//   2. Google does not receive an IAB TCF v2 consent string and, based on
	//      information available to Google, this impression will serve to an
	//      EEA user.
	// It does not constitute legal guidance on GDPR.
	Gdpr *bool `protobuf:"varint,1,opt,name=gdpr" json:"gdpr,omitempty"`
	// This field will be set to true when, based on information available to
	// Google, this impression will serve to a user in Brazil. See
	// https://storage.googleapis.com/adx-rtb-dictionaries/lgpd-providers.csv for
	// the list of ad tech providers that are allowed to serve on LGPD-enforced
	// requests.
	//
	// See https://support.google.com/authorizedbuyers/answer/9928204 for more
	// information on LGPD.
	Lgpd *bool `protobuf:"varint,2,opt,name=lgpd" json:"lgpd,omitempty"`
}

func (x *RegsExt) Reset() {
	*x = RegsExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegsExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegsExt) ProtoMessage() {}

func (x *RegsExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegsExt.ProtoReflect.Descriptor instead.
func (*RegsExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{11}
}

func (x *RegsExt) GetGdpr() bool {
	if x != nil && x.Gdpr != nil {
		return *x.Gdpr
	}
	return false
}

func (x *RegsExt) GetLgpd() bool {
	if x != nil && x.Lgpd != nil {
		return *x.Lgpd
	}
	return false
}

type DealExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealType *DealExt_DealType `protobuf:"varint,1,opt,name=deal_type,json=dealType,enum=com.google.doubleclick.DealExt_DealType,def=0" json:"deal_type,omitempty"`
	// This field is only applicable to Programmatic Guaranteed deals. The
	// buyer is allowed to skip bidding on the impression if this field is
	// false. When it is true, the buyer is required to bid on this deal for
	// this impression opportunity. This field will always be filled explicitly
	// for the JSON wire format.
	MustBid *bool `protobuf:"varint,2,opt,name=must_bid,json=mustBid,def=1" json:"must_bid,omitempty"`
	// Whether the publisher has exempted this deal from configured blocks. This
	// setting does not override AdX policies or Ad Review Center decisions. See
	// https://support.google.com/authorizedbuyers/answer/6114194 for more
	// information.
	PublisherBlocksOverridden *bool `protobuf:"varint,3,opt,name=publisher_blocks_overridden,json=publisherBlocksOverridden" json:"publisher_blocks_overridden,omitempty"`
}

// Default values for DealExt fields.
const (
	Default_DealExt_DealType = DealExt_UNKNOWN_DEAL_TYPE
	Default_DealExt_MustBid  = bool(true)
)

func (x *DealExt) Reset() {
	*x = DealExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DealExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DealExt) ProtoMessage() {}

func (x *DealExt) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DealExt.ProtoReflect.Descriptor instead.
func (*DealExt) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{12}
}

func (x *DealExt) GetDealType() DealExt_DealType {
	if x != nil && x.DealType != nil {
		return *x.DealType
	}
	return Default_DealExt_DealType
}

func (x *DealExt) GetMustBid() bool {
	if x != nil && x.MustBid != nil {
		return *x.MustBid
	}
	return Default_DealExt_MustBid
}

func (x *DealExt) GetPublisherBlocksOverridden() bool {
	if x != nil && x.PublisherBlocksOverridden != nil {
		return *x.PublisherBlocksOverridden
	}
	return false
}

// A creative that is disallowed to bid on this impression due to Ad
// Exchange policies or creative disapproval, excluded creative attributes,
// excluded product or sensitive categories, allowed vendor types,
// restricted categories or languages applicable to the bid request.
type ImpExt_ExcludedCreative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Buyer creative ID of the disallowed creative.
	BuyerCreativeId *string `protobuf:"bytes,1,opt,name=buyer_creative_id,json=buyerCreativeId" json:"buyer_creative_id,omitempty"`
}

func (x *ImpExt_ExcludedCreative) Reset() {
	*x = ImpExt_ExcludedCreative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpExt_ExcludedCreative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpExt_ExcludedCreative) ProtoMessage() {}

func (x *ImpExt_ExcludedCreative) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpExt_ExcludedCreative.ProtoReflect.Descriptor instead.
func (*ImpExt_ExcludedCreative) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ImpExt_ExcludedCreative) GetBuyerCreativeId() string {
	if x != nil && x.BuyerCreativeId != nil {
		return *x.BuyerCreativeId
	}
	return ""
}

// Data, opaque to Google and to the publisher, generated by the buyer
// within the publisher's mobile application.
type ImpExt_BuyerGeneratedRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source of the data.
	//
	// Types that are assignable to Source:
	//	*ImpExt_BuyerGeneratedRequestData_SourceApp_
	Source isImpExt_BuyerGeneratedRequestData_Source `protobuf_oneof:"source"`
	// Data sent from the buyer's source within the publisher's domain to the
	// bidder. This data is opaque to the publisher and to Google.
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *ImpExt_BuyerGeneratedRequestData) Reset() {
	*x = ImpExt_BuyerGeneratedRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpExt_BuyerGeneratedRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpExt_BuyerGeneratedRequestData) ProtoMessage() {}

func (x *ImpExt_BuyerGeneratedRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpExt_BuyerGeneratedRequestData.ProtoReflect.Descriptor instead.
func (*ImpExt_BuyerGeneratedRequestData) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ImpExt_BuyerGeneratedRequestData) GetSource() isImpExt_BuyerGeneratedRequestData_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ImpExt_BuyerGeneratedRequestData) GetSourceApp() *ImpExt_BuyerGeneratedRequestData_SourceApp {
	if x, ok := x.GetSource().(*ImpExt_BuyerGeneratedRequestData_SourceApp_); ok {
		return x.SourceApp
	}
	return nil
}

func (x *ImpExt_BuyerGeneratedRequestData) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type isImpExt_BuyerGeneratedRequestData_Source interface {
	isImpExt_BuyerGeneratedRequestData_Source()
}

type ImpExt_BuyerGeneratedRequestData_SourceApp_ struct {
	SourceApp *ImpExt_BuyerGeneratedRequestData_SourceApp `protobuf:"bytes,1,opt,name=source_app,json=sourceApp,oneof"`
}

func (*ImpExt_BuyerGeneratedRequestData_SourceApp_) isImpExt_BuyerGeneratedRequestData_Source() {}

// Parameters related to Open Bidding.
type ImpExt_OpenBidding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is set to true if the publisher set up a yield group or a
	// mediation group that targets this adslot and this bidder. See
	// https://support.google.com/admanager/answer/7128453 for information on
	// Open Bidding and its effects on the bidding process.
	IsOpenBidding *bool `protobuf:"varint,2,opt,name=is_open_bidding,json=isOpenBidding" json:"is_open_bidding,omitempty"`
}

func (x *ImpExt_OpenBidding) Reset() {
	*x = ImpExt_OpenBidding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpExt_OpenBidding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpExt_OpenBidding) ProtoMessage() {}

func (x *ImpExt_OpenBidding) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpExt_OpenBidding.ProtoReflect.Descriptor instead.
func (*ImpExt_OpenBidding) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ImpExt_OpenBidding) GetIsOpenBidding() bool {
	if x != nil && x.IsOpenBidding != nil {
		return *x.IsOpenBidding
	}
	return false
}

// Publisher's SKAdNetwork information to support app installation
// attribution for iOS 14 and later. Apple's SKAdNetwork API helps
// advertisers measure ad-driven app installation by sending a postback
// to the ad network after a successful install. Publishers will need
// to configure supported ad networks in their app's property list
// (Info.plist) to allow an install to be attributed to the ad impression.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork
type ImpExt_SKAdNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of SKAdNetwork supported. Dependent on both the OS version
	// and the SDK version.
	Version *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// ID of publisher app in Apple’s App Store.
	Sourceapp *string `protobuf:"bytes,2,opt,name=sourceapp" json:"sourceapp,omitempty"`
	// SKAdNetworkIdentifier entries in the publisher app's Info.plist.
	Skadnetids []string `protobuf:"bytes,3,rep,name=skadnetids" json:"skadnetids,omitempty"`
}

func (x *ImpExt_SKAdNetworkRequest) Reset() {
	*x = ImpExt_SKAdNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpExt_SKAdNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpExt_SKAdNetworkRequest) ProtoMessage() {}

func (x *ImpExt_SKAdNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpExt_SKAdNetworkRequest.ProtoReflect.Descriptor instead.
func (*ImpExt_SKAdNetworkRequest) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ImpExt_SKAdNetworkRequest) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ImpExt_SKAdNetworkRequest) GetSourceapp() string {
	if x != nil && x.Sourceapp != nil {
		return *x.Sourceapp
	}
	return ""
}

func (x *ImpExt_SKAdNetworkRequest) GetSkadnetids() []string {
	if x != nil {
		return x.Skadnetids
	}
	return nil
}

// Identification for the source of the buyer generated request data when
// that source is from within an application.
type ImpExt_BuyerGeneratedRequestData_SourceApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the SDK that generated this data. It will match the id
	// in AppExt.InstalledSdk.id.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *ImpExt_BuyerGeneratedRequestData_SourceApp) Reset() {
	*x = ImpExt_BuyerGeneratedRequestData_SourceApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpExt_BuyerGeneratedRequestData_SourceApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpExt_BuyerGeneratedRequestData_SourceApp) ProtoMessage() {}

func (x *ImpExt_BuyerGeneratedRequestData_SourceApp) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpExt_BuyerGeneratedRequestData_SourceApp.ProtoReflect.Descriptor instead.
func (*ImpExt_BuyerGeneratedRequestData_SourceApp) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *ImpExt_BuyerGeneratedRequestData_SourceApp) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// Identification of and information about an SDK installed in the
// publisher's app that the bidder has access to, often because it's the
// bidder's SDK.
type AppExt_InstalledSdk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the installed SDK.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The version of the installed SDK.
	SdkVersion *AppExt_InstalledSdk_Version `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion" json:"sdk_version,omitempty"`
	// The version of the adapter that communicates with the installed SDK.
	AdapterVersion *AppExt_InstalledSdk_Version `protobuf:"bytes,3,opt,name=adapter_version,json=adapterVersion" json:"adapter_version,omitempty"`
}

func (x *AppExt_InstalledSdk) Reset() {
	*x = AppExt_InstalledSdk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppExt_InstalledSdk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppExt_InstalledSdk) ProtoMessage() {}

func (x *AppExt_InstalledSdk) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppExt_InstalledSdk.ProtoReflect.Descriptor instead.
func (*AppExt_InstalledSdk) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{1, 0}
}

func (x *AppExt_InstalledSdk) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *AppExt_InstalledSdk) GetSdkVersion() *AppExt_InstalledSdk_Version {
	if x != nil {
		return x.SdkVersion
	}
	return nil
}

func (x *AppExt_InstalledSdk) GetAdapterVersion() *AppExt_InstalledSdk_Version {
	if x != nil {
		return x.AdapterVersion
	}
	return nil
}

// Semantic version of the installed SDK and the adapter that communicates
// between the installed SDK and Google's SDK.
type AppExt_InstalledSdk_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major *int32 `protobuf:"varint,1,opt,name=major,def=-1" json:"major,omitempty"`
	Minor *int32 `protobuf:"varint,2,opt,name=minor,def=-1" json:"minor,omitempty"`
	Micro *int32 `protobuf:"varint,3,opt,name=micro,def=-1" json:"micro,omitempty"`
}

// Default values for AppExt_InstalledSdk_Version fields.
const (
	Default_AppExt_InstalledSdk_Version_Major = int32(-1)
	Default_AppExt_InstalledSdk_Version_Minor = int32(-1)
	Default_AppExt_InstalledSdk_Version_Micro = int32(-1)
)

func (x *AppExt_InstalledSdk_Version) Reset() {
	*x = AppExt_InstalledSdk_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppExt_InstalledSdk_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppExt_InstalledSdk_Version) ProtoMessage() {}

func (x *AppExt_InstalledSdk_Version) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppExt_InstalledSdk_Version.ProtoReflect.Descriptor instead.
func (*AppExt_InstalledSdk_Version) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *AppExt_InstalledSdk_Version) GetMajor() int32 {
	if x != nil && x.Major != nil {
		return *x.Major
	}
	return Default_AppExt_InstalledSdk_Version_Major
}

func (x *AppExt_InstalledSdk_Version) GetMinor() int32 {
	if x != nil && x.Minor != nil {
		return *x.Minor
	}
	return Default_AppExt_InstalledSdk_Version_Minor
}

func (x *AppExt_InstalledSdk_Version) GetMicro() int32 {
	if x != nil && x.Micro != nil {
		return *x.Micro
	}
	return Default_AppExt_InstalledSdk_Version_Micro
}

// An ad that will be rendered by an SDK known to the buyer. This can only
// be used when the BidRequest included an AppExt.InstalledSdk submessage.
type BidExt_SdkRenderedAd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier for the SDK that will render the ad. Must match an
	// AppExt.InstalledSdk.id sent in the corresponding bid request.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Data to pass to the SDK in order to render the ad. This data is opaque
	// to the publisher and to Google.
	RenderingData *string `protobuf:"bytes,2,opt,name=rendering_data,json=renderingData" json:"rendering_data,omitempty"`
}

func (x *BidExt_SdkRenderedAd) Reset() {
	*x = BidExt_SdkRenderedAd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidExt_SdkRenderedAd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidExt_SdkRenderedAd) ProtoMessage() {}

func (x *BidExt_SdkRenderedAd) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidExt_SdkRenderedAd.ProtoReflect.Descriptor instead.
func (*BidExt_SdkRenderedAd) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{3, 0}
}

func (x *BidExt_SdkRenderedAd) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidExt_SdkRenderedAd) GetRenderingData() string {
	if x != nil && x.RenderingData != nil {
		return *x.RenderingData
	}
	return ""
}

type BidExt_EventNotificationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contents of the token, which will be ignored if longer than 64
	// bytes.
	Payload *string `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (x *BidExt_EventNotificationToken) Reset() {
	*x = BidExt_EventNotificationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidExt_EventNotificationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidExt_EventNotificationToken) ProtoMessage() {}

func (x *BidExt_EventNotificationToken) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidExt_EventNotificationToken.ProtoReflect.Descriptor instead.
func (*BidExt_EventNotificationToken) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{3, 1}
}

func (x *BidExt_EventNotificationToken) GetPayload() string {
	if x != nil && x.Payload != nil {
		return *x.Payload
	}
	return ""
}

// Advertiser's SKAdNetwork information to support app installation
// attribution for iOS 14 and later.  Apple's SKAdNetwork API helps
// advertisers measure ad-driven app installation by sending a postback
// to the ad network after a successful install. Ad networks will need
// to send their network ID and signed advertiser information to allow
// an install to be attributed to the ad impression.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork
type BidExt_SKAdNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of SKAdNetwork supported by the advertiser. Also used to
	// specify how the signature was generated by the advertiser. This
	// should match the version from BidRequest.imp.ext.skad.version.
	Version *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// Ad network identifier used in signature. This should match one of the
	// items in BidRequest.imp.ext.skad.skadnetids.
	Network *string `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	// Campaign ID compatible with Apple's spec.
	Campaign *string `protobuf:"bytes,3,opt,name=campaign" json:"campaign,omitempty"`
	// ID of advertiser's app in Apple's app store.
	Itunesitem *string `protobuf:"bytes,4,opt,name=itunesitem" json:"itunesitem,omitempty"`
	// A unique all-lowercase UUID generated by the advertiser to use for
	// generating the signature.
	Nonce *string `protobuf:"bytes,5,opt,name=nonce" json:"nonce,omitempty"`
	// ID of publisher's app in Apple's app store. This should match the ID
	// from BidRequest.imp.ext.skad.sourceapp.
	Sourceapp *string `protobuf:"bytes,6,opt,name=sourceapp" json:"sourceapp,omitempty"`
	// Unix time in millis used at the time of signature generation.
	Timestamp *string `protobuf:"bytes,7,opt,name=timestamp" json:"timestamp,omitempty"`
	// SKAdNetwork signature as specified by Apple.
	Signature *string `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
}

func (x *BidExt_SKAdNetworkResponse) Reset() {
	*x = BidExt_SKAdNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidExt_SKAdNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidExt_SKAdNetworkResponse) ProtoMessage() {}

func (x *BidExt_SKAdNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidExt_SKAdNetworkResponse.ProtoReflect.Descriptor instead.
func (*BidExt_SKAdNetworkResponse) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{3, 2}
}

func (x *BidExt_SKAdNetworkResponse) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *BidExt_SKAdNetworkResponse) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *BidExt_SKAdNetworkResponse) GetCampaign() string {
	if x != nil && x.Campaign != nil {
		return *x.Campaign
	}
	return ""
}

func (x *BidExt_SKAdNetworkResponse) GetItunesitem() string {
	if x != nil && x.Itunesitem != nil {
		return *x.Itunesitem
	}
	return ""
}

func (x *BidExt_SKAdNetworkResponse) GetNonce() string {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return ""
}

func (x *BidExt_SKAdNetworkResponse) GetSourceapp() string {
	if x != nil && x.Sourceapp != nil {
		return *x.Sourceapp
	}
	return ""
}

func (x *BidExt_SKAdNetworkResponse) GetTimestamp() string {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return ""
}

func (x *BidExt_SKAdNetworkResponse) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

// Feedback on bids submitted in previous responses. This is only set if
// real-time feedback is enabled for your bidder. Please contact your
// account manager if you wish to enable real-time feedback.
type BidRequestExt_BidFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id from BidRequest.id.
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// The status code for the ad. See creative-status-codes.txt in the
	// technical documentation for a list of ids.
	CreativeStatusCode *int32 `protobuf:"varint,2,opt,name=creative_status_code,json=creativeStatusCode" json:"creative_status_code,omitempty"`
	// If the bid won the auction, this is the price paid in your account
	// currency.  If the bid participated in the auction but was out-bid, this
	// is the CPM that should have been exceeded in order to win.  This is not
	// set if the bid was filtered prior to the auction, if the publisher or
	// winning bidder has opted out of price feedback or if your account has
	// opted out of sharing winning prices with other bidders. For first-price
	// auctions, minimum_bid_to_win is populated instead of this field.
	Price *float64 `protobuf:"fixed64,3,opt,name=price" json:"price,omitempty"`
	// The minimum bid value necessary to have the auction, in your account
	// currency. If your bid won the auction, this is the second highest bid
	// that was not filtered (including the floor price). If your bid did not
	// win the auction, this is the winning candidate's bid. This field will
	// only be populated if your bid participated in a first-price auction, and
	// will not be populated if your bid was filtered prior to the auction.
	MinimumBidToWin *float64 `protobuf:"fixed64,6,opt,name=minimum_bid_to_win,json=minimumBidToWin" json:"minimum_bid_to_win,omitempty"`
	// When a publisher uses an RTB auction and waterfall-based SDK mediation on
	// the same query, the winner of the real-time auction must also compete in
	// a mediation waterfall (which is ordered by price) to win the impression.
	// If the bid participated in the auction and there was no waterfall, the
	// value of this field is 0. If the bid participated in the auction and
	// there was a waterfall, the value of this field is a price representing a
	// sample bid from the eligible mediation networks that were higher than the
	// auction winner, weighted by expected fill rate.  This field can be used
	// in conjunction with minimum_bid_to_win to train bidding models. The CPM
	// is in your account currency.
	SampledMediationCpmAheadOfAuctionWinner *float64 `protobuf:"fixed64,8,opt,name=sampled_mediation_cpm_ahead_of_auction_winner,json=sampledMediationCpmAheadOfAuctionWinner" json:"sampled_mediation_cpm_ahead_of_auction_winner,omitempty"`
	// The token included in the corresponding bid.
	EventNotificationToken *BidRequestExt_BidFeedback_EventNotificationToken `protobuf:"bytes,4,opt,name=event_notification_token,json=eventNotificationToken" json:"event_notification_token,omitempty"`
	// The creative ID included in the corresponding bid.
	BuyerCreativeId *string `protobuf:"bytes,5,opt,name=buyer_creative_id,json=buyerCreativeId" json:"buyer_creative_id,omitempty"`
}

func (x *BidRequestExt_BidFeedback) Reset() {
	*x = BidRequestExt_BidFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestExt_BidFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestExt_BidFeedback) ProtoMessage() {}

func (x *BidRequestExt_BidFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestExt_BidFeedback.ProtoReflect.Descriptor instead.
func (*BidRequestExt_BidFeedback) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{8, 0}
}

func (x *BidRequestExt_BidFeedback) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *BidRequestExt_BidFeedback) GetCreativeStatusCode() int32 {
	if x != nil && x.CreativeStatusCode != nil {
		return *x.CreativeStatusCode
	}
	return 0
}

func (x *BidRequestExt_BidFeedback) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *BidRequestExt_BidFeedback) GetMinimumBidToWin() float64 {
	if x != nil && x.MinimumBidToWin != nil {
		return *x.MinimumBidToWin
	}
	return 0
}

func (x *BidRequestExt_BidFeedback) GetSampledMediationCpmAheadOfAuctionWinner() float64 {
	if x != nil && x.SampledMediationCpmAheadOfAuctionWinner != nil {
		return *x.SampledMediationCpmAheadOfAuctionWinner
	}
	return 0
}

func (x *BidRequestExt_BidFeedback) GetEventNotificationToken() *BidRequestExt_BidFeedback_EventNotificationToken {
	if x != nil {
		return x.EventNotificationToken
	}
	return nil
}

func (x *BidRequestExt_BidFeedback) GetBuyerCreativeId() string {
	if x != nil && x.BuyerCreativeId != nil {
		return *x.BuyerCreativeId
	}
	return ""
}

type BidRequestExt_BidFeedback_EventNotificationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The contents of the token.
	Payload *string `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (x *BidRequestExt_BidFeedback_EventNotificationToken) Reset() {
	*x = BidRequestExt_BidFeedback_EventNotificationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestExt_BidFeedback_EventNotificationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestExt_BidFeedback_EventNotificationToken) ProtoMessage() {}

func (x *BidRequestExt_BidFeedback_EventNotificationToken) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestExt_BidFeedback_EventNotificationToken.ProtoReflect.Descriptor instead.
func (*BidRequestExt_BidFeedback_EventNotificationToken) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *BidRequestExt_BidFeedback_EventNotificationToken) GetPayload() string {
	if x != nil && x.Payload != nil {
		return *x.Payload
	}
	return ""
}

type UserExt_ConsentedProvidersSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of IDs corresponding to ad tech providers (ATPs) for whom the
	// publisher has specified to Google that its EEA users have given legally
	// valid consent to: 1) the use of cookies or other local storage where
	// legally required; and 2) the collection, sharing, and use of personal
	// data for personalization of ads by an ATP in accordance with Google’s EU
	// User Consent Policy.
	//
	// If a publisher is using the IAB Transparency and Consent Framework (TCF)
	// v2 to manage user consent, this is the set of ATPs consented via the
	// Additional Consent string (see
	// https://support.google.com/admanager/answer/9681920 for details about
	// Google's Additional Consent mode). ATPs consented via the TCF v2 consent
	// string are represented in the UserExt.consent field.
	//
	// A mapping of ATP ID to ATP name is posted at providers.csv.
	ConsentedProviders []int64 `protobuf:"varint,2,rep,packed,name=consented_providers,json=consentedProviders" json:"consented_providers,omitempty"`
}

func (x *UserExt_ConsentedProvidersSettings) Reset() {
	*x = UserExt_ConsentedProvidersSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_adx_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserExt_ConsentedProvidersSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserExt_ConsentedProvidersSettings) ProtoMessage() {}

func (x *UserExt_ConsentedProvidersSettings) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_adx_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserExt_ConsentedProvidersSettings.ProtoReflect.Descriptor instead.
func (*UserExt_ConsentedProvidersSettings) Descriptor() ([]byte, []int) {
	return file_openrtb_adx_proto_rawDescGZIP(), []int{9, 0}
}

func (x *UserExt_ConsentedProvidersSettings) GetConsentedProviders() []int64 {
	if x != nil {
		return x.ConsentedProviders
	}
	return nil
}

var file_openrtb_adx_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*BidRequest_Imp)(nil),
		ExtensionType: (*ImpExt)(nil),
		Field:         1009,
		Name:          "com.google.doubleclick.imp",
		Tag:           "bytes,1009,opt,name=imp",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidRequest_App)(nil),
		ExtensionType: (*AppExt)(nil),
		Field:         1011,
		Name:          "com.google.doubleclick.app",
		Tag:           "bytes,1011,opt,name=app",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidResponse)(nil),
		ExtensionType: (*BidResponseExt)(nil),
		Field:         1005,
		Name:          "com.google.doubleclick.bid_response",
		Tag:           "bytes,1005,opt,name=bid_response",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidResponse_SeatBid_Bid)(nil),
		ExtensionType: (*BidExt)(nil),
		Field:         1014,
		Name:          "com.google.doubleclick.bid",
		Tag:           "bytes,1014,opt,name=bid",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*NativeRequest)(nil),
		ExtensionType: (*NativeRequestExt)(nil),
		Field:         1001,
		Name:          "com.google.doubleclick.native_ext",
		Tag:           "bytes,1001,opt,name=native_ext",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*NativeResponse_EventTracker)(nil),
		ExtensionType: (*EventTrackerExt)(nil),
		Field:         1000,
		Name:          "com.google.doubleclick.eventtrackers",
		Tag:           "bytes,1000,opt,name=eventtrackers",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidRequest_Publisher)(nil),
		ExtensionType: (*PublisherExt)(nil),
		Field:         1002,
		Name:          "com.google.doubleclick.publisher",
		Tag:           "bytes,1002,opt,name=publisher",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidRequest_Site)(nil),
		ExtensionType: (*SiteExt)(nil),
		Field:         1010,
		Name:          "com.google.doubleclick.site",
		Tag:           "bytes,1010,opt,name=site",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidRequest)(nil),
		ExtensionType: (*BidRequestExt)(nil),
		Field:         1018,
		Name:          "com.google.doubleclick.bid_request",
		Tag:           "bytes,1018,opt,name=bid_request",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidRequest_User)(nil),
		ExtensionType: (*UserExt)(nil),
		Field:         1007,
		Name:          "com.google.doubleclick.user",
		Tag:           "bytes,1007,opt,name=user",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidRequest_Device)(nil),
		ExtensionType: (*DeviceExt)(nil),
		Field:         1066,
		Name:          "com.google.doubleclick.device",
		Tag:           "bytes,1066,opt,name=device",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidRequest_Regs)(nil),
		ExtensionType: (*RegsExt)(nil),
		Field:         1001,
		Name:          "com.google.doubleclick.regs",
		Tag:           "bytes,1001,opt,name=regs",
		Filename:      "openrtb-adx.proto",
	},
	{
		ExtendedType:  (*BidRequest_Imp_Pmp_Deal)(nil),
		ExtensionType: (*DealExt)(nil),
		Field:         1010,
		Name:          "com.google.doubleclick.deal",
		Tag:           "bytes,1010,opt,name=deal",
		Filename:      "openrtb-adx.proto",
	},
}

// Extension fields to BidRequest_Imp.
var (
	// Extension key for AdX Imp.ext.
	//
	// optional com.google.doubleclick.ImpExt imp = 1009;
	E_Imp = &file_openrtb_adx_proto_extTypes[0]
)

// Extension fields to BidRequest_App.
var (
	// Extension key for AdX App.ext.
	//
	// optional com.google.doubleclick.AppExt app = 1011;
	E_App = &file_openrtb_adx_proto_extTypes[1]
)

// Extension fields to BidResponse.
var (
	// Extension key for AdX BidResponse.ext.
	//
	// optional com.google.doubleclick.BidResponseExt bid_response = 1005;
	E_BidResponse = &file_openrtb_adx_proto_extTypes[2]
)

// Extension fields to BidResponse_SeatBid_Bid.
var (
	// Extension key for AdX Bid.ext.
	//
	// optional com.google.doubleclick.BidExt bid = 1014;
	E_Bid = &file_openrtb_adx_proto_extTypes[3]
)

// Extension fields to NativeRequest.
var (
	// Extension key for the AdX Native.ext.
	//
	// optional com.google.doubleclick.NativeRequestExt native_ext = 1001;
	E_NativeExt = &file_openrtb_adx_proto_extTypes[4]
)

// Extension fields to NativeResponse_EventTracker.
var (
	// Extension key for the AdX EventTracker.ext.
	//
	// optional com.google.doubleclick.EventTrackerExt eventtrackers = 1000;
	E_Eventtrackers = &file_openrtb_adx_proto_extTypes[5]
)

// Extension fields to BidRequest_Publisher.
var (
	// Extension key for the AdX Publisher.ext
	//
	// optional com.google.doubleclick.PublisherExt publisher = 1002;
	E_Publisher = &file_openrtb_adx_proto_extTypes[6]
)

// Extension fields to BidRequest_Site.
var (
	// Extension key for the Adx Site.ext
	//
	// optional com.google.doubleclick.SiteExt site = 1010;
	E_Site = &file_openrtb_adx_proto_extTypes[7]
)

// Extension fields to BidRequest.
var (
	// Extension key for the Adx BidRequest.ext
	//
	// optional com.google.doubleclick.BidRequestExt bid_request = 1018;
	E_BidRequest = &file_openrtb_adx_proto_extTypes[8]
)

// Extension fields to BidRequest_User.
var (
	// Extension key for the Adx User.ext
	//
	// optional com.google.doubleclick.UserExt user = 1007;
	E_User = &file_openrtb_adx_proto_extTypes[9]
)

// Extension fields to BidRequest_Device.
var (
	// optional com.google.doubleclick.DeviceExt device = 1066;
	E_Device = &file_openrtb_adx_proto_extTypes[10]
)

// Extension fields to BidRequest_Regs.
var (
	// Extension key for the Adx Regs.ext
	//
	// optional com.google.doubleclick.RegsExt regs = 1001;
	E_Regs = &file_openrtb_adx_proto_extTypes[11]
)

// Extension fields to BidRequest_Imp_Pmp_Deal.
var (
	// Extension key for AdX Deal.ext.
	//
	// optional com.google.doubleclick.DealExt deal = 1010;
	E_Deal = &file_openrtb_adx_proto_extTypes[12]
)

var File_openrtb_adx_proto protoreflect.FileDescriptor

var file_openrtb_adx_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2d, 0x61, 0x64, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x1a, 0x0d, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x0b, 0x0a, 0x06, 0x49,
	0x6d, 0x70, 0x45, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x06, 0x52, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x45, 0x78,
	0x74, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x66, 0x70, 0x5f, 0x61, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x64, 0x66, 0x70, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x69, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x05, 0x61, 0x6d, 0x70, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x45,
	0x78, 0x74, 0x2e, 0x41, 0x6d, 0x70, 0x41, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x1f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x05, 0x61, 0x6d, 0x70, 0x61, 0x64, 0x12,
	0x79, 0x0a, 0x1c, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x49,
	0x6d, 0x70, 0x45, 0x78, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x19, 0x62, 0x75, 0x79, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x0c, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x45, 0x78, 0x74,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x19,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x73, 0x6b, 0x61,
	0x64, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x45, 0x78, 0x74, 0x2e, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x73, 0x6b, 0x61,
	0x64, 0x6e, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x64, 0x1a, 0xbb, 0x01, 0x0a, 0x19, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x63, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x49, 0x6d,
	0x70, 0x45, 0x78, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0x0a, 0x09, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0x35, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x69, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x6c, 0x0a, 0x12, 0x53, 0x4b, 0x41, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x61, 0x70, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x61, 0x70, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x61, 0x64, 0x6e, 0x65, 0x74,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x61, 0x64, 0x6e,
	0x65, 0x74, 0x69, 0x64, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x41, 0x6d, 0x70, 0x41, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x1f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x41,
	0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x41, 0x52,
	0x4c, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x05, 0x22, 0x88, 0x03, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x45, 0x78, 0x74, 0x12, 0x50, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x64, 0x6b, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x41, 0x70,
	0x70, 0x45, 0x78, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x64,
	0x6b, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x64, 0x6b, 0x1a,
	0xab, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x64, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x54, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x41,
	0x70, 0x70, 0x45, 0x78, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53,
	0x64, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x78, 0x74, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x64, 0x6b, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x57, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02,
	0x2d, 0x31, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x05, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x22, 0x3e, 0x0a,
	0x0e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x22, 0xc6, 0x0a,
	0x0a, 0x06, 0x42, 0x69, 0x64, 0x45, 0x78, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c,
	0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x64, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x6b,
	0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x45, 0x78, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x0a, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x54, 0x0a, 0x0f, 0x73,
	0x64, 0x6b, 0x5f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x42, 0x69,
	0x64, 0x45, 0x78, 0x74, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64,
	0x41, 0x64, 0x52, 0x0d, 0x73, 0x64, 0x6b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x41,
	0x64, 0x12, 0x6f, 0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x42, 0x69, 0x64,
	0x45, 0x78, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x16, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x26, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x22, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x55, 0x73,
	0x65, 0x42, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x42, 0x75, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x05, 0x73,
	0x6b, 0x61, 0x64, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x45, 0x78, 0x74, 0x2e, 0x53, 0x4b, 0x41, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05,
	0x73, 0x6b, 0x61, 0x64, 0x6e, 0x1a, 0x46, 0x0a, 0x0d, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x32, 0x0a,
	0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x1a, 0xf5, 0x01, 0x0a, 0x13, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x75,
	0x6e, 0x65, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x74, 0x75, 0x6e, 0x65, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x70, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x70, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x6b, 0x0a, 0x10, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45,
	0x44, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x03, 0x22, 0xfd, 0x01, 0x0a, 0x10, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x66, 0x0a, 0x11, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x2e,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x05, 0x50, 0x49, 0x58, 0x45,
	0x4c, 0x52, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x4c, 0x55, 0x49, 0x44, 0x10, 0x01, 0x22, 0xd6, 0x01, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x20, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4d, 0x49, 0x44, 0x10, 0x01, 0x22,
	0x28, 0x0a, 0x0c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x45, 0x78, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x77, 0x0a, 0x07, 0x53, 0x69, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x03, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x45,
	0x78, 0x74, 0x2e, 0x41, 0x6d, 0x70, 0x50, 0x61, 0x67, 0x65, 0x52, 0x03, 0x61, 0x6d, 0x70, 0x22,
	0x31, 0x0a, 0x07, 0x41, 0x6d, 0x70, 0x50, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49,
	0x41, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x49, 0x41, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x41, 0x4d, 0x50,
	0x10, 0x01, 0x22, 0xf6, 0x04, 0x0a, 0x0d, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x62, 0x69, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x2e, 0x42, 0x69, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x62,
	0x69, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x1a, 0xe6, 0x03, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69,
	0x64, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x5e, 0x0a, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x70, 0x6d, 0x5f,
	0x61, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x27, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x70, 0x6d, 0x41, 0x68, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74,
	0x2e, 0x42, 0x69, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x1a, 0x32, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x12, 0x7c, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x1a,
	0x51, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x2a, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x31,
	0x0a, 0x07, 0x52, 0x65, 0x67, 0x73, 0x45, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x64, 0x70,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x67, 0x64, 0x70, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x67, 0x70, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x67, 0x70,
	0x64, 0x22, 0xc2, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x12, 0x58, 0x0a,
	0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x78,
	0x74, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x64,
	0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x75, 0x73, 0x74, 0x5f,
	0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x07, 0x6d, 0x75, 0x73, 0x74, 0x42, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0x7c, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x43,
	0x4b, 0x41, 0x47, 0x45, 0x10, 0x04, 0x3a, 0x55, 0x0a, 0x03, 0x69, 0x6d, 0x70, 0x12, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d,
	0x70, 0x18, 0xf1, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x45, 0x78, 0x74, 0x52, 0x03, 0x69, 0x6d, 0x70, 0x3a, 0x55, 0x0a,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x18, 0xf3, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70, 0x45, 0x78, 0x74, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x3a, 0x6b, 0x0a, 0x0c, 0x62, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x78, 0x74, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x3a, 0x5e, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x69,
	0x64, 0x2e, 0x42, 0x69, 0x64, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x45, 0x78, 0x74, 0x52, 0x03, 0x62, 0x69,
	0x64, 0x3a, 0x6b, 0x0a, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x12,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69,
	0x63, 0x6b, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x52, 0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x78, 0x74, 0x3a, 0x7f,
	0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x3a,
	0x6d, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x3a, 0x59,
	0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x53, 0x69, 0x74, 0x65,
	0x45, 0x78, 0x74, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x3a, 0x67, 0x0a, 0x0b, 0x62, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0xfa, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x3a, 0x59, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x18,
	0xef, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x61, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0xaa,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x74, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x3a, 0x59, 0x0a, 0x04, 0x72, 0x65, 0x67, 0x73, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x73, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x2e, 0x52, 0x65,
	0x67, 0x73, 0x45, 0x78, 0x74, 0x52, 0x04, 0x72, 0x65, 0x67, 0x73, 0x3a, 0x61, 0x0a, 0x04, 0x64,
	0x65, 0x61, 0x6c, 0x12, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x50, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x61, 0x6c,
	0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x2e, 0x44, 0x65, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x52, 0x04, 0x64, 0x65, 0x61, 0x6c, 0x42, 0x16,
	0x42, 0x06, 0x41, 0x64, 0x78, 0x45, 0x78, 0x74, 0x5a, 0x0c, 0x2e, 0x3b, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x61, 0x64, 0x78,
}

var (
	file_openrtb_adx_proto_rawDescOnce sync.Once
	file_openrtb_adx_proto_rawDescData = file_openrtb_adx_proto_rawDesc
)

func file_openrtb_adx_proto_rawDescGZIP() []byte {
	file_openrtb_adx_proto_rawDescOnce.Do(func() {
		file_openrtb_adx_proto_rawDescData = protoimpl.X.CompressGZIP(file_openrtb_adx_proto_rawDescData)
	})
	return file_openrtb_adx_proto_rawDescData
}

var file_openrtb_adx_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_openrtb_adx_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_openrtb_adx_proto_goTypes = []interface{}{
	(ImpExt_AmpAdRequirementType)(0),                         // 0: com.google.doubleclick.ImpExt.AmpAdRequirementType
	(BidExt_ExchangeDealType)(0),                             // 1: com.google.doubleclick.BidExt.ExchangeDealType
	(NativeRequestExt_LayoutType)(0),                         // 2: com.google.doubleclick.NativeRequestExt.LayoutType
	(EventTrackerExt_Context)(0),                             // 3: com.google.doubleclick.EventTrackerExt.Context
	(SiteExt_AmpPage)(0),                                     // 4: com.google.doubleclick.SiteExt.AmpPage
	(DealExt_DealType)(0),                                    // 5: com.google.doubleclick.DealExt.DealType
	(*ImpExt)(nil),                                           // 6: com.google.doubleclick.ImpExt
	(*AppExt)(nil),                                           // 7: com.google.doubleclick.AppExt
	(*BidResponseExt)(nil),                                   // 8: com.google.doubleclick.BidResponseExt
	(*BidExt)(nil),                                           // 9: com.google.doubleclick.BidExt
	(*NativeRequestExt)(nil),                                 // 10: com.google.doubleclick.NativeRequestExt
	(*EventTrackerExt)(nil),                                  // 11: com.google.doubleclick.EventTrackerExt
	(*PublisherExt)(nil),                                     // 12: com.google.doubleclick.PublisherExt
	(*SiteExt)(nil),                                          // 13: com.google.doubleclick.SiteExt
	(*BidRequestExt)(nil),                                    // 14: com.google.doubleclick.BidRequestExt
	(*UserExt)(nil),                                          // 15: com.google.doubleclick.UserExt
	(*DeviceExt)(nil),                                        // 16: com.google.doubleclick.DeviceExt
	(*RegsExt)(nil),                                          // 17: com.google.doubleclick.RegsExt
	(*DealExt)(nil),                                          // 18: com.google.doubleclick.DealExt
	(*ImpExt_ExcludedCreative)(nil),                          // 19: com.google.doubleclick.ImpExt.ExcludedCreative
	(*ImpExt_BuyerGeneratedRequestData)(nil),                 // 20: com.google.doubleclick.ImpExt.BuyerGeneratedRequestData
	(*ImpExt_OpenBidding)(nil),                               // 21: com.google.doubleclick.ImpExt.OpenBidding
	(*ImpExt_SKAdNetworkRequest)(nil),                        // 22: com.google.doubleclick.ImpExt.SKAdNetworkRequest
	(*ImpExt_BuyerGeneratedRequestData_SourceApp)(nil),       // 23: com.google.doubleclick.ImpExt.BuyerGeneratedRequestData.SourceApp
	(*AppExt_InstalledSdk)(nil),                              // 24: com.google.doubleclick.AppExt.InstalledSdk
	(*AppExt_InstalledSdk_Version)(nil),                      // 25: com.google.doubleclick.AppExt.InstalledSdk.Version
	(*BidExt_SdkRenderedAd)(nil),                             // 26: com.google.doubleclick.BidExt.SdkRenderedAd
	(*BidExt_EventNotificationToken)(nil),                    // 27: com.google.doubleclick.BidExt.EventNotificationToken
	(*BidExt_SKAdNetworkResponse)(nil),                       // 28: com.google.doubleclick.BidExt.SKAdNetworkResponse
	(*BidRequestExt_BidFeedback)(nil),                        // 29: com.google.doubleclick.BidRequestExt.BidFeedback
	(*BidRequestExt_BidFeedback_EventNotificationToken)(nil), // 30: com.google.doubleclick.BidRequestExt.BidFeedback.EventNotificationToken
	(*UserExt_ConsentedProvidersSettings)(nil),               // 31: com.google.doubleclick.UserExt.ConsentedProvidersSettings
	(*BidRequest_Imp)(nil),                                   // 32: com.google.openrtb.BidRequest.Imp
	(*BidRequest_App)(nil),                                   // 33: com.google.openrtb.BidRequest.App
	(*BidResponse)(nil),                                      // 34: com.google.openrtb.BidResponse
	(*BidResponse_SeatBid_Bid)(nil),                          // 35: com.google.openrtb.BidResponse.SeatBid.Bid
	(*NativeRequest)(nil),                                    // 36: com.google.openrtb.NativeRequest
	(*NativeResponse_EventTracker)(nil),                      // 37: com.google.openrtb.NativeResponse.EventTracker
	(*BidRequest_Publisher)(nil),                             // 38: com.google.openrtb.BidRequest.Publisher
	(*BidRequest_Site)(nil),                                  // 39: com.google.openrtb.BidRequest.Site
	(*BidRequest)(nil),                                       // 40: com.google.openrtb.BidRequest
	(*BidRequest_User)(nil),                                  // 41: com.google.openrtb.BidRequest.User
	(*BidRequest_Device)(nil),                                // 42: com.google.openrtb.BidRequest.Device
	(*BidRequest_Regs)(nil),                                  // 43: com.google.openrtb.BidRequest.Regs
	(*BidRequest_Imp_Pmp_Deal)(nil),                          // 44: com.google.openrtb.BidRequest.Imp.Pmp.Deal
}
var file_openrtb_adx_proto_depIdxs = []int32{
	19, // 0: com.google.doubleclick.ImpExt.excluded_creatives:type_name -> com.google.doubleclick.ImpExt.ExcludedCreative
	0,  // 1: com.google.doubleclick.ImpExt.ampad:type_name -> com.google.doubleclick.ImpExt.AmpAdRequirementType
	20, // 2: com.google.doubleclick.ImpExt.buyer_generated_request_data:type_name -> com.google.doubleclick.ImpExt.BuyerGeneratedRequestData
	21, // 3: com.google.doubleclick.ImpExt.open_bidding:type_name -> com.google.doubleclick.ImpExt.OpenBidding
	22, // 4: com.google.doubleclick.ImpExt.skadn:type_name -> com.google.doubleclick.ImpExt.SKAdNetworkRequest
	24, // 5: com.google.doubleclick.AppExt.installed_sdk:type_name -> com.google.doubleclick.AppExt.InstalledSdk
	1,  // 6: com.google.doubleclick.BidExt.exchange_deal_type:type_name -> com.google.doubleclick.BidExt.ExchangeDealType
	26, // 7: com.google.doubleclick.BidExt.sdk_rendered_ad:type_name -> com.google.doubleclick.BidExt.SdkRenderedAd
	27, // 8: com.google.doubleclick.BidExt.event_notification_token:type_name -> com.google.doubleclick.BidExt.EventNotificationToken
	28, // 9: com.google.doubleclick.BidExt.skadn:type_name -> com.google.doubleclick.BidExt.SKAdNetworkResponse
	2,  // 10: com.google.doubleclick.NativeRequestExt.style_layout_type:type_name -> com.google.doubleclick.NativeRequestExt.LayoutType
	3,  // 11: com.google.doubleclick.EventTrackerExt.context:type_name -> com.google.doubleclick.EventTrackerExt.Context
	4,  // 12: com.google.doubleclick.SiteExt.amp:type_name -> com.google.doubleclick.SiteExt.AmpPage
	29, // 13: com.google.doubleclick.BidRequestExt.bid_feedback:type_name -> com.google.doubleclick.BidRequestExt.BidFeedback
	31, // 14: com.google.doubleclick.UserExt.consented_providers_settings:type_name -> com.google.doubleclick.UserExt.ConsentedProvidersSettings
	5,  // 15: com.google.doubleclick.DealExt.deal_type:type_name -> com.google.doubleclick.DealExt.DealType
	23, // 16: com.google.doubleclick.ImpExt.BuyerGeneratedRequestData.source_app:type_name -> com.google.doubleclick.ImpExt.BuyerGeneratedRequestData.SourceApp
	25, // 17: com.google.doubleclick.AppExt.InstalledSdk.sdk_version:type_name -> com.google.doubleclick.AppExt.InstalledSdk.Version
	25, // 18: com.google.doubleclick.AppExt.InstalledSdk.adapter_version:type_name -> com.google.doubleclick.AppExt.InstalledSdk.Version
	30, // 19: com.google.doubleclick.BidRequestExt.BidFeedback.event_notification_token:type_name -> com.google.doubleclick.BidRequestExt.BidFeedback.EventNotificationToken
	32, // 20: com.google.doubleclick.imp:extendee -> com.google.openrtb.BidRequest.Imp
	33, // 21: com.google.doubleclick.app:extendee -> com.google.openrtb.BidRequest.App
	34, // 22: com.google.doubleclick.bid_response:extendee -> com.google.openrtb.BidResponse
	35, // 23: com.google.doubleclick.bid:extendee -> com.google.openrtb.BidResponse.SeatBid.Bid
	36, // 24: com.google.doubleclick.native_ext:extendee -> com.google.openrtb.NativeRequest
	37, // 25: com.google.doubleclick.eventtrackers:extendee -> com.google.openrtb.NativeResponse.EventTracker
	38, // 26: com.google.doubleclick.publisher:extendee -> com.google.openrtb.BidRequest.Publisher
	39, // 27: com.google.doubleclick.site:extendee -> com.google.openrtb.BidRequest.Site
	40, // 28: com.google.doubleclick.bid_request:extendee -> com.google.openrtb.BidRequest
	41, // 29: com.google.doubleclick.user:extendee -> com.google.openrtb.BidRequest.User
	42, // 30: com.google.doubleclick.device:extendee -> com.google.openrtb.BidRequest.Device
	43, // 31: com.google.doubleclick.regs:extendee -> com.google.openrtb.BidRequest.Regs
	44, // 32: com.google.doubleclick.deal:extendee -> com.google.openrtb.BidRequest.Imp.Pmp.Deal
	6,  // 33: com.google.doubleclick.imp:type_name -> com.google.doubleclick.ImpExt
	7,  // 34: com.google.doubleclick.app:type_name -> com.google.doubleclick.AppExt
	8,  // 35: com.google.doubleclick.bid_response:type_name -> com.google.doubleclick.BidResponseExt
	9,  // 36: com.google.doubleclick.bid:type_name -> com.google.doubleclick.BidExt
	10, // 37: com.google.doubleclick.native_ext:type_name -> com.google.doubleclick.NativeRequestExt
	11, // 38: com.google.doubleclick.eventtrackers:type_name -> com.google.doubleclick.EventTrackerExt
	12, // 39: com.google.doubleclick.publisher:type_name -> com.google.doubleclick.PublisherExt
	13, // 40: com.google.doubleclick.site:type_name -> com.google.doubleclick.SiteExt
	14, // 41: com.google.doubleclick.bid_request:type_name -> com.google.doubleclick.BidRequestExt
	15, // 42: com.google.doubleclick.user:type_name -> com.google.doubleclick.UserExt
	16, // 43: com.google.doubleclick.device:type_name -> com.google.doubleclick.DeviceExt
	17, // 44: com.google.doubleclick.regs:type_name -> com.google.doubleclick.RegsExt
	18, // 45: com.google.doubleclick.deal:type_name -> com.google.doubleclick.DealExt
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	33, // [33:46] is the sub-list for extension type_name
	20, // [20:33] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_openrtb_adx_proto_init() }
func file_openrtb_adx_proto_init() {
	if File_openrtb_adx_proto != nil {
		return
	}
	file_openrtb_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_openrtb_adx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponseExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequestExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTrackerExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegsExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DealExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpExt_ExcludedCreative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpExt_BuyerGeneratedRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpExt_OpenBidding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpExt_SKAdNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpExt_BuyerGeneratedRequestData_SourceApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppExt_InstalledSdk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppExt_InstalledSdk_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidExt_SdkRenderedAd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidExt_EventNotificationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidExt_SKAdNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestExt_BidFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestExt_BidFeedback_EventNotificationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_openrtb_adx_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserExt_ConsentedProvidersSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_openrtb_adx_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ImpExt_BuyerGeneratedRequestData_SourceApp_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openrtb_adx_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   26,
			NumExtensions: 13,
			NumServices:   0,
		},
		GoTypes:           file_openrtb_adx_proto_goTypes,
		DependencyIndexes: file_openrtb_adx_proto_depIdxs,
		EnumInfos:         file_openrtb_adx_proto_enumTypes,
		MessageInfos:      file_openrtb_adx_proto_msgTypes,
		ExtensionInfos:    file_openrtb_adx_proto_extTypes,
	}.Build()
	File_openrtb_adx_proto = out.File
	file_openrtb_adx_proto_rawDesc = nil
	file_openrtb_adx_proto_goTypes = nil
	file_openrtb_adx_proto_depIdxs = nil
}
