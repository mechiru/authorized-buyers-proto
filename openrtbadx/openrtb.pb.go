// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: openrtb.proto

package openrtbadx

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OpenRTB 2.0: The following list represents the IAB's contextual taxonomy for
// categorization. Standard IDs have been adopted to easily support the
// communication of primary and secondary categories for various objects.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type ContentCategory int32

const (
	ContentCategory_UNDEFINED ContentCategory = 0   // This value is not part of the specification.
	ContentCategory_IAB1      ContentCategory = 1   // Arts & Entertainment
	ContentCategory_IAB1_1    ContentCategory = 2   // Books & Literature
	ContentCategory_IAB1_2    ContentCategory = 3   // Celebrity Fan/Gossip
	ContentCategory_IAB1_3    ContentCategory = 4   // Fine Art
	ContentCategory_IAB1_4    ContentCategory = 5   // Humor
	ContentCategory_IAB1_5    ContentCategory = 6   // Movies
	ContentCategory_IAB1_6    ContentCategory = 7   // Music
	ContentCategory_IAB1_7    ContentCategory = 8   // Television
	ContentCategory_IAB2      ContentCategory = 9   // Automotive
	ContentCategory_IAB2_1    ContentCategory = 10  // Auto Parts
	ContentCategory_IAB2_2    ContentCategory = 11  // Auto Repair
	ContentCategory_IAB2_3    ContentCategory = 12  // Buying/Selling Cars
	ContentCategory_IAB2_4    ContentCategory = 13  // Car Culture
	ContentCategory_IAB2_5    ContentCategory = 14  // Certified Pre-Owned
	ContentCategory_IAB2_6    ContentCategory = 15  // Convertible
	ContentCategory_IAB2_7    ContentCategory = 16  // Coupe
	ContentCategory_IAB2_8    ContentCategory = 17  // Crossover
	ContentCategory_IAB2_9    ContentCategory = 18  // Diesel
	ContentCategory_IAB2_10   ContentCategory = 19  // Electric Vehicle
	ContentCategory_IAB2_11   ContentCategory = 20  // Hatchback
	ContentCategory_IAB2_12   ContentCategory = 21  // Hybrid
	ContentCategory_IAB2_13   ContentCategory = 22  // Luxury
	ContentCategory_IAB2_14   ContentCategory = 23  // MiniVan
	ContentCategory_IAB2_15   ContentCategory = 24  // Motorcycles
	ContentCategory_IAB2_16   ContentCategory = 25  // Off-Road Vehicles
	ContentCategory_IAB2_17   ContentCategory = 26  // Performance Vehicles
	ContentCategory_IAB2_18   ContentCategory = 27  // Pickup
	ContentCategory_IAB2_19   ContentCategory = 28  // Road-Side Assistance
	ContentCategory_IAB2_20   ContentCategory = 29  // Sedan
	ContentCategory_IAB2_21   ContentCategory = 30  // Trucks & Accessories
	ContentCategory_IAB2_22   ContentCategory = 31  // Vintage Cars
	ContentCategory_IAB2_23   ContentCategory = 32  // Wagon
	ContentCategory_IAB3      ContentCategory = 33  // Business
	ContentCategory_IAB3_1    ContentCategory = 34  // Advertising
	ContentCategory_IAB3_2    ContentCategory = 35  // Agriculture
	ContentCategory_IAB3_3    ContentCategory = 36  // Biotech/Biomedical
	ContentCategory_IAB3_4    ContentCategory = 37  // Business Software
	ContentCategory_IAB3_5    ContentCategory = 38  // Construction
	ContentCategory_IAB3_6    ContentCategory = 39  // Forestry
	ContentCategory_IAB3_7    ContentCategory = 40  // Government
	ContentCategory_IAB3_8    ContentCategory = 41  // Green Solutions
	ContentCategory_IAB3_9    ContentCategory = 42  // Human Resources
	ContentCategory_IAB3_10   ContentCategory = 43  // Logistics
	ContentCategory_IAB3_11   ContentCategory = 44  // Marketing
	ContentCategory_IAB3_12   ContentCategory = 45  // Metals
	ContentCategory_IAB4      ContentCategory = 46  // Careers
	ContentCategory_IAB4_1    ContentCategory = 47  // Career Planning
	ContentCategory_IAB4_2    ContentCategory = 48  // College
	ContentCategory_IAB4_3    ContentCategory = 49  // Financial  Aid
	ContentCategory_IAB4_4    ContentCategory = 50  // Job Fairs
	ContentCategory_IAB4_5    ContentCategory = 51  // Job Search
	ContentCategory_IAB4_6    ContentCategory = 52  // Resume Writing/Advice
	ContentCategory_IAB4_7    ContentCategory = 53  // Nursing
	ContentCategory_IAB4_8    ContentCategory = 54  // Scholarships
	ContentCategory_IAB4_9    ContentCategory = 55  // Telecommuting
	ContentCategory_IAB4_10   ContentCategory = 56  // U.S. Military
	ContentCategory_IAB4_11   ContentCategory = 57  // Career Advice
	ContentCategory_IAB5      ContentCategory = 58  // Education
	ContentCategory_IAB5_1    ContentCategory = 59  // 7-12 Education
	ContentCategory_IAB5_2    ContentCategory = 60  // Adult Education
	ContentCategory_IAB5_3    ContentCategory = 61  // Art History
	ContentCategory_IAB5_4    ContentCategory = 62  // College Administration
	ContentCategory_IAB5_5    ContentCategory = 63  // College Life
	ContentCategory_IAB5_6    ContentCategory = 64  // Distance Learning
	ContentCategory_IAB5_7    ContentCategory = 65  // English as a 2nd Language
	ContentCategory_IAB5_8    ContentCategory = 66  // Language Learning
	ContentCategory_IAB5_9    ContentCategory = 67  // Graduate School
	ContentCategory_IAB5_10   ContentCategory = 68  // Homeschooling
	ContentCategory_IAB5_11   ContentCategory = 69  // Homework/Study Tips
	ContentCategory_IAB5_12   ContentCategory = 70  // K-6 Educators
	ContentCategory_IAB5_13   ContentCategory = 71  // Private School
	ContentCategory_IAB5_14   ContentCategory = 72  // Special Education
	ContentCategory_IAB5_15   ContentCategory = 73  // Studying Business
	ContentCategory_IAB6      ContentCategory = 74  // Family & Parenting
	ContentCategory_IAB6_1    ContentCategory = 75  // Adoption
	ContentCategory_IAB6_2    ContentCategory = 76  // Babies & Toddlers
	ContentCategory_IAB6_3    ContentCategory = 77  // Daycare/Pre School
	ContentCategory_IAB6_4    ContentCategory = 78  // Family Internet
	ContentCategory_IAB6_5    ContentCategory = 79  // Parenting - K-6 Kids
	ContentCategory_IAB6_6    ContentCategory = 80  // Parenting teens
	ContentCategory_IAB6_7    ContentCategory = 81  // Pregnancy
	ContentCategory_IAB6_8    ContentCategory = 82  // Special Needs Kids
	ContentCategory_IAB6_9    ContentCategory = 83  // Eldercare
	ContentCategory_IAB7      ContentCategory = 84  // Health & Fitness
	ContentCategory_IAB7_1    ContentCategory = 85  // Exercise
	ContentCategory_IAB7_2    ContentCategory = 86  // A.D.D.
	ContentCategory_IAB7_3    ContentCategory = 87  // AIDS/HIV
	ContentCategory_IAB7_4    ContentCategory = 88  // Allergies
	ContentCategory_IAB7_5    ContentCategory = 89  // Alternative Medicine
	ContentCategory_IAB7_6    ContentCategory = 90  // Arthritis
	ContentCategory_IAB7_7    ContentCategory = 91  // Asthma
	ContentCategory_IAB7_8    ContentCategory = 92  // Autism/PDD
	ContentCategory_IAB7_9    ContentCategory = 93  // Bipolar Disorder
	ContentCategory_IAB7_10   ContentCategory = 94  // Brain Tumor
	ContentCategory_IAB7_11   ContentCategory = 95  // Cancer
	ContentCategory_IAB7_12   ContentCategory = 96  // Cholesterol
	ContentCategory_IAB7_13   ContentCategory = 97  // Chronic Fatigue Syndrome
	ContentCategory_IAB7_14   ContentCategory = 98  // Chronic Pain
	ContentCategory_IAB7_15   ContentCategory = 99  // Cold & Flu
	ContentCategory_IAB7_16   ContentCategory = 100 // Deafness
	ContentCategory_IAB7_17   ContentCategory = 101 // Dental Care
	ContentCategory_IAB7_18   ContentCategory = 102 // Depression
	ContentCategory_IAB7_19   ContentCategory = 103 // Dermatology
	ContentCategory_IAB7_20   ContentCategory = 104 // Diabetes
	ContentCategory_IAB7_21   ContentCategory = 105 // Epilepsy
	ContentCategory_IAB7_22   ContentCategory = 106 // GERD/Acid Reflux
	ContentCategory_IAB7_23   ContentCategory = 107 // Headaches/Migraines
	ContentCategory_IAB7_24   ContentCategory = 108 // Heart Disease
	ContentCategory_IAB7_25   ContentCategory = 109 // Herbs for Health
	ContentCategory_IAB7_26   ContentCategory = 110 // Holistic Healing
	ContentCategory_IAB7_27   ContentCategory = 111 // IBS/Crohn's Disease
	ContentCategory_IAB7_28   ContentCategory = 112 // Incest/Abuse Support
	ContentCategory_IAB7_29   ContentCategory = 113 // Incontinence
	ContentCategory_IAB7_30   ContentCategory = 114 // Infertility
	ContentCategory_IAB7_31   ContentCategory = 115 // Men's Health
	ContentCategory_IAB7_32   ContentCategory = 116 // Nutrition
	ContentCategory_IAB7_33   ContentCategory = 117 // Orthopedics
	ContentCategory_IAB7_34   ContentCategory = 118 // Panic/Anxiety Disorders
	ContentCategory_IAB7_35   ContentCategory = 119 // Pediatrics
	ContentCategory_IAB7_36   ContentCategory = 120 // Physical Therapy
	ContentCategory_IAB7_37   ContentCategory = 121 // Psychology/Psychiatry
	ContentCategory_IAB7_38   ContentCategory = 122 // Senor Health
	ContentCategory_IAB7_39   ContentCategory = 123 // Sexuality
	ContentCategory_IAB7_40   ContentCategory = 124 // Sleep Disorders
	ContentCategory_IAB7_41   ContentCategory = 125 // Smoking Cessation
	ContentCategory_IAB7_42   ContentCategory = 126 // Substance Abuse
	ContentCategory_IAB7_43   ContentCategory = 127 // Thyroid Disease
	ContentCategory_IAB7_44   ContentCategory = 128 // Weight Loss
	ContentCategory_IAB7_45   ContentCategory = 129 // Women's Health
	ContentCategory_IAB8      ContentCategory = 130 // Food & Drink
	ContentCategory_IAB8_1    ContentCategory = 131 // American Cuisine
	ContentCategory_IAB8_2    ContentCategory = 132 // Barbecues & Grilling
	ContentCategory_IAB8_3    ContentCategory = 133 // Cajun/Creole
	ContentCategory_IAB8_4    ContentCategory = 134 // Chinese Cuisine
	ContentCategory_IAB8_5    ContentCategory = 135 // Cocktails/Beer
	ContentCategory_IAB8_6    ContentCategory = 136 // Coffee/Tea
	ContentCategory_IAB8_7    ContentCategory = 137 // Cuisine-Specific
	ContentCategory_IAB8_8    ContentCategory = 138 // Desserts & Baking
	ContentCategory_IAB8_9    ContentCategory = 139 // Dining Out
	ContentCategory_IAB8_10   ContentCategory = 140 // Food Allergies
	ContentCategory_IAB8_11   ContentCategory = 141 // French Cuisine
	ContentCategory_IAB8_12   ContentCategory = 142 // Health/Lowfat Cooking
	ContentCategory_IAB8_13   ContentCategory = 143 // Italian Cuisine
	ContentCategory_IAB8_14   ContentCategory = 144 // Japanese Cuisine
	ContentCategory_IAB8_15   ContentCategory = 145 // Mexican Cuisine
	ContentCategory_IAB8_16   ContentCategory = 146 // Vegan
	ContentCategory_IAB8_17   ContentCategory = 147 // Vegetarian
	ContentCategory_IAB8_18   ContentCategory = 148 // Wine
	ContentCategory_IAB9      ContentCategory = 149 // Hobbies & Interests
	ContentCategory_IAB9_1    ContentCategory = 150 // Art/Technology
	ContentCategory_IAB9_2    ContentCategory = 151 // Arts & Crafts
	ContentCategory_IAB9_3    ContentCategory = 152 // Beadwork
	ContentCategory_IAB9_4    ContentCategory = 153 // Birdwatching
	ContentCategory_IAB9_5    ContentCategory = 154 // Board Games/Puzzles
	ContentCategory_IAB9_6    ContentCategory = 155 // Candle & Soap Making
	ContentCategory_IAB9_7    ContentCategory = 156 // Card Games
	ContentCategory_IAB9_8    ContentCategory = 157 // Chess
	ContentCategory_IAB9_9    ContentCategory = 158 // Cigars
	ContentCategory_IAB9_10   ContentCategory = 159 // Collecting
	ContentCategory_IAB9_11   ContentCategory = 160 // Comic Books
	ContentCategory_IAB9_12   ContentCategory = 161 // Drawing/Sketching
	ContentCategory_IAB9_13   ContentCategory = 162 // Freelance Writing
	ContentCategory_IAB9_14   ContentCategory = 163 // Geneaology
	ContentCategory_IAB9_15   ContentCategory = 164 // Getting Published
	ContentCategory_IAB9_16   ContentCategory = 165 // Guitar
	ContentCategory_IAB9_17   ContentCategory = 166 // Home Recording
	ContentCategory_IAB9_18   ContentCategory = 167 // Investors & Patents
	ContentCategory_IAB9_19   ContentCategory = 168 // Jewelry Making
	ContentCategory_IAB9_20   ContentCategory = 169 // Magic & Illusion
	ContentCategory_IAB9_21   ContentCategory = 170 // Needlework
	ContentCategory_IAB9_22   ContentCategory = 171 // Painting
	ContentCategory_IAB9_23   ContentCategory = 172 // Photography
	ContentCategory_IAB9_24   ContentCategory = 173 // Radio
	ContentCategory_IAB9_25   ContentCategory = 174 // Roleplaying Games
	ContentCategory_IAB9_26   ContentCategory = 175 // Sci-Fi & Fantasy
	ContentCategory_IAB9_27   ContentCategory = 176 // Scrapbooking
	ContentCategory_IAB9_28   ContentCategory = 177 // Screenwriting
	ContentCategory_IAB9_29   ContentCategory = 178 // Stamps & Coins
	ContentCategory_IAB9_30   ContentCategory = 179 // Video & Computer Games
	ContentCategory_IAB9_31   ContentCategory = 180 // Woodworking
	ContentCategory_IAB10     ContentCategory = 181 // Home & Garden
	ContentCategory_IAB10_1   ContentCategory = 182 // Appliances
	ContentCategory_IAB10_2   ContentCategory = 183 // Entertaining
	ContentCategory_IAB10_3   ContentCategory = 184 // Environmental Safety
	ContentCategory_IAB10_4   ContentCategory = 185 // Gardening
	ContentCategory_IAB10_5   ContentCategory = 186 // Home Repair
	ContentCategory_IAB10_6   ContentCategory = 187 // Home Theater
	ContentCategory_IAB10_7   ContentCategory = 188 // Interior  Decorating
	ContentCategory_IAB10_8   ContentCategory = 189 // Landscaping
	ContentCategory_IAB10_9   ContentCategory = 190 // Remodeling & Construction
	ContentCategory_IAB11     ContentCategory = 191 // Law, Gov't & Politics
	ContentCategory_IAB11_1   ContentCategory = 192 // Immigration
	ContentCategory_IAB11_2   ContentCategory = 193 // Legal Issues
	ContentCategory_IAB11_3   ContentCategory = 194 // U.S. Government Resources
	ContentCategory_IAB11_4   ContentCategory = 195 // Politics
	ContentCategory_IAB11_5   ContentCategory = 196 // Commentary
	ContentCategory_IAB12     ContentCategory = 197 // News
	ContentCategory_IAB12_1   ContentCategory = 198 // International News
	ContentCategory_IAB12_2   ContentCategory = 199 // National News
	ContentCategory_IAB12_3   ContentCategory = 200 // Local News
	ContentCategory_IAB13     ContentCategory = 201 // Personal Finance
	ContentCategory_IAB13_1   ContentCategory = 202 // Beginning Investing
	ContentCategory_IAB13_2   ContentCategory = 203 // Credit/Debt & Loans
	ContentCategory_IAB13_3   ContentCategory = 204 // Financial News
	ContentCategory_IAB13_4   ContentCategory = 205 // Financial Planning
	ContentCategory_IAB13_5   ContentCategory = 206 // Hedge Fund
	ContentCategory_IAB13_6   ContentCategory = 207 // Insurance
	ContentCategory_IAB13_7   ContentCategory = 208 // Investing
	ContentCategory_IAB13_8   ContentCategory = 209 // Mutual Funds
	ContentCategory_IAB13_9   ContentCategory = 210 // Options
	ContentCategory_IAB13_10  ContentCategory = 211 // Retirement Planning
	ContentCategory_IAB13_11  ContentCategory = 212 // Stocks
	ContentCategory_IAB13_12  ContentCategory = 213 // Tax Planning
	ContentCategory_IAB14     ContentCategory = 214 // Society
	ContentCategory_IAB14_1   ContentCategory = 215 // Dating
	ContentCategory_IAB14_2   ContentCategory = 216 // Divorce Support
	ContentCategory_IAB14_3   ContentCategory = 217 // Gay Life
	ContentCategory_IAB14_4   ContentCategory = 218 // Marriage
	ContentCategory_IAB14_5   ContentCategory = 219 // Senior Living
	ContentCategory_IAB14_6   ContentCategory = 220 // Teens
	ContentCategory_IAB14_7   ContentCategory = 221 // Weddings
	ContentCategory_IAB14_8   ContentCategory = 222 // Ethnic Specific
	ContentCategory_IAB15     ContentCategory = 223 // Science
	ContentCategory_IAB15_1   ContentCategory = 224 // Astrology
	ContentCategory_IAB15_2   ContentCategory = 225 // Biology
	ContentCategory_IAB15_3   ContentCategory = 226 // Chemistry
	ContentCategory_IAB15_4   ContentCategory = 227 // Geology
	ContentCategory_IAB15_5   ContentCategory = 228 // Paranormal Phenomena
	ContentCategory_IAB15_6   ContentCategory = 229 // Physics
	ContentCategory_IAB15_7   ContentCategory = 230 // Space/Astronomy
	ContentCategory_IAB15_8   ContentCategory = 231 // Geography
	ContentCategory_IAB15_9   ContentCategory = 232 // Botany
	ContentCategory_IAB15_10  ContentCategory = 233 // Weather
	ContentCategory_IAB16     ContentCategory = 234 // Pets
	ContentCategory_IAB16_1   ContentCategory = 235 // Aquariums
	ContentCategory_IAB16_2   ContentCategory = 236 // Birds
	ContentCategory_IAB16_3   ContentCategory = 237 // Cats
	ContentCategory_IAB16_4   ContentCategory = 238 // Dogs
	ContentCategory_IAB16_5   ContentCategory = 239 // Large Animals
	ContentCategory_IAB16_6   ContentCategory = 240 // Reptiles
	ContentCategory_IAB16_7   ContentCategory = 241 // Veterinary Medicine
	ContentCategory_IAB17     ContentCategory = 242 // Sports
	ContentCategory_IAB17_1   ContentCategory = 243 // Auto Racing
	ContentCategory_IAB17_2   ContentCategory = 244 // Baseball
	ContentCategory_IAB17_3   ContentCategory = 245 // Bicycling
	ContentCategory_IAB17_4   ContentCategory = 246 // Bodybuilding
	ContentCategory_IAB17_5   ContentCategory = 247 // Boxing
	ContentCategory_IAB17_6   ContentCategory = 248 // Canoeing/Kayaking
	ContentCategory_IAB17_7   ContentCategory = 249 // Cheerleading
	ContentCategory_IAB17_8   ContentCategory = 250 // Climbing
	ContentCategory_IAB17_9   ContentCategory = 251 // Cricket
	ContentCategory_IAB17_10  ContentCategory = 252 // Figure Skating
	ContentCategory_IAB17_11  ContentCategory = 253 // Fly Fishing
	ContentCategory_IAB17_12  ContentCategory = 254 // Football
	ContentCategory_IAB17_13  ContentCategory = 255 // Freshwater Fishing
	ContentCategory_IAB17_14  ContentCategory = 256 // Game & Fish
	ContentCategory_IAB17_15  ContentCategory = 257 // Golf
	ContentCategory_IAB17_16  ContentCategory = 258 // Horse Racing
	ContentCategory_IAB17_17  ContentCategory = 259 // Horses
	ContentCategory_IAB17_18  ContentCategory = 260 // Hunting/Shooting
	ContentCategory_IAB17_19  ContentCategory = 261 // Inline  Skating
	ContentCategory_IAB17_20  ContentCategory = 262 // Martial Arts
	ContentCategory_IAB17_21  ContentCategory = 263 // Mountain Biking
	ContentCategory_IAB17_22  ContentCategory = 264 // NASCAR Racing
	ContentCategory_IAB17_23  ContentCategory = 265 // Olympics
	ContentCategory_IAB17_24  ContentCategory = 266 // Paintball
	ContentCategory_IAB17_25  ContentCategory = 267 // Power & Motorcycles
	ContentCategory_IAB17_26  ContentCategory = 268 // Pro Basketball
	ContentCategory_IAB17_27  ContentCategory = 269 // Pro Ice Hockey
	ContentCategory_IAB17_28  ContentCategory = 270 // Rodeo
	ContentCategory_IAB17_29  ContentCategory = 271 // Rugby
	ContentCategory_IAB17_30  ContentCategory = 272 // Running/Jogging
	ContentCategory_IAB17_31  ContentCategory = 273 // Sailing
	ContentCategory_IAB17_32  ContentCategory = 274 // Saltwater Fishing
	ContentCategory_IAB17_33  ContentCategory = 275 // Scuba Diving
	ContentCategory_IAB17_34  ContentCategory = 276 // Skateboarding
	ContentCategory_IAB17_35  ContentCategory = 277 // Skiing
	ContentCategory_IAB17_36  ContentCategory = 278 // Snowboarding
	ContentCategory_IAB17_37  ContentCategory = 279 // Surfing/Bodyboarding
	ContentCategory_IAB17_38  ContentCategory = 280 // Swimming
	ContentCategory_IAB17_39  ContentCategory = 281 // Table Tennis/Ping-Pong
	ContentCategory_IAB17_40  ContentCategory = 282 // Tennis
	ContentCategory_IAB17_41  ContentCategory = 283 // Volleyball
	ContentCategory_IAB17_42  ContentCategory = 284 // Walking
	ContentCategory_IAB17_43  ContentCategory = 285 // Waterski/Wakeboard
	ContentCategory_IAB17_44  ContentCategory = 286 // World Soccer
	ContentCategory_IAB18     ContentCategory = 287 // Style & Fashion
	ContentCategory_IAB18_1   ContentCategory = 288 // Beauty
	ContentCategory_IAB18_2   ContentCategory = 289 // Body Art
	ContentCategory_IAB18_3   ContentCategory = 290 // Fashion
	ContentCategory_IAB18_4   ContentCategory = 291 // Jewelry
	ContentCategory_IAB18_5   ContentCategory = 292 // Clothing
	ContentCategory_IAB18_6   ContentCategory = 293 // Accessories
	ContentCategory_IAB19     ContentCategory = 294 // Technology & Computing
	ContentCategory_IAB19_1   ContentCategory = 295 // 3-D Graphics
	ContentCategory_IAB19_2   ContentCategory = 296 // Animation
	ContentCategory_IAB19_3   ContentCategory = 297 // Antivirus Software
	ContentCategory_IAB19_4   ContentCategory = 298 // C/C++
	ContentCategory_IAB19_5   ContentCategory = 299 // Cameras & Camcorders
	ContentCategory_IAB19_6   ContentCategory = 300 // Cell  Phones
	ContentCategory_IAB19_7   ContentCategory = 301 // Computer Certification
	ContentCategory_IAB19_8   ContentCategory = 302 // Computer Networking
	ContentCategory_IAB19_9   ContentCategory = 303 // Computer Peripherals
	ContentCategory_IAB19_10  ContentCategory = 304 // Computer Reviews
	ContentCategory_IAB19_11  ContentCategory = 305 // Data Centers
	ContentCategory_IAB19_12  ContentCategory = 306 // Databases
	ContentCategory_IAB19_13  ContentCategory = 307 // Desktop Publishing
	ContentCategory_IAB19_14  ContentCategory = 308 // Desktop Video
	ContentCategory_IAB19_15  ContentCategory = 309 // Email
	ContentCategory_IAB19_16  ContentCategory = 310 // Graphics Software
	ContentCategory_IAB19_17  ContentCategory = 311 // Home Video/DVD
	ContentCategory_IAB19_18  ContentCategory = 312 // Internet Technology
	ContentCategory_IAB19_19  ContentCategory = 313 // Java
	ContentCategory_IAB19_20  ContentCategory = 314 // Javascript
	ContentCategory_IAB19_21  ContentCategory = 315 // Mac Support
	ContentCategory_IAB19_22  ContentCategory = 316 // MP3/MIDI
	ContentCategory_IAB19_23  ContentCategory = 317 // Net Conferencing
	ContentCategory_IAB19_24  ContentCategory = 318 // Net for Beginners
	ContentCategory_IAB19_25  ContentCategory = 319 // Network Security
	ContentCategory_IAB19_26  ContentCategory = 320 // Palmtops/PDAs
	ContentCategory_IAB19_27  ContentCategory = 321 // PC Support
	ContentCategory_IAB19_28  ContentCategory = 322 // Portable
	ContentCategory_IAB19_29  ContentCategory = 323 // Entertainment
	ContentCategory_IAB19_30  ContentCategory = 324 // Shareware/Freeware
	ContentCategory_IAB19_31  ContentCategory = 325 // Unix
	ContentCategory_IAB19_32  ContentCategory = 326 // Visual Basic
	ContentCategory_IAB19_33  ContentCategory = 327 // Web Clip Art
	ContentCategory_IAB19_34  ContentCategory = 328 // Web Design/HTML
	ContentCategory_IAB19_35  ContentCategory = 329 // Web Search
	ContentCategory_IAB19_36  ContentCategory = 330 // Windows
	ContentCategory_IAB20     ContentCategory = 331 // Travel
	ContentCategory_IAB20_1   ContentCategory = 332 // Adventure Travel
	ContentCategory_IAB20_2   ContentCategory = 333 // Africa
	ContentCategory_IAB20_3   ContentCategory = 334 // Air Travel
	ContentCategory_IAB20_4   ContentCategory = 335 // Australia & New Zealand
	ContentCategory_IAB20_5   ContentCategory = 336 // Bed & Breakfasts
	ContentCategory_IAB20_6   ContentCategory = 337 // Budget Travel
	ContentCategory_IAB20_7   ContentCategory = 338 // Business Travel
	ContentCategory_IAB20_8   ContentCategory = 339 // By US Locale
	ContentCategory_IAB20_9   ContentCategory = 340 // Camping
	ContentCategory_IAB20_10  ContentCategory = 341 // Canada
	ContentCategory_IAB20_11  ContentCategory = 342 // Caribbean
	ContentCategory_IAB20_12  ContentCategory = 343 // Cruises
	ContentCategory_IAB20_13  ContentCategory = 344 // Eastern  Europe
	ContentCategory_IAB20_14  ContentCategory = 345 // Europe
	ContentCategory_IAB20_15  ContentCategory = 346 // France
	ContentCategory_IAB20_16  ContentCategory = 347 // Greece
	ContentCategory_IAB20_17  ContentCategory = 348 // Honeymoons/Getaways
	ContentCategory_IAB20_18  ContentCategory = 349 // Hotels
	ContentCategory_IAB20_19  ContentCategory = 350 // Italy
	ContentCategory_IAB20_20  ContentCategory = 351 // Japan
	ContentCategory_IAB20_21  ContentCategory = 352 // Mexico & Central America
	ContentCategory_IAB20_22  ContentCategory = 353 // National Parks
	ContentCategory_IAB20_23  ContentCategory = 354 // South America
	ContentCategory_IAB20_24  ContentCategory = 355 // Spas
	ContentCategory_IAB20_25  ContentCategory = 356 // Theme Parks
	ContentCategory_IAB20_26  ContentCategory = 357 // Traveling with Kids
	ContentCategory_IAB20_27  ContentCategory = 358 // United Kingdom
	ContentCategory_IAB21     ContentCategory = 359 // Real Estate
	ContentCategory_IAB21_1   ContentCategory = 360 // Apartments
	ContentCategory_IAB21_2   ContentCategory = 361 // Architects
	ContentCategory_IAB21_3   ContentCategory = 362 // Buying/Selling Homes
	ContentCategory_IAB22     ContentCategory = 363 // Shopping
	ContentCategory_IAB22_1   ContentCategory = 364 // Contests & Freebies
	ContentCategory_IAB22_2   ContentCategory = 365 // Couponing
	ContentCategory_IAB22_3   ContentCategory = 366 // Comparison
	ContentCategory_IAB22_4   ContentCategory = 367 // Engines
	ContentCategory_IAB23     ContentCategory = 368 // Religion & Spirituality
	ContentCategory_IAB23_1   ContentCategory = 369 // Alternative Religions
	ContentCategory_IAB23_2   ContentCategory = 370 // Atheism/Agnosticism
	ContentCategory_IAB23_3   ContentCategory = 371 // Buddhism
	ContentCategory_IAB23_4   ContentCategory = 372 // Catholicism
	ContentCategory_IAB23_5   ContentCategory = 373 // Christianity
	ContentCategory_IAB23_6   ContentCategory = 374 // Hinduism
	ContentCategory_IAB23_7   ContentCategory = 375 // Islam
	ContentCategory_IAB23_8   ContentCategory = 376 // Judaism
	ContentCategory_IAB23_9   ContentCategory = 377 // Latter-Day Saints
	ContentCategory_IAB23_10  ContentCategory = 378 // Paga/Wiccan
	ContentCategory_IAB24     ContentCategory = 379 // Uncategorized
	ContentCategory_IAB25     ContentCategory = 380 // Non-Standard Content
	ContentCategory_IAB25_1   ContentCategory = 381 // Unmoderated UGC
	ContentCategory_IAB25_2   ContentCategory = 382 // Extreme Graphic/Explicit Violence
	ContentCategory_IAB25_3   ContentCategory = 383 // Pornography
	ContentCategory_IAB25_4   ContentCategory = 384 // Profane Content
	ContentCategory_IAB25_5   ContentCategory = 385 // Hate Content
	ContentCategory_IAB25_6   ContentCategory = 386 // Under Construction
	ContentCategory_IAB25_7   ContentCategory = 387 // Incentivized
	ContentCategory_IAB26     ContentCategory = 388 // Illegal Content
	ContentCategory_IAB26_1   ContentCategory = 389 // Illegal Content
	ContentCategory_IAB26_2   ContentCategory = 390 // Warez
	ContentCategory_IAB26_3   ContentCategory = 391 // Spyware/Malware
	ContentCategory_IAB26_4   ContentCategory = 392 // Copyright Infringement
)

// Enum value maps for ContentCategory.
var (
	ContentCategory_name = map[int32]string{
		0:   "UNDEFINED",
		1:   "IAB1",
		2:   "IAB1_1",
		3:   "IAB1_2",
		4:   "IAB1_3",
		5:   "IAB1_4",
		6:   "IAB1_5",
		7:   "IAB1_6",
		8:   "IAB1_7",
		9:   "IAB2",
		10:  "IAB2_1",
		11:  "IAB2_2",
		12:  "IAB2_3",
		13:  "IAB2_4",
		14:  "IAB2_5",
		15:  "IAB2_6",
		16:  "IAB2_7",
		17:  "IAB2_8",
		18:  "IAB2_9",
		19:  "IAB2_10",
		20:  "IAB2_11",
		21:  "IAB2_12",
		22:  "IAB2_13",
		23:  "IAB2_14",
		24:  "IAB2_15",
		25:  "IAB2_16",
		26:  "IAB2_17",
		27:  "IAB2_18",
		28:  "IAB2_19",
		29:  "IAB2_20",
		30:  "IAB2_21",
		31:  "IAB2_22",
		32:  "IAB2_23",
		33:  "IAB3",
		34:  "IAB3_1",
		35:  "IAB3_2",
		36:  "IAB3_3",
		37:  "IAB3_4",
		38:  "IAB3_5",
		39:  "IAB3_6",
		40:  "IAB3_7",
		41:  "IAB3_8",
		42:  "IAB3_9",
		43:  "IAB3_10",
		44:  "IAB3_11",
		45:  "IAB3_12",
		46:  "IAB4",
		47:  "IAB4_1",
		48:  "IAB4_2",
		49:  "IAB4_3",
		50:  "IAB4_4",
		51:  "IAB4_5",
		52:  "IAB4_6",
		53:  "IAB4_7",
		54:  "IAB4_8",
		55:  "IAB4_9",
		56:  "IAB4_10",
		57:  "IAB4_11",
		58:  "IAB5",
		59:  "IAB5_1",
		60:  "IAB5_2",
		61:  "IAB5_3",
		62:  "IAB5_4",
		63:  "IAB5_5",
		64:  "IAB5_6",
		65:  "IAB5_7",
		66:  "IAB5_8",
		67:  "IAB5_9",
		68:  "IAB5_10",
		69:  "IAB5_11",
		70:  "IAB5_12",
		71:  "IAB5_13",
		72:  "IAB5_14",
		73:  "IAB5_15",
		74:  "IAB6",
		75:  "IAB6_1",
		76:  "IAB6_2",
		77:  "IAB6_3",
		78:  "IAB6_4",
		79:  "IAB6_5",
		80:  "IAB6_6",
		81:  "IAB6_7",
		82:  "IAB6_8",
		83:  "IAB6_9",
		84:  "IAB7",
		85:  "IAB7_1",
		86:  "IAB7_2",
		87:  "IAB7_3",
		88:  "IAB7_4",
		89:  "IAB7_5",
		90:  "IAB7_6",
		91:  "IAB7_7",
		92:  "IAB7_8",
		93:  "IAB7_9",
		94:  "IAB7_10",
		95:  "IAB7_11",
		96:  "IAB7_12",
		97:  "IAB7_13",
		98:  "IAB7_14",
		99:  "IAB7_15",
		100: "IAB7_16",
		101: "IAB7_17",
		102: "IAB7_18",
		103: "IAB7_19",
		104: "IAB7_20",
		105: "IAB7_21",
		106: "IAB7_22",
		107: "IAB7_23",
		108: "IAB7_24",
		109: "IAB7_25",
		110: "IAB7_26",
		111: "IAB7_27",
		112: "IAB7_28",
		113: "IAB7_29",
		114: "IAB7_30",
		115: "IAB7_31",
		116: "IAB7_32",
		117: "IAB7_33",
		118: "IAB7_34",
		119: "IAB7_35",
		120: "IAB7_36",
		121: "IAB7_37",
		122: "IAB7_38",
		123: "IAB7_39",
		124: "IAB7_40",
		125: "IAB7_41",
		126: "IAB7_42",
		127: "IAB7_43",
		128: "IAB7_44",
		129: "IAB7_45",
		130: "IAB8",
		131: "IAB8_1",
		132: "IAB8_2",
		133: "IAB8_3",
		134: "IAB8_4",
		135: "IAB8_5",
		136: "IAB8_6",
		137: "IAB8_7",
		138: "IAB8_8",
		139: "IAB8_9",
		140: "IAB8_10",
		141: "IAB8_11",
		142: "IAB8_12",
		143: "IAB8_13",
		144: "IAB8_14",
		145: "IAB8_15",
		146: "IAB8_16",
		147: "IAB8_17",
		148: "IAB8_18",
		149: "IAB9",
		150: "IAB9_1",
		151: "IAB9_2",
		152: "IAB9_3",
		153: "IAB9_4",
		154: "IAB9_5",
		155: "IAB9_6",
		156: "IAB9_7",
		157: "IAB9_8",
		158: "IAB9_9",
		159: "IAB9_10",
		160: "IAB9_11",
		161: "IAB9_12",
		162: "IAB9_13",
		163: "IAB9_14",
		164: "IAB9_15",
		165: "IAB9_16",
		166: "IAB9_17",
		167: "IAB9_18",
		168: "IAB9_19",
		169: "IAB9_20",
		170: "IAB9_21",
		171: "IAB9_22",
		172: "IAB9_23",
		173: "IAB9_24",
		174: "IAB9_25",
		175: "IAB9_26",
		176: "IAB9_27",
		177: "IAB9_28",
		178: "IAB9_29",
		179: "IAB9_30",
		180: "IAB9_31",
		181: "IAB10",
		182: "IAB10_1",
		183: "IAB10_2",
		184: "IAB10_3",
		185: "IAB10_4",
		186: "IAB10_5",
		187: "IAB10_6",
		188: "IAB10_7",
		189: "IAB10_8",
		190: "IAB10_9",
		191: "IAB11",
		192: "IAB11_1",
		193: "IAB11_2",
		194: "IAB11_3",
		195: "IAB11_4",
		196: "IAB11_5",
		197: "IAB12",
		198: "IAB12_1",
		199: "IAB12_2",
		200: "IAB12_3",
		201: "IAB13",
		202: "IAB13_1",
		203: "IAB13_2",
		204: "IAB13_3",
		205: "IAB13_4",
		206: "IAB13_5",
		207: "IAB13_6",
		208: "IAB13_7",
		209: "IAB13_8",
		210: "IAB13_9",
		211: "IAB13_10",
		212: "IAB13_11",
		213: "IAB13_12",
		214: "IAB14",
		215: "IAB14_1",
		216: "IAB14_2",
		217: "IAB14_3",
		218: "IAB14_4",
		219: "IAB14_5",
		220: "IAB14_6",
		221: "IAB14_7",
		222: "IAB14_8",
		223: "IAB15",
		224: "IAB15_1",
		225: "IAB15_2",
		226: "IAB15_3",
		227: "IAB15_4",
		228: "IAB15_5",
		229: "IAB15_6",
		230: "IAB15_7",
		231: "IAB15_8",
		232: "IAB15_9",
		233: "IAB15_10",
		234: "IAB16",
		235: "IAB16_1",
		236: "IAB16_2",
		237: "IAB16_3",
		238: "IAB16_4",
		239: "IAB16_5",
		240: "IAB16_6",
		241: "IAB16_7",
		242: "IAB17",
		243: "IAB17_1",
		244: "IAB17_2",
		245: "IAB17_3",
		246: "IAB17_4",
		247: "IAB17_5",
		248: "IAB17_6",
		249: "IAB17_7",
		250: "IAB17_8",
		251: "IAB17_9",
		252: "IAB17_10",
		253: "IAB17_11",
		254: "IAB17_12",
		255: "IAB17_13",
		256: "IAB17_14",
		257: "IAB17_15",
		258: "IAB17_16",
		259: "IAB17_17",
		260: "IAB17_18",
		261: "IAB17_19",
		262: "IAB17_20",
		263: "IAB17_21",
		264: "IAB17_22",
		265: "IAB17_23",
		266: "IAB17_24",
		267: "IAB17_25",
		268: "IAB17_26",
		269: "IAB17_27",
		270: "IAB17_28",
		271: "IAB17_29",
		272: "IAB17_30",
		273: "IAB17_31",
		274: "IAB17_32",
		275: "IAB17_33",
		276: "IAB17_34",
		277: "IAB17_35",
		278: "IAB17_36",
		279: "IAB17_37",
		280: "IAB17_38",
		281: "IAB17_39",
		282: "IAB17_40",
		283: "IAB17_41",
		284: "IAB17_42",
		285: "IAB17_43",
		286: "IAB17_44",
		287: "IAB18",
		288: "IAB18_1",
		289: "IAB18_2",
		290: "IAB18_3",
		291: "IAB18_4",
		292: "IAB18_5",
		293: "IAB18_6",
		294: "IAB19",
		295: "IAB19_1",
		296: "IAB19_2",
		297: "IAB19_3",
		298: "IAB19_4",
		299: "IAB19_5",
		300: "IAB19_6",
		301: "IAB19_7",
		302: "IAB19_8",
		303: "IAB19_9",
		304: "IAB19_10",
		305: "IAB19_11",
		306: "IAB19_12",
		307: "IAB19_13",
		308: "IAB19_14",
		309: "IAB19_15",
		310: "IAB19_16",
		311: "IAB19_17",
		312: "IAB19_18",
		313: "IAB19_19",
		314: "IAB19_20",
		315: "IAB19_21",
		316: "IAB19_22",
		317: "IAB19_23",
		318: "IAB19_24",
		319: "IAB19_25",
		320: "IAB19_26",
		321: "IAB19_27",
		322: "IAB19_28",
		323: "IAB19_29",
		324: "IAB19_30",
		325: "IAB19_31",
		326: "IAB19_32",
		327: "IAB19_33",
		328: "IAB19_34",
		329: "IAB19_35",
		330: "IAB19_36",
		331: "IAB20",
		332: "IAB20_1",
		333: "IAB20_2",
		334: "IAB20_3",
		335: "IAB20_4",
		336: "IAB20_5",
		337: "IAB20_6",
		338: "IAB20_7",
		339: "IAB20_8",
		340: "IAB20_9",
		341: "IAB20_10",
		342: "IAB20_11",
		343: "IAB20_12",
		344: "IAB20_13",
		345: "IAB20_14",
		346: "IAB20_15",
		347: "IAB20_16",
		348: "IAB20_17",
		349: "IAB20_18",
		350: "IAB20_19",
		351: "IAB20_20",
		352: "IAB20_21",
		353: "IAB20_22",
		354: "IAB20_23",
		355: "IAB20_24",
		356: "IAB20_25",
		357: "IAB20_26",
		358: "IAB20_27",
		359: "IAB21",
		360: "IAB21_1",
		361: "IAB21_2",
		362: "IAB21_3",
		363: "IAB22",
		364: "IAB22_1",
		365: "IAB22_2",
		366: "IAB22_3",
		367: "IAB22_4",
		368: "IAB23",
		369: "IAB23_1",
		370: "IAB23_2",
		371: "IAB23_3",
		372: "IAB23_4",
		373: "IAB23_5",
		374: "IAB23_6",
		375: "IAB23_7",
		376: "IAB23_8",
		377: "IAB23_9",
		378: "IAB23_10",
		379: "IAB24",
		380: "IAB25",
		381: "IAB25_1",
		382: "IAB25_2",
		383: "IAB25_3",
		384: "IAB25_4",
		385: "IAB25_5",
		386: "IAB25_6",
		387: "IAB25_7",
		388: "IAB26",
		389: "IAB26_1",
		390: "IAB26_2",
		391: "IAB26_3",
		392: "IAB26_4",
	}
	ContentCategory_value = map[string]int32{
		"UNDEFINED": 0,
		"IAB1":      1,
		"IAB1_1":    2,
		"IAB1_2":    3,
		"IAB1_3":    4,
		"IAB1_4":    5,
		"IAB1_5":    6,
		"IAB1_6":    7,
		"IAB1_7":    8,
		"IAB2":      9,
		"IAB2_1":    10,
		"IAB2_2":    11,
		"IAB2_3":    12,
		"IAB2_4":    13,
		"IAB2_5":    14,
		"IAB2_6":    15,
		"IAB2_7":    16,
		"IAB2_8":    17,
		"IAB2_9":    18,
		"IAB2_10":   19,
		"IAB2_11":   20,
		"IAB2_12":   21,
		"IAB2_13":   22,
		"IAB2_14":   23,
		"IAB2_15":   24,
		"IAB2_16":   25,
		"IAB2_17":   26,
		"IAB2_18":   27,
		"IAB2_19":   28,
		"IAB2_20":   29,
		"IAB2_21":   30,
		"IAB2_22":   31,
		"IAB2_23":   32,
		"IAB3":      33,
		"IAB3_1":    34,
		"IAB3_2":    35,
		"IAB3_3":    36,
		"IAB3_4":    37,
		"IAB3_5":    38,
		"IAB3_6":    39,
		"IAB3_7":    40,
		"IAB3_8":    41,
		"IAB3_9":    42,
		"IAB3_10":   43,
		"IAB3_11":   44,
		"IAB3_12":   45,
		"IAB4":      46,
		"IAB4_1":    47,
		"IAB4_2":    48,
		"IAB4_3":    49,
		"IAB4_4":    50,
		"IAB4_5":    51,
		"IAB4_6":    52,
		"IAB4_7":    53,
		"IAB4_8":    54,
		"IAB4_9":    55,
		"IAB4_10":   56,
		"IAB4_11":   57,
		"IAB5":      58,
		"IAB5_1":    59,
		"IAB5_2":    60,
		"IAB5_3":    61,
		"IAB5_4":    62,
		"IAB5_5":    63,
		"IAB5_6":    64,
		"IAB5_7":    65,
		"IAB5_8":    66,
		"IAB5_9":    67,
		"IAB5_10":   68,
		"IAB5_11":   69,
		"IAB5_12":   70,
		"IAB5_13":   71,
		"IAB5_14":   72,
		"IAB5_15":   73,
		"IAB6":      74,
		"IAB6_1":    75,
		"IAB6_2":    76,
		"IAB6_3":    77,
		"IAB6_4":    78,
		"IAB6_5":    79,
		"IAB6_6":    80,
		"IAB6_7":    81,
		"IAB6_8":    82,
		"IAB6_9":    83,
		"IAB7":      84,
		"IAB7_1":    85,
		"IAB7_2":    86,
		"IAB7_3":    87,
		"IAB7_4":    88,
		"IAB7_5":    89,
		"IAB7_6":    90,
		"IAB7_7":    91,
		"IAB7_8":    92,
		"IAB7_9":    93,
		"IAB7_10":   94,
		"IAB7_11":   95,
		"IAB7_12":   96,
		"IAB7_13":   97,
		"IAB7_14":   98,
		"IAB7_15":   99,
		"IAB7_16":   100,
		"IAB7_17":   101,
		"IAB7_18":   102,
		"IAB7_19":   103,
		"IAB7_20":   104,
		"IAB7_21":   105,
		"IAB7_22":   106,
		"IAB7_23":   107,
		"IAB7_24":   108,
		"IAB7_25":   109,
		"IAB7_26":   110,
		"IAB7_27":   111,
		"IAB7_28":   112,
		"IAB7_29":   113,
		"IAB7_30":   114,
		"IAB7_31":   115,
		"IAB7_32":   116,
		"IAB7_33":   117,
		"IAB7_34":   118,
		"IAB7_35":   119,
		"IAB7_36":   120,
		"IAB7_37":   121,
		"IAB7_38":   122,
		"IAB7_39":   123,
		"IAB7_40":   124,
		"IAB7_41":   125,
		"IAB7_42":   126,
		"IAB7_43":   127,
		"IAB7_44":   128,
		"IAB7_45":   129,
		"IAB8":      130,
		"IAB8_1":    131,
		"IAB8_2":    132,
		"IAB8_3":    133,
		"IAB8_4":    134,
		"IAB8_5":    135,
		"IAB8_6":    136,
		"IAB8_7":    137,
		"IAB8_8":    138,
		"IAB8_9":    139,
		"IAB8_10":   140,
		"IAB8_11":   141,
		"IAB8_12":   142,
		"IAB8_13":   143,
		"IAB8_14":   144,
		"IAB8_15":   145,
		"IAB8_16":   146,
		"IAB8_17":   147,
		"IAB8_18":   148,
		"IAB9":      149,
		"IAB9_1":    150,
		"IAB9_2":    151,
		"IAB9_3":    152,
		"IAB9_4":    153,
		"IAB9_5":    154,
		"IAB9_6":    155,
		"IAB9_7":    156,
		"IAB9_8":    157,
		"IAB9_9":    158,
		"IAB9_10":   159,
		"IAB9_11":   160,
		"IAB9_12":   161,
		"IAB9_13":   162,
		"IAB9_14":   163,
		"IAB9_15":   164,
		"IAB9_16":   165,
		"IAB9_17":   166,
		"IAB9_18":   167,
		"IAB9_19":   168,
		"IAB9_20":   169,
		"IAB9_21":   170,
		"IAB9_22":   171,
		"IAB9_23":   172,
		"IAB9_24":   173,
		"IAB9_25":   174,
		"IAB9_26":   175,
		"IAB9_27":   176,
		"IAB9_28":   177,
		"IAB9_29":   178,
		"IAB9_30":   179,
		"IAB9_31":   180,
		"IAB10":     181,
		"IAB10_1":   182,
		"IAB10_2":   183,
		"IAB10_3":   184,
		"IAB10_4":   185,
		"IAB10_5":   186,
		"IAB10_6":   187,
		"IAB10_7":   188,
		"IAB10_8":   189,
		"IAB10_9":   190,
		"IAB11":     191,
		"IAB11_1":   192,
		"IAB11_2":   193,
		"IAB11_3":   194,
		"IAB11_4":   195,
		"IAB11_5":   196,
		"IAB12":     197,
		"IAB12_1":   198,
		"IAB12_2":   199,
		"IAB12_3":   200,
		"IAB13":     201,
		"IAB13_1":   202,
		"IAB13_2":   203,
		"IAB13_3":   204,
		"IAB13_4":   205,
		"IAB13_5":   206,
		"IAB13_6":   207,
		"IAB13_7":   208,
		"IAB13_8":   209,
		"IAB13_9":   210,
		"IAB13_10":  211,
		"IAB13_11":  212,
		"IAB13_12":  213,
		"IAB14":     214,
		"IAB14_1":   215,
		"IAB14_2":   216,
		"IAB14_3":   217,
		"IAB14_4":   218,
		"IAB14_5":   219,
		"IAB14_6":   220,
		"IAB14_7":   221,
		"IAB14_8":   222,
		"IAB15":     223,
		"IAB15_1":   224,
		"IAB15_2":   225,
		"IAB15_3":   226,
		"IAB15_4":   227,
		"IAB15_5":   228,
		"IAB15_6":   229,
		"IAB15_7":   230,
		"IAB15_8":   231,
		"IAB15_9":   232,
		"IAB15_10":  233,
		"IAB16":     234,
		"IAB16_1":   235,
		"IAB16_2":   236,
		"IAB16_3":   237,
		"IAB16_4":   238,
		"IAB16_5":   239,
		"IAB16_6":   240,
		"IAB16_7":   241,
		"IAB17":     242,
		"IAB17_1":   243,
		"IAB17_2":   244,
		"IAB17_3":   245,
		"IAB17_4":   246,
		"IAB17_5":   247,
		"IAB17_6":   248,
		"IAB17_7":   249,
		"IAB17_8":   250,
		"IAB17_9":   251,
		"IAB17_10":  252,
		"IAB17_11":  253,
		"IAB17_12":  254,
		"IAB17_13":  255,
		"IAB17_14":  256,
		"IAB17_15":  257,
		"IAB17_16":  258,
		"IAB17_17":  259,
		"IAB17_18":  260,
		"IAB17_19":  261,
		"IAB17_20":  262,
		"IAB17_21":  263,
		"IAB17_22":  264,
		"IAB17_23":  265,
		"IAB17_24":  266,
		"IAB17_25":  267,
		"IAB17_26":  268,
		"IAB17_27":  269,
		"IAB17_28":  270,
		"IAB17_29":  271,
		"IAB17_30":  272,
		"IAB17_31":  273,
		"IAB17_32":  274,
		"IAB17_33":  275,
		"IAB17_34":  276,
		"IAB17_35":  277,
		"IAB17_36":  278,
		"IAB17_37":  279,
		"IAB17_38":  280,
		"IAB17_39":  281,
		"IAB17_40":  282,
		"IAB17_41":  283,
		"IAB17_42":  284,
		"IAB17_43":  285,
		"IAB17_44":  286,
		"IAB18":     287,
		"IAB18_1":   288,
		"IAB18_2":   289,
		"IAB18_3":   290,
		"IAB18_4":   291,
		"IAB18_5":   292,
		"IAB18_6":   293,
		"IAB19":     294,
		"IAB19_1":   295,
		"IAB19_2":   296,
		"IAB19_3":   297,
		"IAB19_4":   298,
		"IAB19_5":   299,
		"IAB19_6":   300,
		"IAB19_7":   301,
		"IAB19_8":   302,
		"IAB19_9":   303,
		"IAB19_10":  304,
		"IAB19_11":  305,
		"IAB19_12":  306,
		"IAB19_13":  307,
		"IAB19_14":  308,
		"IAB19_15":  309,
		"IAB19_16":  310,
		"IAB19_17":  311,
		"IAB19_18":  312,
		"IAB19_19":  313,
		"IAB19_20":  314,
		"IAB19_21":  315,
		"IAB19_22":  316,
		"IAB19_23":  317,
		"IAB19_24":  318,
		"IAB19_25":  319,
		"IAB19_26":  320,
		"IAB19_27":  321,
		"IAB19_28":  322,
		"IAB19_29":  323,
		"IAB19_30":  324,
		"IAB19_31":  325,
		"IAB19_32":  326,
		"IAB19_33":  327,
		"IAB19_34":  328,
		"IAB19_35":  329,
		"IAB19_36":  330,
		"IAB20":     331,
		"IAB20_1":   332,
		"IAB20_2":   333,
		"IAB20_3":   334,
		"IAB20_4":   335,
		"IAB20_5":   336,
		"IAB20_6":   337,
		"IAB20_7":   338,
		"IAB20_8":   339,
		"IAB20_9":   340,
		"IAB20_10":  341,
		"IAB20_11":  342,
		"IAB20_12":  343,
		"IAB20_13":  344,
		"IAB20_14":  345,
		"IAB20_15":  346,
		"IAB20_16":  347,
		"IAB20_17":  348,
		"IAB20_18":  349,
		"IAB20_19":  350,
		"IAB20_20":  351,
		"IAB20_21":  352,
		"IAB20_22":  353,
		"IAB20_23":  354,
		"IAB20_24":  355,
		"IAB20_25":  356,
		"IAB20_26":  357,
		"IAB20_27":  358,
		"IAB21":     359,
		"IAB21_1":   360,
		"IAB21_2":   361,
		"IAB21_3":   362,
		"IAB22":     363,
		"IAB22_1":   364,
		"IAB22_2":   365,
		"IAB22_3":   366,
		"IAB22_4":   367,
		"IAB23":     368,
		"IAB23_1":   369,
		"IAB23_2":   370,
		"IAB23_3":   371,
		"IAB23_4":   372,
		"IAB23_5":   373,
		"IAB23_6":   374,
		"IAB23_7":   375,
		"IAB23_8":   376,
		"IAB23_9":   377,
		"IAB23_10":  378,
		"IAB24":     379,
		"IAB25":     380,
		"IAB25_1":   381,
		"IAB25_2":   382,
		"IAB25_3":   383,
		"IAB25_4":   384,
		"IAB25_5":   385,
		"IAB25_6":   386,
		"IAB25_7":   387,
		"IAB26":     388,
		"IAB26_1":   389,
		"IAB26_2":   390,
		"IAB26_3":   391,
		"IAB26_4":   392,
	}
)

func (x ContentCategory) Enum() *ContentCategory {
	p := new(ContentCategory)
	*p = x
	return p
}

func (x ContentCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[0].Descriptor()
}

func (ContentCategory) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[0]
}

func (x ContentCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContentCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContentCategory(num)
	return nil
}

// Deprecated: Use ContentCategory.Descriptor instead.
func (ContentCategory) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0}
}

type AuctionType int32

const (
	AuctionType_FIRST_PRICE  AuctionType = 1
	AuctionType_SECOND_PRICE AuctionType = 2
	AuctionType_FIXED_PRICE  AuctionType = 3
)

// Enum value maps for AuctionType.
var (
	AuctionType_name = map[int32]string{
		1: "FIRST_PRICE",
		2: "SECOND_PRICE",
		3: "FIXED_PRICE",
	}
	AuctionType_value = map[string]int32{
		"FIRST_PRICE":  1,
		"SECOND_PRICE": 2,
		"FIXED_PRICE":  3,
	}
)

func (x AuctionType) Enum() *AuctionType {
	p := new(AuctionType)
	*p = x
	return p
}

func (x AuctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[1].Descriptor()
}

func (AuctionType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[1]
}

func (x AuctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AuctionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AuctionType(num)
	return nil
}

// Deprecated: Use AuctionType.Descriptor instead.
func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{1}
}

// OpenRTB 2.0: types of ads that can be accepted by the exchange unless
// restricted by publisher site settings.
type BannerAdType int32

const (
	// "Usually mobile".
	BannerAdType_XHTML_TEXT_AD BannerAdType = 1
	// "Usually mobile".
	BannerAdType_XHTML_BANNER_AD BannerAdType = 2
	// Javascript must be valid XHTML (ie, script tags included).
	BannerAdType_JAVASCRIPT_AD BannerAdType = 3
	// Iframe.
	BannerAdType_IFRAME BannerAdType = 4
)

// Enum value maps for BannerAdType.
var (
	BannerAdType_name = map[int32]string{
		1: "XHTML_TEXT_AD",
		2: "XHTML_BANNER_AD",
		3: "JAVASCRIPT_AD",
		4: "IFRAME",
	}
	BannerAdType_value = map[string]int32{
		"XHTML_TEXT_AD":   1,
		"XHTML_BANNER_AD": 2,
		"JAVASCRIPT_AD":   3,
		"IFRAME":          4,
	}
)

func (x BannerAdType) Enum() *BannerAdType {
	p := new(BannerAdType)
	*p = x
	return p
}

func (x BannerAdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BannerAdType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[2].Descriptor()
}

func (BannerAdType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[2]
}

func (x BannerAdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BannerAdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BannerAdType(num)
	return nil
}

// Deprecated: Use BannerAdType.Descriptor instead.
func (BannerAdType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{2}
}

// OpenRTB 2.0: The following table specifies a standard list of creative
// attributes that can describe an ad being served or serve as restrictions
// of thereof.
type CreativeAttribute int32

const (
	CreativeAttribute_AUDIO_AUTO_PLAY                CreativeAttribute = 1
	CreativeAttribute_AUDIO_USER_INITIATED           CreativeAttribute = 2
	CreativeAttribute_EXPANDABLE_AUTOMATIC           CreativeAttribute = 3
	CreativeAttribute_EXPANDABLE_CLICK_INITIATED     CreativeAttribute = 4
	CreativeAttribute_EXPANDABLE_ROLLOVER_INITIATED  CreativeAttribute = 5
	CreativeAttribute_VIDEO_IN_BANNER_AUTO_PLAY      CreativeAttribute = 6
	CreativeAttribute_VIDEO_IN_BANNER_USER_INITIATED CreativeAttribute = 7
	CreativeAttribute_POP                            CreativeAttribute = 8 // Pop (e.g., Over, Under, or upon Exit).
	CreativeAttribute_PROVOCATIVE_OR_SUGGESTIVE      CreativeAttribute = 9
	// Defined as "Shaky, Flashing, Flickering, Extreme Animation, Smileys".
	CreativeAttribute_ANNOYING                      CreativeAttribute = 10
	CreativeAttribute_SURVEYS                       CreativeAttribute = 11
	CreativeAttribute_TEXT_ONLY                     CreativeAttribute = 12
	CreativeAttribute_USER_INTERACTIVE              CreativeAttribute = 13 // Eg, embedded games.
	CreativeAttribute_WINDOWS_DIALOG_OR_ALERT_STYLE CreativeAttribute = 14
	CreativeAttribute_HAS_AUDIO_ON_OFF_BUTTON       CreativeAttribute = 15
	CreativeAttribute_AD_CAN_BE_SKIPPED             CreativeAttribute = 16
	CreativeAttribute_FLASH                         CreativeAttribute = 17
)

// Enum value maps for CreativeAttribute.
var (
	CreativeAttribute_name = map[int32]string{
		1:  "AUDIO_AUTO_PLAY",
		2:  "AUDIO_USER_INITIATED",
		3:  "EXPANDABLE_AUTOMATIC",
		4:  "EXPANDABLE_CLICK_INITIATED",
		5:  "EXPANDABLE_ROLLOVER_INITIATED",
		6:  "VIDEO_IN_BANNER_AUTO_PLAY",
		7:  "VIDEO_IN_BANNER_USER_INITIATED",
		8:  "POP",
		9:  "PROVOCATIVE_OR_SUGGESTIVE",
		10: "ANNOYING",
		11: "SURVEYS",
		12: "TEXT_ONLY",
		13: "USER_INTERACTIVE",
		14: "WINDOWS_DIALOG_OR_ALERT_STYLE",
		15: "HAS_AUDIO_ON_OFF_BUTTON",
		16: "AD_CAN_BE_SKIPPED",
		17: "FLASH",
	}
	CreativeAttribute_value = map[string]int32{
		"AUDIO_AUTO_PLAY":                1,
		"AUDIO_USER_INITIATED":           2,
		"EXPANDABLE_AUTOMATIC":           3,
		"EXPANDABLE_CLICK_INITIATED":     4,
		"EXPANDABLE_ROLLOVER_INITIATED":  5,
		"VIDEO_IN_BANNER_AUTO_PLAY":      6,
		"VIDEO_IN_BANNER_USER_INITIATED": 7,
		"POP":                            8,
		"PROVOCATIVE_OR_SUGGESTIVE":      9,
		"ANNOYING":                       10,
		"SURVEYS":                        11,
		"TEXT_ONLY":                      12,
		"USER_INTERACTIVE":               13,
		"WINDOWS_DIALOG_OR_ALERT_STYLE":  14,
		"HAS_AUDIO_ON_OFF_BUTTON":        15,
		"AD_CAN_BE_SKIPPED":              16,
		"FLASH":                          17,
	}
)

func (x CreativeAttribute) Enum() *CreativeAttribute {
	p := new(CreativeAttribute)
	*p = x
	return p
}

func (x CreativeAttribute) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreativeAttribute) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[3].Descriptor()
}

func (CreativeAttribute) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[3]
}

func (x CreativeAttribute) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CreativeAttribute) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CreativeAttribute(num)
	return nil
}

// Deprecated: Use CreativeAttribute.Descriptor instead.
func (CreativeAttribute) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3}
}

// OpenRTB 2.0: The following table is a list of API frameworks supported
// by the publisher.  Note that MRAID-1 is a subset of MRAID-2.
// In OpenRTB 2.1 and prior, value "3" was "MRAID".  However, not all
// MRAID capable APIs understand MRAID-2 features and as such the only
// safe interpretation of value "3" is MRAID-1. In OpenRTB 2.2, this was
// made explicit and MRAID-2 has been added as value "5".
type APIFramework int32

const (
	APIFramework_VPAID_1 APIFramework = 1
	APIFramework_VPAID_2 APIFramework = 2
	APIFramework_MRAID_1 APIFramework = 3
	APIFramework_ORMMA   APIFramework = 4
	APIFramework_MRAID_2 APIFramework = 5
	APIFramework_MRAID_3 APIFramework = 6
	APIFramework_OMID_1  APIFramework = 7
)

// Enum value maps for APIFramework.
var (
	APIFramework_name = map[int32]string{
		1: "VPAID_1",
		2: "VPAID_2",
		3: "MRAID_1",
		4: "ORMMA",
		5: "MRAID_2",
		6: "MRAID_3",
		7: "OMID_1",
	}
	APIFramework_value = map[string]int32{
		"VPAID_1": 1,
		"VPAID_2": 2,
		"MRAID_1": 3,
		"ORMMA":   4,
		"MRAID_2": 5,
		"MRAID_3": 6,
		"OMID_1":  7,
	}
)

func (x APIFramework) Enum() *APIFramework {
	p := new(APIFramework)
	*p = x
	return p
}

func (x APIFramework) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (APIFramework) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[4].Descriptor()
}

func (APIFramework) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[4]
}

func (x APIFramework) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *APIFramework) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = APIFramework(num)
	return nil
}

// Deprecated: Use APIFramework.Descriptor instead.
func (APIFramework) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{4}
}

// OpenRTB 2.0: The following table specifies the position of the ad as a
// relative measure of visibility or prominence.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net. Values "3" - "6" apply to apps
// per the mobile addendum to QAG version 1.5.
type AdPosition int32

const (
	AdPosition_UNKNOWN        AdPosition = 0
	AdPosition_ABOVE_THE_FOLD AdPosition = 1
	// May or may not be immediately visible depending on screen size and
	// resolution.
	// @deprecated
	AdPosition_DEPRECATED_LIKELY_BELOW_THE_FOLD AdPosition = 2
	AdPosition_BELOW_THE_FOLD                   AdPosition = 3
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_HEADER AdPosition = 4
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_FOOTER AdPosition = 5
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_SIDEBAR AdPosition = 6
	// [OpenRTB->AdX: SlotVisibility.ABOVE_THE_FOLD]
	AdPosition_AD_POSITION_FULLSCREEN AdPosition = 7
)

// Enum value maps for AdPosition.
var (
	AdPosition_name = map[int32]string{
		0: "UNKNOWN",
		1: "ABOVE_THE_FOLD",
		2: "DEPRECATED_LIKELY_BELOW_THE_FOLD",
		3: "BELOW_THE_FOLD",
		4: "HEADER",
		5: "FOOTER",
		6: "SIDEBAR",
		7: "AD_POSITION_FULLSCREEN",
	}
	AdPosition_value = map[string]int32{
		"UNKNOWN":                          0,
		"ABOVE_THE_FOLD":                   1,
		"DEPRECATED_LIKELY_BELOW_THE_FOLD": 2,
		"BELOW_THE_FOLD":                   3,
		"HEADER":                           4,
		"FOOTER":                           5,
		"SIDEBAR":                          6,
		"AD_POSITION_FULLSCREEN":           7,
	}
)

func (x AdPosition) Enum() *AdPosition {
	p := new(AdPosition)
	*p = x
	return p
}

func (x AdPosition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdPosition) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[5].Descriptor()
}

func (AdPosition) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[5]
}

func (x AdPosition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AdPosition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AdPosition(num)
	return nil
}

// Deprecated: Use AdPosition.Descriptor instead.
func (AdPosition) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{5}
}

// OpenRTB 2.0: The following table indicates the options for video
// linearity. "In-stream" or "linear" video refers to pre-roll, post-roll,
// or mid-roll video ads where the user is forced to watch ad in order to
// see the video content. "Overlay" or "non-linear" refer to ads that are
// shown on top of the video content.
//
// This field is optional. The following is the interpretation of the
// bidder based upon presence or absence of the field in the bid request:
// - If no value is set, any ad (linear or not) can be present
//   in the response.
// - If a value is set, only ads of the corresponding type can be present
//   in the response.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type VideoLinearity int32

const (
	VideoLinearity_LINEAR     VideoLinearity = 1 // Linear/In-stream
	VideoLinearity_NON_LINEAR VideoLinearity = 2 // Non-linear/Overlay
)

// Enum value maps for VideoLinearity.
var (
	VideoLinearity_name = map[int32]string{
		1: "LINEAR",
		2: "NON_LINEAR",
	}
	VideoLinearity_value = map[string]int32{
		"LINEAR":     1,
		"NON_LINEAR": 2,
	}
)

func (x VideoLinearity) Enum() *VideoLinearity {
	p := new(VideoLinearity)
	*p = x
	return p
}

func (x VideoLinearity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoLinearity) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[6].Descriptor()
}

func (VideoLinearity) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[6]
}

func (x VideoLinearity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VideoLinearity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VideoLinearity(num)
	return nil
}

// Deprecated: Use VideoLinearity.Descriptor instead.
func (VideoLinearity) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{6}
}

// OpenRTB 2.0: The following table lists the options for the various
// bid response protocols that could be supported by an exchange.
type Protocol int32

const (
	Protocol_VAST_1_0          Protocol = 1
	Protocol_VAST_2_0          Protocol = 2
	Protocol_VAST_3_0          Protocol = 3
	Protocol_VAST_1_0_WRAPPER  Protocol = 4
	Protocol_VAST_2_0_WRAPPER  Protocol = 5
	Protocol_VAST_3_0_WRAPPER  Protocol = 6
	Protocol_VAST_4_0          Protocol = 7
	Protocol_VAST_4_0_WRAPPER  Protocol = 8
	Protocol_DAAST_1_0         Protocol = 9
	Protocol_DAAST_1_0_WRAPPER Protocol = 10
)

// Enum value maps for Protocol.
var (
	Protocol_name = map[int32]string{
		1:  "VAST_1_0",
		2:  "VAST_2_0",
		3:  "VAST_3_0",
		4:  "VAST_1_0_WRAPPER",
		5:  "VAST_2_0_WRAPPER",
		6:  "VAST_3_0_WRAPPER",
		7:  "VAST_4_0",
		8:  "VAST_4_0_WRAPPER",
		9:  "DAAST_1_0",
		10: "DAAST_1_0_WRAPPER",
	}
	Protocol_value = map[string]int32{
		"VAST_1_0":          1,
		"VAST_2_0":          2,
		"VAST_3_0":          3,
		"VAST_1_0_WRAPPER":  4,
		"VAST_2_0_WRAPPER":  5,
		"VAST_3_0_WRAPPER":  6,
		"VAST_4_0":          7,
		"VAST_4_0_WRAPPER":  8,
		"DAAST_1_0":         9,
		"DAAST_1_0_WRAPPER": 10,
	}
)

func (x Protocol) Enum() *Protocol {
	p := new(Protocol)
	*p = x
	return p
}

func (x Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[7].Descriptor()
}

func (Protocol) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[7]
}

func (x Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Protocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Protocol(num)
	return nil
}

// Deprecated: Use Protocol.Descriptor instead.
func (Protocol) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{7}
}

// OpenRTB 2.0: The following table lists the various playback methods.
type PlaybackMethod int32

const (
	// Initiates on Page Load with Sound On.
	PlaybackMethod_AUTO_PLAY_SOUND_ON PlaybackMethod = 1
	// Initiates on Page Load with Sound Off by Default.
	PlaybackMethod_AUTO_PLAY_SOUND_OFF PlaybackMethod = 2
	// Initiates on Click with Sound On.
	PlaybackMethod_CLICK_TO_PLAY PlaybackMethod = 3
	// Initiates on Mouse-Over with Sound On.
	PlaybackMethod_MOUSE_OVER PlaybackMethod = 4
	// Initiates on Entering Viewport with Sound On.
	PlaybackMethod_ENTER_SOUND_ON PlaybackMethod = 5
	// Initiates on Entering Viewport with Sound Off by Default.
	PlaybackMethod_ENTER_SOUND_OFF PlaybackMethod = 6
)

// Enum value maps for PlaybackMethod.
var (
	PlaybackMethod_name = map[int32]string{
		1: "AUTO_PLAY_SOUND_ON",
		2: "AUTO_PLAY_SOUND_OFF",
		3: "CLICK_TO_PLAY",
		4: "MOUSE_OVER",
		5: "ENTER_SOUND_ON",
		6: "ENTER_SOUND_OFF",
	}
	PlaybackMethod_value = map[string]int32{
		"AUTO_PLAY_SOUND_ON":  1,
		"AUTO_PLAY_SOUND_OFF": 2,
		"CLICK_TO_PLAY":       3,
		"MOUSE_OVER":          4,
		"ENTER_SOUND_ON":      5,
		"ENTER_SOUND_OFF":     6,
	}
)

func (x PlaybackMethod) Enum() *PlaybackMethod {
	p := new(PlaybackMethod)
	*p = x
	return p
}

func (x PlaybackMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaybackMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[8].Descriptor()
}

func (PlaybackMethod) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[8]
}

func (x PlaybackMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlaybackMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlaybackMethod(num)
	return nil
}

// Deprecated: Use PlaybackMethod.Descriptor instead.
func (PlaybackMethod) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{8}
}

// OpenRTB 2.0: The following table lists the various options for the
// audio/video start delay.  If the start delay value is greater than 0,
// then the position is mid-roll and the value indicates the start delay.
type StartDelay int32

const (
	StartDelay_PRE_ROLL          StartDelay = 0
	StartDelay_GENERIC_MID_ROLL  StartDelay = -1
	StartDelay_GENERIC_POST_ROLL StartDelay = -2
)

// Enum value maps for StartDelay.
var (
	StartDelay_name = map[int32]string{
		0:  "PRE_ROLL",
		-1: "GENERIC_MID_ROLL",
		-2: "GENERIC_POST_ROLL",
	}
	StartDelay_value = map[string]int32{
		"PRE_ROLL":          0,
		"GENERIC_MID_ROLL":  -1,
		"GENERIC_POST_ROLL": -2,
	}
)

func (x StartDelay) Enum() *StartDelay {
	p := new(StartDelay)
	*p = x
	return p
}

func (x StartDelay) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartDelay) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[9].Descriptor()
}

func (StartDelay) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[9]
}

func (x StartDelay) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StartDelay) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StartDelay(num)
	return nil
}

// Deprecated: Use StartDelay.Descriptor instead.
func (StartDelay) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{9}
}

// OpenRTB 2.5: The following table lists the various types of video placements
// derived largely from the IAB Digital Video Guidelines.
type VideoPlacementType int32

const (
	// The video placement is not defined.
	// Default value.
	VideoPlacementType_UNDEFINED_VIDEO_PLACEMENT VideoPlacementType = 0
	// Played before, during or after the streaming video content
	// that the consumer has requested.
	// E.G.: Pre-roll, Mid-roll, Post-roll.
	VideoPlacementType_IN_STREAM_PLACEMENT VideoPlacementType = 1
	// Exists within a web banner that leverages the banner space
	// to deliver a video experience as opposed to another static
	// or rich media format.
	// The format relies on the existence of display ad inventory
	// on the page for its delivery.
	VideoPlacementType_IN_BANNER_PLACEMENT VideoPlacementType = 2
	// Loads and plays dynamically between paragraphs of editorial content;
	// existing as a standalone branded message.
	VideoPlacementType_IN_ARTICLE_PLACEMENT VideoPlacementType = 3
	// In-Feed - Found in content, social, or product feeds.
	VideoPlacementType_IN_FEED_PLACEMENT VideoPlacementType = 4
	// Interstitial/Slider/Floating.
	// Covers the entire or a portion of screen area,
	// but is always on screen while displayed
	// (i.e. cannot be scrolled out of view).
	// Note that a full-screen interstitial (e.g., in mobile)
	// can be distinguished from a floating/slider unit by the imp.instl field.
	VideoPlacementType_FLOATING_PLACEMENT VideoPlacementType = 5
)

// Enum value maps for VideoPlacementType.
var (
	VideoPlacementType_name = map[int32]string{
		0: "UNDEFINED_VIDEO_PLACEMENT",
		1: "IN_STREAM_PLACEMENT",
		2: "IN_BANNER_PLACEMENT",
		3: "IN_ARTICLE_PLACEMENT",
		4: "IN_FEED_PLACEMENT",
		5: "FLOATING_PLACEMENT",
	}
	VideoPlacementType_value = map[string]int32{
		"UNDEFINED_VIDEO_PLACEMENT": 0,
		"IN_STREAM_PLACEMENT":       1,
		"IN_BANNER_PLACEMENT":       2,
		"IN_ARTICLE_PLACEMENT":      3,
		"IN_FEED_PLACEMENT":         4,
		"FLOATING_PLACEMENT":        5,
	}
)

func (x VideoPlacementType) Enum() *VideoPlacementType {
	p := new(VideoPlacementType)
	*p = x
	return p
}

func (x VideoPlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoPlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[10].Descriptor()
}

func (VideoPlacementType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[10]
}

func (x VideoPlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VideoPlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VideoPlacementType(num)
	return nil
}

// Deprecated: Use VideoPlacementType.Descriptor instead.
func (VideoPlacementType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{10}
}

// OpenRTB 2.5: The various modes for when playback terminates.
type PlaybackCessationMode int32

const (
	// On Video Completion or when Terminated by User
	PlaybackCessationMode_COMPLETION_OR_USER PlaybackCessationMode = 1
	// On Leaving Viewport or when Terminated by User
	PlaybackCessationMode_LEAVING_OR_USER PlaybackCessationMode = 2
	// On Leaving Viewport Continues as a Floating/Slider Unit until
	// Video Completion or when Terminated by User
	PlaybackCessationMode_LEAVING_CONTINUES_OR_USER PlaybackCessationMode = 3
)

// Enum value maps for PlaybackCessationMode.
var (
	PlaybackCessationMode_name = map[int32]string{
		1: "COMPLETION_OR_USER",
		2: "LEAVING_OR_USER",
		3: "LEAVING_CONTINUES_OR_USER",
	}
	PlaybackCessationMode_value = map[string]int32{
		"COMPLETION_OR_USER":        1,
		"LEAVING_OR_USER":           2,
		"LEAVING_CONTINUES_OR_USER": 3,
	}
)

func (x PlaybackCessationMode) Enum() *PlaybackCessationMode {
	p := new(PlaybackCessationMode)
	*p = x
	return p
}

func (x PlaybackCessationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaybackCessationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[11].Descriptor()
}

func (PlaybackCessationMode) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[11]
}

func (x PlaybackCessationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlaybackCessationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlaybackCessationMode(num)
	return nil
}

// Deprecated: Use PlaybackCessationMode.Descriptor instead.
func (PlaybackCessationMode) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{11}
}

// OpenRTB 2.0: The following table lists the various options for the
// type of device connectivity.
type ConnectionType int32

const (
	ConnectionType_CONNECTION_UNKNOWN ConnectionType = 0
	ConnectionType_ETHERNET           ConnectionType = 1
	ConnectionType_WIFI               ConnectionType = 2
	ConnectionType_CELL_UNKNOWN       ConnectionType = 3
	ConnectionType_CELL_2G            ConnectionType = 4
	ConnectionType_CELL_3G            ConnectionType = 5
	ConnectionType_CELL_4G            ConnectionType = 6
)

// Enum value maps for ConnectionType.
var (
	ConnectionType_name = map[int32]string{
		0: "CONNECTION_UNKNOWN",
		1: "ETHERNET",
		2: "WIFI",
		3: "CELL_UNKNOWN",
		4: "CELL_2G",
		5: "CELL_3G",
		6: "CELL_4G",
	}
	ConnectionType_value = map[string]int32{
		"CONNECTION_UNKNOWN": 0,
		"ETHERNET":           1,
		"WIFI":               2,
		"CELL_UNKNOWN":       3,
		"CELL_2G":            4,
		"CELL_3G":            5,
		"CELL_4G":            6,
	}
)

func (x ConnectionType) Enum() *ConnectionType {
	p := new(ConnectionType)
	*p = x
	return p
}

func (x ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[12].Descriptor()
}

func (ConnectionType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[12]
}

func (x ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConnectionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConnectionType(num)
	return nil
}

// Deprecated: Use ConnectionType.Descriptor instead.
func (ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{12}
}

// OpenRTB 2.0: The following table lists the directions in which an
// expandable ad may expand, given the positioning of the ad unit on the
// page and constraints imposed by the content.
type ExpandableDirection int32

const (
	ExpandableDirection_LEFT                  ExpandableDirection = 1
	ExpandableDirection_RIGHT                 ExpandableDirection = 2
	ExpandableDirection_UP                    ExpandableDirection = 3
	ExpandableDirection_DOWN                  ExpandableDirection = 4
	ExpandableDirection_EXPANDABLE_FULLSCREEN ExpandableDirection = 5
)

// Enum value maps for ExpandableDirection.
var (
	ExpandableDirection_name = map[int32]string{
		1: "LEFT",
		2: "RIGHT",
		3: "UP",
		4: "DOWN",
		5: "EXPANDABLE_FULLSCREEN",
	}
	ExpandableDirection_value = map[string]int32{
		"LEFT":                  1,
		"RIGHT":                 2,
		"UP":                    3,
		"DOWN":                  4,
		"EXPANDABLE_FULLSCREEN": 5,
	}
)

func (x ExpandableDirection) Enum() *ExpandableDirection {
	p := new(ExpandableDirection)
	*p = x
	return p
}

func (x ExpandableDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpandableDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[13].Descriptor()
}

func (ExpandableDirection) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[13]
}

func (x ExpandableDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExpandableDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExpandableDirection(num)
	return nil
}

// Deprecated: Use ExpandableDirection.Descriptor instead.
func (ExpandableDirection) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{13}
}

// OpenRTB 2.0: The following table lists the various options for the
// delivery of video content.
type ContentDeliveryMethod int32

const (
	ContentDeliveryMethod_STREAMING   ContentDeliveryMethod = 1
	ContentDeliveryMethod_PROGRESSIVE ContentDeliveryMethod = 2
)

// Enum value maps for ContentDeliveryMethod.
var (
	ContentDeliveryMethod_name = map[int32]string{
		1: "STREAMING",
		2: "PROGRESSIVE",
	}
	ContentDeliveryMethod_value = map[string]int32{
		"STREAMING":   1,
		"PROGRESSIVE": 2,
	}
)

func (x ContentDeliveryMethod) Enum() *ContentDeliveryMethod {
	p := new(ContentDeliveryMethod)
	*p = x
	return p
}

func (x ContentDeliveryMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentDeliveryMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[14].Descriptor()
}

func (ContentDeliveryMethod) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[14]
}

func (x ContentDeliveryMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContentDeliveryMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContentDeliveryMethod(num)
	return nil
}

// Deprecated: Use ContentDeliveryMethod.Descriptor instead.
func (ContentDeliveryMethod) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{14}
}

// OpenRTB 2.0: The following table lists the various options for
// indicating the type of content in which the impression will appear.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type ContentContext int32

const (
	ContentContext_VIDEO           ContentContext = 1
	ContentContext_GAME            ContentContext = 2
	ContentContext_MUSIC           ContentContext = 3
	ContentContext_APPLICATION     ContentContext = 4
	ContentContext_TEXT            ContentContext = 5
	ContentContext_OTHER           ContentContext = 6
	ContentContext_CONTEXT_UNKNOWN ContentContext = 7
)

// Enum value maps for ContentContext.
var (
	ContentContext_name = map[int32]string{
		1: "VIDEO",
		2: "GAME",
		3: "MUSIC",
		4: "APPLICATION",
		5: "TEXT",
		6: "OTHER",
		7: "CONTEXT_UNKNOWN",
	}
	ContentContext_value = map[string]int32{
		"VIDEO":           1,
		"GAME":            2,
		"MUSIC":           3,
		"APPLICATION":     4,
		"TEXT":            5,
		"OTHER":           6,
		"CONTEXT_UNKNOWN": 7,
	}
)

func (x ContentContext) Enum() *ContentContext {
	p := new(ContentContext)
	*p = x
	return p
}

func (x ContentContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentContext) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[15].Descriptor()
}

func (ContentContext) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[15]
}

func (x ContentContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContentContext) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContentContext(num)
	return nil
}

// Deprecated: Use ContentContext.Descriptor instead.
func (ContentContext) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{15}
}

// OpenRTB 2.0: The following table lists the options for content quality.
// These values are defined by the IAB -
// http://www.iab.net/media/file/long-form-video-final.pdf.
type ProductionQuality int32

const (
	ProductionQuality_QUALITY_UNKNOWN ProductionQuality = 0
	ProductionQuality_PROFESSIONAL    ProductionQuality = 1
	ProductionQuality_PROSUMER        ProductionQuality = 2
	ProductionQuality_USER_GENERATED  ProductionQuality = 3
)

// Enum value maps for ProductionQuality.
var (
	ProductionQuality_name = map[int32]string{
		0: "QUALITY_UNKNOWN",
		1: "PROFESSIONAL",
		2: "PROSUMER",
		3: "USER_GENERATED",
	}
	ProductionQuality_value = map[string]int32{
		"QUALITY_UNKNOWN": 0,
		"PROFESSIONAL":    1,
		"PROSUMER":        2,
		"USER_GENERATED":  3,
	}
)

func (x ProductionQuality) Enum() *ProductionQuality {
	p := new(ProductionQuality)
	*p = x
	return p
}

func (x ProductionQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductionQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[16].Descriptor()
}

func (ProductionQuality) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[16]
}

func (x ProductionQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProductionQuality) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProductionQuality(num)
	return nil
}

// Deprecated: Use ProductionQuality.Descriptor instead.
func (ProductionQuality) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{16}
}

// OpenRTB 2.0: The following table lists the options to indicate how the
// geographic information was determined.
type LocationType int32

const (
	// GPS / Location Services.
	LocationType_GPS_LOCATION LocationType = 1
	// IP Geolocation.
	LocationType_IP LocationType = 2
	// User-provided, e.g. registration data.
	LocationType_USER_PROVIDED LocationType = 3
)

// Enum value maps for LocationType.
var (
	LocationType_name = map[int32]string{
		1: "GPS_LOCATION",
		2: "IP",
		3: "USER_PROVIDED",
	}
	LocationType_value = map[string]int32{
		"GPS_LOCATION":  1,
		"IP":            2,
		"USER_PROVIDED": 3,
	}
)

func (x LocationType) Enum() *LocationType {
	p := new(LocationType)
	*p = x
	return p
}

func (x LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[17].Descriptor()
}

func (LocationType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[17]
}

func (x LocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LocationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LocationType(num)
	return nil
}

// Deprecated: Use LocationType.Descriptor instead.
func (LocationType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{17}
}

// OpenRTB 2.4: The following table lists the services and/or vendors used for
// resolving IP addresses to geolocations.
type LocationService int32

const (
	LocationService_IP2LOCATION LocationService = 1
	LocationService_NEUSTAR     LocationService = 2
	LocationService_MAXMIND     LocationService = 3
	LocationService_NETACUITY   LocationService = 4
)

// Enum value maps for LocationService.
var (
	LocationService_name = map[int32]string{
		1: "IP2LOCATION",
		2: "NEUSTAR",
		3: "MAXMIND",
		4: "NETACUITY",
	}
	LocationService_value = map[string]int32{
		"IP2LOCATION": 1,
		"NEUSTAR":     2,
		"MAXMIND":     3,
		"NETACUITY":   4,
	}
)

func (x LocationService) Enum() *LocationService {
	p := new(LocationService)
	*p = x
	return p
}

func (x LocationService) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationService) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[18].Descriptor()
}

func (LocationService) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[18]
}

func (x LocationService) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LocationService) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LocationService(num)
	return nil
}

// Deprecated: Use LocationService.Descriptor instead.
func (LocationService) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{18}
}

// OpenRTB 2.0: The following table lists the type of device from which the
// impression originated.
//
// OpenRTB version 2.2 of the specification added distinct values for Mobile
// and Tablet. It is recommended that any bidder adding support for 2.2
// treat a value of 1 as an acceptable alias of 4 & 5.
//
// This OpenRTB table has values derived from the IAB Quality Assurance
// Guidelines (QAG). Practitioners should keep in sync with updates to the
// QAG values as published on IAB.net.
type DeviceType int32

const (
	// Mobile (OpenRTB 2.2+: obsolete, alias for PHONE or TABLET).
	DeviceType_MOBILE DeviceType = 1
	// Personal Computer.
	DeviceType_PERSONAL_COMPUTER DeviceType = 2
	// Connected TV.
	DeviceType_CONNECTED_TV DeviceType = 3
	// Phone.
	DeviceType_HIGHEND_PHONE DeviceType = 4
	// Tablet.
	DeviceType_TABLET DeviceType = 5
	// Connected device.
	DeviceType_CONNECTED_DEVICE DeviceType = 6
	// Set top box.
	DeviceType_SET_TOP_BOX DeviceType = 7
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		1: "MOBILE",
		2: "PERSONAL_COMPUTER",
		3: "CONNECTED_TV",
		4: "HIGHEND_PHONE",
		5: "TABLET",
		6: "CONNECTED_DEVICE",
		7: "SET_TOP_BOX",
	}
	DeviceType_value = map[string]int32{
		"MOBILE":            1,
		"PERSONAL_COMPUTER": 2,
		"CONNECTED_TV":      3,
		"HIGHEND_PHONE":     4,
		"TABLET":            5,
		"CONNECTED_DEVICE":  6,
		"SET_TOP_BOX":       7,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[19].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[19]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceType(num)
	return nil
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{19}
}

// OpenRTB 2.1: The following table lists the options for the
// video quality. These values are defined by the IAB -
// http://www.iab.net/media/file/long-form-video-final.pdf.
type CompanionType int32

const (
	CompanionType_STATIC           CompanionType = 1
	CompanionType_HTML             CompanionType = 2
	CompanionType_COMPANION_IFRAME CompanionType = 3
)

// Enum value maps for CompanionType.
var (
	CompanionType_name = map[int32]string{
		1: "STATIC",
		2: "HTML",
		3: "COMPANION_IFRAME",
	}
	CompanionType_value = map[string]int32{
		"STATIC":           1,
		"HTML":             2,
		"COMPANION_IFRAME": 3,
	}
)

func (x CompanionType) Enum() *CompanionType {
	p := new(CompanionType)
	*p = x
	return p
}

func (x CompanionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanionType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[20].Descriptor()
}

func (CompanionType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[20]
}

func (x CompanionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CompanionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CompanionType(num)
	return nil
}

// Deprecated: Use CompanionType.Descriptor instead.
func (CompanionType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{20}
}

// OpenRTB 2.1: The following table lists the media ratings used in
// describing content based on the QAG categorization.
// Refer to http://www.iab.net/ne_guidelines for more information.
type QAGMediaRating int32

const (
	QAGMediaRating_ALL_AUDIENCES    QAGMediaRating = 1
	QAGMediaRating_EVERYONE_OVER_12 QAGMediaRating = 2
	QAGMediaRating_MATURE           QAGMediaRating = 3
)

// Enum value maps for QAGMediaRating.
var (
	QAGMediaRating_name = map[int32]string{
		1: "ALL_AUDIENCES",
		2: "EVERYONE_OVER_12",
		3: "MATURE",
	}
	QAGMediaRating_value = map[string]int32{
		"ALL_AUDIENCES":    1,
		"EVERYONE_OVER_12": 2,
		"MATURE":           3,
	}
)

func (x QAGMediaRating) Enum() *QAGMediaRating {
	p := new(QAGMediaRating)
	*p = x
	return p
}

func (x QAGMediaRating) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QAGMediaRating) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[21].Descriptor()
}

func (QAGMediaRating) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[21]
}

func (x QAGMediaRating) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QAGMediaRating) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QAGMediaRating(num)
	return nil
}

// Deprecated: Use QAGMediaRating.Descriptor instead.
func (QAGMediaRating) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{21}
}

// OpenRTB 2.2: The following table lists the options for a bidder to signal
// the exchange as to why it did not offer a bid for the impression.
type NoBidReason int32

const (
	NoBidReason_UNKNOWN_ERROR              NoBidReason = 0
	NoBidReason_TECHNICAL_ERROR            NoBidReason = 1
	NoBidReason_INVALID_REQUEST            NoBidReason = 2
	NoBidReason_KNOWN_WEB_SPIDER           NoBidReason = 3
	NoBidReason_SUSPECTED_NONHUMAN_TRAFFIC NoBidReason = 4
	NoBidReason_CLOUD_DATACENTER_PROXYIP   NoBidReason = 5
	NoBidReason_UNSUPPORTED_DEVICE         NoBidReason = 6
	NoBidReason_BLOCKED_PUBLISHER          NoBidReason = 7
	NoBidReason_UNMATCHED_USER             NoBidReason = 8
	NoBidReason_DAILY_READER_CAP           NoBidReason = 9
	NoBidReason_DAILY_DOMAIN_CAP           NoBidReason = 10
)

// Enum value maps for NoBidReason.
var (
	NoBidReason_name = map[int32]string{
		0:  "UNKNOWN_ERROR",
		1:  "TECHNICAL_ERROR",
		2:  "INVALID_REQUEST",
		3:  "KNOWN_WEB_SPIDER",
		4:  "SUSPECTED_NONHUMAN_TRAFFIC",
		5:  "CLOUD_DATACENTER_PROXYIP",
		6:  "UNSUPPORTED_DEVICE",
		7:  "BLOCKED_PUBLISHER",
		8:  "UNMATCHED_USER",
		9:  "DAILY_READER_CAP",
		10: "DAILY_DOMAIN_CAP",
	}
	NoBidReason_value = map[string]int32{
		"UNKNOWN_ERROR":              0,
		"TECHNICAL_ERROR":            1,
		"INVALID_REQUEST":            2,
		"KNOWN_WEB_SPIDER":           3,
		"SUSPECTED_NONHUMAN_TRAFFIC": 4,
		"CLOUD_DATACENTER_PROXYIP":   5,
		"UNSUPPORTED_DEVICE":         6,
		"BLOCKED_PUBLISHER":          7,
		"UNMATCHED_USER":             8,
		"DAILY_READER_CAP":           9,
		"DAILY_DOMAIN_CAP":           10,
	}
)

func (x NoBidReason) Enum() *NoBidReason {
	p := new(NoBidReason)
	*p = x
	return p
}

func (x NoBidReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoBidReason) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[22].Descriptor()
}

func (NoBidReason) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[22]
}

func (x NoBidReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NoBidReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NoBidReason(num)
	return nil
}

// Deprecated: Use NoBidReason.Descriptor instead.
func (NoBidReason) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{22}
}

// OpenRTB 2.5: The following table lists the options for an exchange
// to inform a bidder as to the reason why they did not win an impression.
type LossReason int32

const (
	LossReason_BID_WON                            LossReason = 0
	LossReason_INTERNAL_ERROR                     LossReason = 1
	LossReason_IMP_EXPIRED                        LossReason = 2
	LossReason_INVALID_BID                        LossReason = 3
	LossReason_INVALID_DEAL_ID                    LossReason = 4
	LossReason_INVALID_AUCTION_ID                 LossReason = 5
	LossReason_INVALID_ADOMAIN                    LossReason = 6
	LossReason_MISSING_MARKUP                     LossReason = 7
	LossReason_MISSING_CREATIVE_ID                LossReason = 8
	LossReason_MISSING_PRICE                      LossReason = 9
	LossReason_MISSING_MIN_CREATIVE_APPROVAL_DATA LossReason = 10
	LossReason_BID_BELOW_FLOOR                    LossReason = 100
	LossReason_BID_BELOW_DEAL_FLOOR               LossReason = 101
	LossReason_LOST_HIGHER_BID                    LossReason = 102
	LossReason_LOST_PMP_DEAL                      LossReason = 103
	LossReason_SEAT_BLOCKED                       LossReason = 104
	LossReason_CREATIVE_REASON_UNKNOWN            LossReason = 200
	LossReason_CREATIVE_PENDING                   LossReason = 201
	LossReason_CREATIVE_DISAPPROVED               LossReason = 202
	LossReason_CREATIVE_SIZE                      LossReason = 203
	LossReason_CREATIVE_FORMAT                    LossReason = 204
	LossReason_CREATIVE_ADVERTISER_EXCLUSION      LossReason = 205
	LossReason_CREATIVE_APP_EXCLUSION             LossReason = 206
	LossReason_CREATIVE_NOT_SECURE                LossReason = 207
	LossReason_CREATIVE_LANGUAGE_EXCLUSION        LossReason = 208
	LossReason_CREATIVE_CATEGORY_EXCLUSION        LossReason = 209
	LossReason_CREATIVE_ATTRIBUTE_EXCLUSION       LossReason = 210
	LossReason_CREATIVE_ADTYPE_EXCLUSION          LossReason = 211
	LossReason_CREATIVE_ANIMATION_LONG            LossReason = 212
	LossReason_CREATIVE_NOT_ALLOWED_PMP           LossReason = 213
)

// Enum value maps for LossReason.
var (
	LossReason_name = map[int32]string{
		0:   "BID_WON",
		1:   "INTERNAL_ERROR",
		2:   "IMP_EXPIRED",
		3:   "INVALID_BID",
		4:   "INVALID_DEAL_ID",
		5:   "INVALID_AUCTION_ID",
		6:   "INVALID_ADOMAIN",
		7:   "MISSING_MARKUP",
		8:   "MISSING_CREATIVE_ID",
		9:   "MISSING_PRICE",
		10:  "MISSING_MIN_CREATIVE_APPROVAL_DATA",
		100: "BID_BELOW_FLOOR",
		101: "BID_BELOW_DEAL_FLOOR",
		102: "LOST_HIGHER_BID",
		103: "LOST_PMP_DEAL",
		104: "SEAT_BLOCKED",
		200: "CREATIVE_REASON_UNKNOWN",
		201: "CREATIVE_PENDING",
		202: "CREATIVE_DISAPPROVED",
		203: "CREATIVE_SIZE",
		204: "CREATIVE_FORMAT",
		205: "CREATIVE_ADVERTISER_EXCLUSION",
		206: "CREATIVE_APP_EXCLUSION",
		207: "CREATIVE_NOT_SECURE",
		208: "CREATIVE_LANGUAGE_EXCLUSION",
		209: "CREATIVE_CATEGORY_EXCLUSION",
		210: "CREATIVE_ATTRIBUTE_EXCLUSION",
		211: "CREATIVE_ADTYPE_EXCLUSION",
		212: "CREATIVE_ANIMATION_LONG",
		213: "CREATIVE_NOT_ALLOWED_PMP",
	}
	LossReason_value = map[string]int32{
		"BID_WON":                            0,
		"INTERNAL_ERROR":                     1,
		"IMP_EXPIRED":                        2,
		"INVALID_BID":                        3,
		"INVALID_DEAL_ID":                    4,
		"INVALID_AUCTION_ID":                 5,
		"INVALID_ADOMAIN":                    6,
		"MISSING_MARKUP":                     7,
		"MISSING_CREATIVE_ID":                8,
		"MISSING_PRICE":                      9,
		"MISSING_MIN_CREATIVE_APPROVAL_DATA": 10,
		"BID_BELOW_FLOOR":                    100,
		"BID_BELOW_DEAL_FLOOR":               101,
		"LOST_HIGHER_BID":                    102,
		"LOST_PMP_DEAL":                      103,
		"SEAT_BLOCKED":                       104,
		"CREATIVE_REASON_UNKNOWN":            200,
		"CREATIVE_PENDING":                   201,
		"CREATIVE_DISAPPROVED":               202,
		"CREATIVE_SIZE":                      203,
		"CREATIVE_FORMAT":                    204,
		"CREATIVE_ADVERTISER_EXCLUSION":      205,
		"CREATIVE_APP_EXCLUSION":             206,
		"CREATIVE_NOT_SECURE":                207,
		"CREATIVE_LANGUAGE_EXCLUSION":        208,
		"CREATIVE_CATEGORY_EXCLUSION":        209,
		"CREATIVE_ATTRIBUTE_EXCLUSION":       210,
		"CREATIVE_ADTYPE_EXCLUSION":          211,
		"CREATIVE_ANIMATION_LONG":            212,
		"CREATIVE_NOT_ALLOWED_PMP":           213,
	}
)

func (x LossReason) Enum() *LossReason {
	p := new(LossReason)
	*p = x
	return p
}

func (x LossReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LossReason) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[23].Descriptor()
}

func (LossReason) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[23]
}

func (x LossReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LossReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LossReason(num)
	return nil
}

// Deprecated: Use LossReason.Descriptor instead.
func (LossReason) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{23}
}

// OpenRTB 2.4: The following table lists the types of feeds,
// typically for audio.
type FeedType int32

const (
	FeedType_MUSIC_SERVICE FeedType = 1
	FeedType_BROADCAST     FeedType = 2
	FeedType_PODCAST       FeedType = 3
)

// Enum value maps for FeedType.
var (
	FeedType_name = map[int32]string{
		1: "MUSIC_SERVICE",
		2: "BROADCAST",
		3: "PODCAST",
	}
	FeedType_value = map[string]int32{
		"MUSIC_SERVICE": 1,
		"BROADCAST":     2,
		"PODCAST":       3,
	}
)

func (x FeedType) Enum() *FeedType {
	p := new(FeedType)
	*p = x
	return p
}

func (x FeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[24].Descriptor()
}

func (FeedType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[24]
}

func (x FeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FeedType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FeedType(num)
	return nil
}

// Deprecated: Use FeedType.Descriptor instead.
func (FeedType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{24}
}

// OpenRTB 2.4: The following table lists the types of volume normalization
// modes, typically for audio.
type VolumeNormalizationMode int32

const (
	VolumeNormalizationMode_NONE           VolumeNormalizationMode = 0
	VolumeNormalizationMode_AVERAGE_VOLUME VolumeNormalizationMode = 1
	VolumeNormalizationMode_PEAK_VOLUME    VolumeNormalizationMode = 2
	VolumeNormalizationMode_LOUDNESS       VolumeNormalizationMode = 3
	VolumeNormalizationMode_CUSTOM_VOLUME  VolumeNormalizationMode = 4
)

// Enum value maps for VolumeNormalizationMode.
var (
	VolumeNormalizationMode_name = map[int32]string{
		0: "NONE",
		1: "AVERAGE_VOLUME",
		2: "PEAK_VOLUME",
		3: "LOUDNESS",
		4: "CUSTOM_VOLUME",
	}
	VolumeNormalizationMode_value = map[string]int32{
		"NONE":           0,
		"AVERAGE_VOLUME": 1,
		"PEAK_VOLUME":    2,
		"LOUDNESS":       3,
		"CUSTOM_VOLUME":  4,
	}
)

func (x VolumeNormalizationMode) Enum() *VolumeNormalizationMode {
	p := new(VolumeNormalizationMode)
	*p = x
	return p
}

func (x VolumeNormalizationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VolumeNormalizationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[25].Descriptor()
}

func (VolumeNormalizationMode) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[25]
}

func (x VolumeNormalizationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VolumeNormalizationMode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VolumeNormalizationMode(num)
	return nil
}

// Deprecated: Use VolumeNormalizationMode.Descriptor instead.
func (VolumeNormalizationMode) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{25}
}

// OpenRTB Native 1.0: Core layouts. An implementing exchange may not
// support all asset variants or introduce new ones unique to that system.
// To be deprecated.
type LayoutId int32

const (
	LayoutId_CONTENT_WALL   LayoutId = 1
	LayoutId_APP_WALL       LayoutId = 2
	LayoutId_NEWS_FEED      LayoutId = 3
	LayoutId_CHAT_LIST      LayoutId = 4
	LayoutId_CAROUSEL       LayoutId = 5
	LayoutId_CONTENT_STREAM LayoutId = 6
	LayoutId_GRID           LayoutId = 7 // Exchange-specific values above 500.
)

// Enum value maps for LayoutId.
var (
	LayoutId_name = map[int32]string{
		1: "CONTENT_WALL",
		2: "APP_WALL",
		3: "NEWS_FEED",
		4: "CHAT_LIST",
		5: "CAROUSEL",
		6: "CONTENT_STREAM",
		7: "GRID",
	}
	LayoutId_value = map[string]int32{
		"CONTENT_WALL":   1,
		"APP_WALL":       2,
		"NEWS_FEED":      3,
		"CHAT_LIST":      4,
		"CAROUSEL":       5,
		"CONTENT_STREAM": 6,
		"GRID":           7,
	}
)

func (x LayoutId) Enum() *LayoutId {
	p := new(LayoutId)
	*p = x
	return p
}

func (x LayoutId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LayoutId) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[26].Descriptor()
}

func (LayoutId) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[26]
}

func (x LayoutId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LayoutId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LayoutId(num)
	return nil
}

// Deprecated: Use LayoutId.Descriptor instead.
func (LayoutId) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{26}
}

// OpenRTB Native 1.0: Below is a list of the core ad unit ids described by
// IAB: http://www.iab.net/media/file/IABNativeAdvertisingPlaybook120413.pdf
// In feed unit is essentially a layout, it has been removed from the list.
// In feed units can be identified via the layout parameter on the request.
// An implementing exchange may not support all asset variants or introduce
// new ones unique to that system.
// To be deprecated.
type AdUnitId int32

const (
	AdUnitId_PAID_SEARCH_UNIT      AdUnitId = 1
	AdUnitId_RECOMMENDATION_WIDGET AdUnitId = 2
	AdUnitId_PROMOTED_LISTING      AdUnitId = 3
	AdUnitId_IAB_IN_AD_NATIVE      AdUnitId = 4
	AdUnitId_ADUNITID_CUSTOM       AdUnitId = 5 // Exchange-specific values above 500.
)

// Enum value maps for AdUnitId.
var (
	AdUnitId_name = map[int32]string{
		1: "PAID_SEARCH_UNIT",
		2: "RECOMMENDATION_WIDGET",
		3: "PROMOTED_LISTING",
		4: "IAB_IN_AD_NATIVE",
		5: "ADUNITID_CUSTOM",
	}
	AdUnitId_value = map[string]int32{
		"PAID_SEARCH_UNIT":      1,
		"RECOMMENDATION_WIDGET": 2,
		"PROMOTED_LISTING":      3,
		"IAB_IN_AD_NATIVE":      4,
		"ADUNITID_CUSTOM":       5,
	}
)

func (x AdUnitId) Enum() *AdUnitId {
	p := new(AdUnitId)
	*p = x
	return p
}

func (x AdUnitId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdUnitId) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[27].Descriptor()
}

func (AdUnitId) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[27]
}

func (x AdUnitId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AdUnitId) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AdUnitId(num)
	return nil
}

// Deprecated: Use AdUnitId.Descriptor instead.
func (AdUnitId) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{27}
}

// OpenRTB Native 1.1: The context in which the ad appears - what type
// of content is surrounding the ad on the page at a high level.
// This maps directly to the new Deep Dive on In-Feed Ad Units.
// This denotes the primary context, but does not imply other content
// may not exist on the page - for example it's expected that most
// content platforms have some social components, etc.
type ContextType int32

const (
	// Content-centric context such as newsfeed, article, image gallery,
	// video gallery, or similar.
	ContextType_CONTENT ContextType = 1
	// Social-centric context such as social network feed, email,
	// chat, or similar.
	ContextType_SOCIAL ContextType = 2
	// Product context such as product listings, details, recommendations,
	// reviews, or similar.
	ContextType_PRODUCT ContextType = 3
)

// Enum value maps for ContextType.
var (
	ContextType_name = map[int32]string{
		1: "CONTENT",
		2: "SOCIAL",
		3: "PRODUCT",
	}
	ContextType_value = map[string]int32{
		"CONTENT": 1,
		"SOCIAL":  2,
		"PRODUCT": 3,
	}
)

func (x ContextType) Enum() *ContextType {
	p := new(ContextType)
	*p = x
	return p
}

func (x ContextType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[28].Descriptor()
}

func (ContextType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[28]
}

func (x ContextType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContextType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContextType(num)
	return nil
}

// Deprecated: Use ContextType.Descriptor instead.
func (ContextType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{28}
}

// OpenRTB Native 1.1: Next-level context in which the ad appears.
// Again this reflects the primary context, and does not imply no presence
// of other elements. For example, an article is likely to contain images
// but is still first and foremost an article. SubType should only be
// combined with the primary context type as indicated (ie for a context
// type of 1, only context subtypes that start with 1 are valid).
type ContextSubtype int32

const (
	ContextSubtype_CONTENT_GENERAL_OR_MIXED ContextSubtype = 10
	ContextSubtype_CONTENT_ARTICLE          ContextSubtype = 11
	ContextSubtype_CONTENT_VIDEO            ContextSubtype = 12
	ContextSubtype_CONTENT_AUDIO            ContextSubtype = 13
	ContextSubtype_CONTENT_IMAGE            ContextSubtype = 14
	ContextSubtype_CONTENT_USER_GENERATED   ContextSubtype = 15
	ContextSubtype_SOCIAL_GENERAL           ContextSubtype = 20
	ContextSubtype_SOCIAL_EMAIL             ContextSubtype = 21
	ContextSubtype_SOCIAL_CHAT_IM           ContextSubtype = 22
	ContextSubtype_PRODUCT_SELLING          ContextSubtype = 30
	ContextSubtype_PRODUCT_MARKETPLACE      ContextSubtype = 31
	ContextSubtype_PRODUCT_REVIEW           ContextSubtype = 32
)

// Enum value maps for ContextSubtype.
var (
	ContextSubtype_name = map[int32]string{
		10: "CONTENT_GENERAL_OR_MIXED",
		11: "CONTENT_ARTICLE",
		12: "CONTENT_VIDEO",
		13: "CONTENT_AUDIO",
		14: "CONTENT_IMAGE",
		15: "CONTENT_USER_GENERATED",
		20: "SOCIAL_GENERAL",
		21: "SOCIAL_EMAIL",
		22: "SOCIAL_CHAT_IM",
		30: "PRODUCT_SELLING",
		31: "PRODUCT_MARKETPLACE",
		32: "PRODUCT_REVIEW",
	}
	ContextSubtype_value = map[string]int32{
		"CONTENT_GENERAL_OR_MIXED": 10,
		"CONTENT_ARTICLE":          11,
		"CONTENT_VIDEO":            12,
		"CONTENT_AUDIO":            13,
		"CONTENT_IMAGE":            14,
		"CONTENT_USER_GENERATED":   15,
		"SOCIAL_GENERAL":           20,
		"SOCIAL_EMAIL":             21,
		"SOCIAL_CHAT_IM":           22,
		"PRODUCT_SELLING":          30,
		"PRODUCT_MARKETPLACE":      31,
		"PRODUCT_REVIEW":           32,
	}
)

func (x ContextSubtype) Enum() *ContextSubtype {
	p := new(ContextSubtype)
	*p = x
	return p
}

func (x ContextSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[29].Descriptor()
}

func (ContextSubtype) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[29]
}

func (x ContextSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContextSubtype) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContextSubtype(num)
	return nil
}

// Deprecated: Use ContextSubtype.Descriptor instead.
func (ContextSubtype) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{29}
}

// OpenRTB Native 1.1: The FORMAT of the ad you are purchasing,
// separate from the surrounding context.
type PlacementType int32

const (
	// In the feed of content - for example as an item inside the organic
	// feed/grid/listing/carousel.
	PlacementType_IN_FEED PlacementType = 1
	// In the atomic unit of the content - IE in the article page
	// or single image page.
	PlacementType_ATOMIC_UNIT PlacementType = 2
	// Outside the core content - for example in the ads section on the
	// right rail, as a banner-style placement near the content, etc.
	PlacementType_OUTSIDE PlacementType = 3
	// Recommendation widget, most commonly presented below
	// the article content.
	PlacementType_RECOMMENDATION PlacementType = 4
)

// Enum value maps for PlacementType.
var (
	PlacementType_name = map[int32]string{
		1: "IN_FEED",
		2: "ATOMIC_UNIT",
		3: "OUTSIDE",
		4: "RECOMMENDATION",
	}
	PlacementType_value = map[string]int32{
		"IN_FEED":        1,
		"ATOMIC_UNIT":    2,
		"OUTSIDE":        3,
		"RECOMMENDATION": 4,
	}
)

func (x PlacementType) Enum() *PlacementType {
	p := new(PlacementType)
	*p = x
	return p
}

func (x PlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[30].Descriptor()
}

func (PlacementType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[30]
}

func (x PlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlacementType(num)
	return nil
}

// Deprecated: Use PlacementType.Descriptor instead.
func (PlacementType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{30}
}

// OpenRTB Native 1.0: Common asset element types of native advertising.
// This list is non-exhaustive and intended to be extended by the buyers
// and sellers as the format evolves. An implementing exchange may not
// support all asset variants or introduce new ones unique to that system.
type DataAssetType int32

const (
	// Sponsored By message where response should contain the brand name
	// of the sponsor.
	// Format: Text; Max length: 25 or longer.
	DataAssetType_SPONSORED DataAssetType = 1
	// Descriptive text associated with the product or service being advertised.
	// Format: Text; Max length: 140 or longer.
	DataAssetType_DESC DataAssetType = 2
	// Rating of the product being offered to the user.
	// For example an app's rating in an app store from 0-5.
	// Format: Number (1-5 digits) formatted as string.
	DataAssetType_RATING DataAssetType = 3
	// Number of social ratings or "likes" of product being offered to the user.
	// Format: Number formatted as string.
	DataAssetType_LIKES DataAssetType = 4
	// Number downloads/installs of this product.
	// Format: Number formatted as string.
	DataAssetType_DOWNLOADS DataAssetType = 5
	// Price for product / app / in-app purchase.
	// Value should include currency symbol in localised format.
	// Format: Number formatted as string.
	DataAssetType_PRICE DataAssetType = 6
	// Sale price that can be used together with price to indicate a discounted
	// price compared to a regular price. Value should include currency symbol
	// in localised format.
	// Format: Number formatted as string.
	DataAssetType_SALEPRICE DataAssetType = 7
	// Phone number.
	// Format: Formatted string.
	DataAssetType_PHONE DataAssetType = 8
	// Address.
	// Format: Text.
	DataAssetType_ADDRESS DataAssetType = 9
	// Additional descriptive text associated with the product or service
	// being advertised.
	// Format: Text.
	DataAssetType_DESC2 DataAssetType = 10
	// Display URL for the text ad.
	// Format: Text.
	DataAssetType_DISPLAYURL DataAssetType = 11
	// Text describing a 'call to action' button for the destination URL.
	// Format: Text.
	DataAssetType_CTATEXT DataAssetType = 12
)

// Enum value maps for DataAssetType.
var (
	DataAssetType_name = map[int32]string{
		1:  "SPONSORED",
		2:  "DESC",
		3:  "RATING",
		4:  "LIKES",
		5:  "DOWNLOADS",
		6:  "PRICE",
		7:  "SALEPRICE",
		8:  "PHONE",
		9:  "ADDRESS",
		10: "DESC2",
		11: "DISPLAYURL",
		12: "CTATEXT",
	}
	DataAssetType_value = map[string]int32{
		"SPONSORED":  1,
		"DESC":       2,
		"RATING":     3,
		"LIKES":      4,
		"DOWNLOADS":  5,
		"PRICE":      6,
		"SALEPRICE":  7,
		"PHONE":      8,
		"ADDRESS":    9,
		"DESC2":      10,
		"DISPLAYURL": 11,
		"CTATEXT":    12,
	}
)

func (x DataAssetType) Enum() *DataAssetType {
	p := new(DataAssetType)
	*p = x
	return p
}

func (x DataAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[31].Descriptor()
}

func (DataAssetType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[31]
}

func (x DataAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataAssetType(num)
	return nil
}

// Deprecated: Use DataAssetType.Descriptor instead.
func (DataAssetType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{31}
}

// OpenRTB Native 1.0: Common image asset element types of native advertising
// at the time of writing this spec. This list is non-exhaustive and intended
// to be extended by the buyers and sellers as the format evolves.
type ImageAssetType int32

const (
	// Icon image.
	// Max height: at least 50; Aspect ratio: 1:1.
	ImageAssetType_ICON ImageAssetType = 1
	// Logo image for the brand/app.
	// To be deprecated in a future version - use type 1 / ICON.
	// DEPRECATED in 1.2
	ImageAssetType_LOGO ImageAssetType = 2
	// Large image preview for the ad.
	// At least one of 2 size variants required:
	// Small Variant: max height: 200+, max width: 200+, 267, or 382,
	//                aspect ratio: 1:1, 4:3, or 1.91:1.
	// Large Variant: max height: 627+, max width: 627+, 836, or 1198,
	//                aspect ratio: 1:1, 4:3, or 1.91:1.
	ImageAssetType_MAIN ImageAssetType = 3
)

// Enum value maps for ImageAssetType.
var (
	ImageAssetType_name = map[int32]string{
		1: "ICON",
		2: "LOGO",
		3: "MAIN",
	}
	ImageAssetType_value = map[string]int32{
		"ICON": 1,
		"LOGO": 2,
		"MAIN": 3,
	}
)

func (x ImageAssetType) Enum() *ImageAssetType {
	p := new(ImageAssetType)
	*p = x
	return p
}

func (x ImageAssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageAssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[32].Descriptor()
}

func (ImageAssetType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[32]
}

func (x ImageAssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ImageAssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ImageAssetType(num)
	return nil
}

// Deprecated: Use ImageAssetType.Descriptor instead.
func (ImageAssetType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{32}
}

// OpenRTB Native 1.2.
type EventType int32

const (
	// Impression
	EventType_IMPRESSION EventType = 1
	// Visible impression using MRC definition at 50% in view for 1 second.
	EventType_VIEWABLE_MRC_50 EventType = 2
	// 100% in view for 1 second (ie GroupM standard).
	EventType_VIEWABLE_MRC_100 EventType = 3
	// Visible impression for video using MRC definition at 50% in view
	// for 2 seconds.
	EventType_VIEWABLE_VIDEO_50 EventType = 4
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		1: "IMPRESSION",
		2: "VIEWABLE_MRC_50",
		3: "VIEWABLE_MRC_100",
		4: "VIEWABLE_VIDEO_50",
	}
	EventType_value = map[string]int32{
		"IMPRESSION":        1,
		"VIEWABLE_MRC_50":   2,
		"VIEWABLE_MRC_100":  3,
		"VIEWABLE_VIDEO_50": 4,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[33].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[33]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventType(num)
	return nil
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{33}
}

// OpenRTB Native 1.2.
type EventTrackingMethod int32

const (
	// Image-pixel tracking - URL provided will be insterted as a 1x1 pixel at the
	// time of the event.
	EventTrackingMethod_IMG EventTrackingMethod = 1
	// Javascript-based tracking - URL provided will be insterted as a js tag at
	// the time of the event.
	EventTrackingMethod_JS EventTrackingMethod = 2
)

// Enum value maps for EventTrackingMethod.
var (
	EventTrackingMethod_name = map[int32]string{
		1: "IMG",
		2: "JS",
	}
	EventTrackingMethod_value = map[string]int32{
		"IMG": 1,
		"JS":  2,
	}
)

func (x EventTrackingMethod) Enum() *EventTrackingMethod {
	p := new(EventTrackingMethod)
	*p = x
	return p
}

func (x EventTrackingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTrackingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_openrtb_proto_enumTypes[34].Descriptor()
}

func (EventTrackingMethod) Type() protoreflect.EnumType {
	return &file_openrtb_proto_enumTypes[34]
}

func (x EventTrackingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EventTrackingMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EventTrackingMethod(num)
	return nil
}

// Deprecated: Use EventTrackingMethod.Descriptor instead.
func (EventTrackingMethod) EnumDescriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{34}
}

// OpenRTB 2.0: The top-level bid request object contains a globally unique
// bid request or auction ID. This id attribute is required as is at least one
// impression object (Section 3.2.2). Other attributes in this top-level object
// establish rules and restrictions that apply to all impressions being offered.
//
// There are also several subordinate objects that provide detailed data to
// potential buyers. Among these are the Site and App objects, which describe
// the type of published media in which the impression(s) appear.
// These objects are highly recommended, but only one applies to a given
// bid request depending on whether the media is browser-based web content
// or a non-browser application, respectively.
type BidRequest struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Unique ID of the bid request, provided by the exchange.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Array of Imp objects (Section 3.2.2) representing the impressions offered.
	// At least 1 Imp object is required.
	Imp []*BidRequest_Imp `protobuf:"bytes,2,rep,name=imp" json:"imp,omitempty"`
	// Types that are assignable to DistributionchannelOneof:
	//	*BidRequest_Site_
	//	*BidRequest_App_
	DistributionchannelOneof isBidRequest_DistributionchannelOneof `protobuf_oneof:"distributionchannel_oneof"`
	// Details via a Device object (Section 3.2.11) about the user's
	// device to which the impression will be delivered.
	Device *BidRequest_Device `protobuf:"bytes,5,opt,name=device" json:"device,omitempty"`
	// A Regs object (Section 3.2.16) that specifies any industry, legal,
	// or governmental regulations in force for this request.
	Regs *BidRequest_Regs `protobuf:"bytes,14,opt,name=regs" json:"regs,omitempty"`
	// Details via a User object (Section 3.2.13) about the human
	// user of the device; the advertising audience.
	User *BidRequest_User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// Auction type, where 1 = First Price, 2 = Second Price Plus.
	// Exchange-specific auction types can be defined using values > 500.
	At *AuctionType `protobuf:"varint,7,opt,name=at,enum=com.google.openrtb.AuctionType,def=2" json:"at,omitempty"`
	// Maximum time in milliseconds to submit a bid to avoid timeout.
	// This value is commonly communicated offline.
	Tmax *int32 `protobuf:"varint,8,opt,name=tmax" json:"tmax,omitempty"`
	// Allowlist of buyer seats (e.g., advertisers, agencies) that can bid on this
	// impression. IDs of seats and knowledge of the buyer's customers to which
	// they refer must be coordinated between bidders and the exchange a priori.
	// Omission implies no seat restrictions.
	Wseat []string `protobuf:"bytes,9,rep,name=wseat" json:"wseat,omitempty"`
	// Flag to indicate if Exchange can verify that the impressions offered
	// represent all of the impressions available in context (e.g., all on the
	// web page, all video spots such as pre/mid/post roll) to support
	// road-blocking. 0 = no or unknown, 1 = yes, the impressions offered
	// represent all that are available.
	Allimps *bool `protobuf:"varint,10,opt,name=allimps,def=0" json:"allimps,omitempty"`
	// Array of allowed currencies for bids on this bid request using ISO-4217
	// alpha codes. Recommended only if the exchange accepts multiple currencies.
	Cur []string `protobuf:"bytes,11,rep,name=cur" json:"cur,omitempty"`
	// Blocked advertiser categories using the IAB content categories.
	// Refer to enum ContentCategory.
	Bcat []string `protobuf:"bytes,12,rep,name=bcat" json:"bcat,omitempty"`
	// Block list of advertisers by their domains (e.g., "ford.com").
	Badv []string `protobuf:"bytes,13,rep,name=badv" json:"badv,omitempty"`
	// Block list of applications by their platform-specific exchange
	// independent application identifiers. On Android, these should
	// be bundle or package names (e.g., com.foo.mygame).
	// On iOS, these are numeric IDs.
	Bapp []string `protobuf:"bytes,16,rep,name=bapp" json:"bapp,omitempty"`
	// Indicator of test mode in which auctions are not billable,
	// where 0 = live mode, 1 = test mode.
	Test *bool `protobuf:"varint,15,opt,name=test,def=0" json:"test,omitempty"`
	// Block list of buyer seats (e.g., advertisers, agencies) restricted
	// from bidding on this impression. IDs of seats and knowledge
	// of the buyer's customers to which they refer must be
	// coordinated between bidders and the exchange a priori.
	// At most, only one of wseat and bseat should be used in the
	// same request. Omission of both implies no seat restrictions.
	Bseat []string `protobuf:"bytes,17,rep,name=bseat" json:"bseat,omitempty"`
	// Allowlist of languages for creatives using ISO-639-1-alpha-2.
	// Omission implies no specific restrictions, but buyers would be
	// advised to consider language attribute in the Device and/or
	// Content objects if available.
	Wlang []string `protobuf:"bytes,18,rep,name=wlang" json:"wlang,omitempty"`
	// A Source object (Section 3.2.2) that provides data about the
	// inventory source and which entity makes the final decision.
	Source *BidRequest_Source `protobuf:"bytes,19,opt,name=source" json:"source,omitempty"`
}

// Default values for BidRequest fields.
const (
	Default_BidRequest_At      = AuctionType_SECOND_PRICE
	Default_BidRequest_Allimps = bool(false)
	Default_BidRequest_Test    = bool(false)
)

func (x *BidRequest) Reset() {
	*x = BidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest) ProtoMessage() {}

func (x *BidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest.ProtoReflect.Descriptor instead.
func (*BidRequest) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0}
}

var extRange_BidRequest = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest
}

func (x *BidRequest) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest) GetImp() []*BidRequest_Imp {
	if x != nil {
		return x.Imp
	}
	return nil
}

func (m *BidRequest) GetDistributionchannelOneof() isBidRequest_DistributionchannelOneof {
	if m != nil {
		return m.DistributionchannelOneof
	}
	return nil
}

func (x *BidRequest) GetSite() *BidRequest_Site {
	if x, ok := x.GetDistributionchannelOneof().(*BidRequest_Site_); ok {
		return x.Site
	}
	return nil
}

func (x *BidRequest) GetApp() *BidRequest_App {
	if x, ok := x.GetDistributionchannelOneof().(*BidRequest_App_); ok {
		return x.App
	}
	return nil
}

func (x *BidRequest) GetDevice() *BidRequest_Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *BidRequest) GetRegs() *BidRequest_Regs {
	if x != nil {
		return x.Regs
	}
	return nil
}

func (x *BidRequest) GetUser() *BidRequest_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *BidRequest) GetAt() AuctionType {
	if x != nil && x.At != nil {
		return *x.At
	}
	return Default_BidRequest_At
}

func (x *BidRequest) GetTmax() int32 {
	if x != nil && x.Tmax != nil {
		return *x.Tmax
	}
	return 0
}

func (x *BidRequest) GetWseat() []string {
	if x != nil {
		return x.Wseat
	}
	return nil
}

func (x *BidRequest) GetAllimps() bool {
	if x != nil && x.Allimps != nil {
		return *x.Allimps
	}
	return Default_BidRequest_Allimps
}

func (x *BidRequest) GetCur() []string {
	if x != nil {
		return x.Cur
	}
	return nil
}

func (x *BidRequest) GetBcat() []string {
	if x != nil {
		return x.Bcat
	}
	return nil
}

func (x *BidRequest) GetBadv() []string {
	if x != nil {
		return x.Badv
	}
	return nil
}

func (x *BidRequest) GetBapp() []string {
	if x != nil {
		return x.Bapp
	}
	return nil
}

func (x *BidRequest) GetTest() bool {
	if x != nil && x.Test != nil {
		return *x.Test
	}
	return Default_BidRequest_Test
}

func (x *BidRequest) GetBseat() []string {
	if x != nil {
		return x.Bseat
	}
	return nil
}

func (x *BidRequest) GetWlang() []string {
	if x != nil {
		return x.Wlang
	}
	return nil
}

func (x *BidRequest) GetSource() *BidRequest_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type isBidRequest_DistributionchannelOneof interface {
	isBidRequest_DistributionchannelOneof()
}

type BidRequest_Site_ struct {
	// Details via a Site object (Section 3.2.6) about the publisher's website.
	// Only applicable and recommended for websites.
	Site *BidRequest_Site `protobuf:"bytes,3,opt,name=site,oneof"`
}

type BidRequest_App_ struct {
	// Details via an App object (Section 3.2.7) about the publisher's app
	// (non-browser applications). Only applicable and recommended for apps.
	App *BidRequest_App `protobuf:"bytes,4,opt,name=app,oneof"`
}

func (*BidRequest_Site_) isBidRequest_DistributionchannelOneof() {}

func (*BidRequest_App_) isBidRequest_DistributionchannelOneof() {}

// OpenRTB 2.0: This object is the top-level bid response object (i.e., the
// unnamed outer JSON object). The id attribute is a reflection of the bid
// request ID for logging purposes. Similarly, bidid is an optional response
// tracking ID for bidders. If specified, it can be included in the subsequent
// win notice call if the bidder wins. At least one seatbid object is required,
// which contains at least one bid for an impression. Other attributes are
// optional. To express a "no-bid", the options are to return an empty response
// with HTTP 204. Alternately if the bidder wishes to convey to the exchange a
// reason for not bidding, just a BidResponse object is returned with a
// reason code in the nbr attribute.
type BidResponse struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// ID of the bid request to which this is a response.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Array of seatbid objects; 1+ required if a bid is to be made.
	Seatbid []*BidResponse_SeatBid `protobuf:"bytes,2,rep,name=seatbid" json:"seatbid,omitempty"`
	// Bidder generated response ID to assist with logging/tracking.
	Bidid *string `protobuf:"bytes,3,opt,name=bidid" json:"bidid,omitempty"`
	// Bid currency using ISO-4217 alpha codes.
	Cur *string `protobuf:"bytes,4,opt,name=cur" json:"cur,omitempty"`
	// Optional feature to allow a bidder to set data in the exchange's cookie.
	// The string must be in base85 cookie safe characters and be in any format.
	// Proper JSON encoding must be used to include "escaped" quotation marks.
	Customdata *string `protobuf:"bytes,5,opt,name=customdata" json:"customdata,omitempty"`
	// Reason for not bidding.
	Nbr *NoBidReason `protobuf:"varint,6,opt,name=nbr,enum=com.google.openrtb.NoBidReason" json:"nbr,omitempty"`
}

func (x *BidResponse) Reset() {
	*x = BidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse) ProtoMessage() {}

func (x *BidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse.ProtoReflect.Descriptor instead.
func (*BidResponse) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{1}
}

var extRange_BidResponse = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidResponse.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidResponse) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidResponse
}

func (x *BidResponse) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidResponse) GetSeatbid() []*BidResponse_SeatBid {
	if x != nil {
		return x.Seatbid
	}
	return nil
}

func (x *BidResponse) GetBidid() string {
	if x != nil && x.Bidid != nil {
		return *x.Bidid
	}
	return ""
}

func (x *BidResponse) GetCur() string {
	if x != nil && x.Cur != nil {
		return *x.Cur
	}
	return ""
}

func (x *BidResponse) GetCustomdata() string {
	if x != nil && x.Customdata != nil {
		return *x.Customdata
	}
	return ""
}

func (x *BidResponse) GetNbr() NoBidReason {
	if x != nil && x.Nbr != nil {
		return *x.Nbr
	}
	return NoBidReason_UNKNOWN_ERROR
}

// OpenRTB Native 1.0: The Native Object defines the native advertising
// opportunity available for bid via this bid request. It must be included
// directly in the impression object if the impression offered for auction
// is a native ad format.
// Note: Prior to VERSION 1.1, the specification could be interpreted as
// requiring the native request to have a root node with a single field "native"
// that would contain the NativeRequest as its value.
// In 1.2 The NativeRequest Object specified here is now the root object.
type NativeRequest struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Version of the Native Markup version in use.
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	// The Layout ID of the native ad unit.
	// RECOMMENDED by OpenRTB Native 1.0; optional in 1.1, DEPRECATED in 1.2.
	Layout *LayoutId `protobuf:"varint,2,opt,name=layout,enum=com.google.openrtb.LayoutId" json:"layout,omitempty"`
	// The Ad unit ID of the native ad unit.
	// This corresponds to one of IAB Core-6 native ad units.
	// RECOMMENDED by OpenRTB Native 1.0; optional in 1.1, DEPRECATED in 1.2.
	Adunit *AdUnitId `protobuf:"varint,3,opt,name=adunit,enum=com.google.openrtb.AdUnitId" json:"adunit,omitempty"`
	// The context in which the ad appears.
	// RECOMMENDED in 1.2.
	Context *ContextType `protobuf:"varint,7,opt,name=context,enum=com.google.openrtb.ContextType" json:"context,omitempty"`
	// A more detailed context in which the ad appears.
	Contextsubtype *ContextSubtype `protobuf:"varint,8,opt,name=contextsubtype,enum=com.google.openrtb.ContextSubtype" json:"contextsubtype,omitempty"`
	// The design/format/layout of the ad unit being offered.
	// RECOMMENDED by the OpenRTB Native specification.
	Plcmttype *PlacementType `protobuf:"varint,9,opt,name=plcmttype,enum=com.google.openrtb.PlacementType" json:"plcmttype,omitempty"`
	// The number of identical placements in this Layout.
	Plcmtcnt *int32 `protobuf:"varint,4,opt,name=plcmtcnt,def=1" json:"plcmtcnt,omitempty"`
	// 0 for the first ad, 1 for the second ad, and so on. Note this would
	// generally NOT be used in combination with plcmtcnt - either you are
	// auctioning multiple identical placements (in which case
	// plcmtcnt>1, seq=0) or you are holding separate auctions for distinct
	// items in the feed (in which case plcmtcnt=1, seq>=1).
	Seq *int32 `protobuf:"varint,5,opt,name=seq,def=0" json:"seq,omitempty"`
	// Any bid must comply with the array of elements expressed by the Exchange.
	// REQUIRED by the OpenRTB Native specification: at least 1 element.
	Assets []*NativeRequest_Asset `protobuf:"bytes,6,rep,name=assets" json:"assets,omitempty"`
	// Whether the supply source / impression supports returning an assetsurl
	// instead of an asset object. 0 or the absence of the field indicates no such
	// support.
	// Implemented in 1.2
	Aurlsupport *bool `protobuf:"varint,11,opt,name=aurlsupport" json:"aurlsupport,omitempty"`
	// Whether the supply source / impression supports returning a DCO URL
	// instead of an asset object. 0 or the absence of the field indicates no such
	// support.
	// Implemented in 1.2
	// Beta feature.
	Durlsupport *bool `protobuf:"varint,12,opt,name=durlsupport" json:"durlsupport,omitempty"`
	// Specifies what type of event tracking is supported.
	// Implemented in 1.2
	Eventtrackers []*NativeRequest_EventTrackers `protobuf:"bytes,13,rep,name=eventtrackers" json:"eventtrackers,omitempty"`
	// Set to 1 when the native ad supports buyer-specific privacy notice.
	// Set to 0 (or field absent) when the native ad doesn't support custom
	// privacy links or if support is unknown.
	// RECOMMENDED and implemented in 1.2
	Privacy *bool `protobuf:"varint,14,opt,name=privacy" json:"privacy,omitempty"`
}

// Default values for NativeRequest fields.
const (
	Default_NativeRequest_Plcmtcnt = int32(1)
	Default_NativeRequest_Seq      = int32(0)
)

func (x *NativeRequest) Reset() {
	*x = NativeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest) ProtoMessage() {}

func (x *NativeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest.ProtoReflect.Descriptor instead.
func (*NativeRequest) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{2}
}

var extRange_NativeRequest = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest
}

func (x *NativeRequest) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *NativeRequest) GetLayout() LayoutId {
	if x != nil && x.Layout != nil {
		return *x.Layout
	}
	return LayoutId_CONTENT_WALL
}

func (x *NativeRequest) GetAdunit() AdUnitId {
	if x != nil && x.Adunit != nil {
		return *x.Adunit
	}
	return AdUnitId_PAID_SEARCH_UNIT
}

func (x *NativeRequest) GetContext() ContextType {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ContextType_CONTENT
}

func (x *NativeRequest) GetContextsubtype() ContextSubtype {
	if x != nil && x.Contextsubtype != nil {
		return *x.Contextsubtype
	}
	return ContextSubtype_CONTENT_GENERAL_OR_MIXED
}

func (x *NativeRequest) GetPlcmttype() PlacementType {
	if x != nil && x.Plcmttype != nil {
		return *x.Plcmttype
	}
	return PlacementType_IN_FEED
}

func (x *NativeRequest) GetPlcmtcnt() int32 {
	if x != nil && x.Plcmtcnt != nil {
		return *x.Plcmtcnt
	}
	return Default_NativeRequest_Plcmtcnt
}

func (x *NativeRequest) GetSeq() int32 {
	if x != nil && x.Seq != nil {
		return *x.Seq
	}
	return Default_NativeRequest_Seq
}

func (x *NativeRequest) GetAssets() []*NativeRequest_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *NativeRequest) GetAurlsupport() bool {
	if x != nil && x.Aurlsupport != nil {
		return *x.Aurlsupport
	}
	return false
}

func (x *NativeRequest) GetDurlsupport() bool {
	if x != nil && x.Durlsupport != nil {
		return *x.Durlsupport
	}
	return false
}

func (x *NativeRequest) GetEventtrackers() []*NativeRequest_EventTrackers {
	if x != nil {
		return x.Eventtrackers
	}
	return nil
}

func (x *NativeRequest) GetPrivacy() bool {
	if x != nil && x.Privacy != nil {
		return *x.Privacy
	}
	return false
}

// OpenRTB Native 1.0: The native response object is the top level JSON object
// which identifies an native response.
// Note: Prior to VERSION 1.1, the native response's root node was an object
// with a single field "native" that would contain the object above as its
// value.
// In 1.2 The NativeResponse Object specified here is now the root object.
type NativeResponse struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Version of the Native Markup version in use.
	// RECOMMENDED in 1.2
	Ver *string `protobuf:"bytes,1,opt,name=ver" json:"ver,omitempty"`
	// List of native ad's assets.
	// RECOMMENDED in 1.0, 1.1, or in 1.2 as a fallback if assetsurl is provided.
	// REQUIRED in 1.2, if not assetsurl is provided.
	Assets []*NativeResponse_Asset `protobuf:"bytes,2,rep,name=assets" json:"assets,omitempty"`
	// URL of alternate source for the assets object. The expected response is a
	// JSON object mirroring the asset object in the bid response, subject to
	// certain requirements as specified in the individual objects.
	// Where present, overrides the assets object in the response.
	// Implemented in 1.2
	Assetsurl *string `protobuf:"bytes,6,opt,name=assetsurl" json:"assetsurl,omitempty"`
	// URL where a dynamic creative specification may be found for populating this
	// ad, per the Dynamic Content Ads Specification.
	// Note this is a beta option as the interpretation of the Dynamic Content Ads
	// Specification and how to assign those elementes into a native ad is outside
	// the scope of this spec and must be agreed offline between parties or as may
	// be specified in a future revision of the Dynamic Content Ads spec.
	// Where present, overrides the assets object in the response.
	// Implemented in 1.2
	Dcourl *string `protobuf:"bytes,7,opt,name=dcourl" json:"dcourl,omitempty"`
	// Destination Link. This is default link object for the ad.
	// Individual assets can also have a link object which applies if the asset is
	// activated (clicked). If the asset doesn't have a link object, the parent
	// link object applies.
	// See ResponseLink definition.
	// REQUIRED by the OpenRTB Native specification.
	Link *NativeResponse_Link `protobuf:"bytes,3,req,name=link" json:"link,omitempty"`
	// Array of impression tracking URLs, expected to return a 1x1 image or
	// 204 response - typically only passed when using 3rd party trackers.
	// To be deprecated in 1.2 - Replaced with EventTracker.
	Imptrackers []string `protobuf:"bytes,4,rep,name=imptrackers" json:"imptrackers,omitempty"`
	// Optional javascript impression tracker. Contains <script> tags to be
	// executed at impression time where it can be supported.
	// To be deprecated in 1.2 - Replaced with EventTracker.
	Jstracker *string `protobuf:"bytes,5,opt,name=jstracker" json:"jstracker,omitempty"`
	// Array of response event trackers to run with the ad, in response to the
	// declared supported methods in the NativeRequest. Replaces imptrackers and
	// jstrackers.
	// Implemented in 1.2
	Eventtrackers []*NativeResponse_EventTracker `protobuf:"bytes,8,rep,name=eventtrackers" json:"eventtrackers,omitempty"`
	// If support was indicated in the request, URL of a page informing the user
	// about the buyer's targeting activity.
	// Implemented in 1.2
	Privacy *string `protobuf:"bytes,9,opt,name=privacy" json:"privacy,omitempty"`
}

func (x *NativeResponse) Reset() {
	*x = NativeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse) ProtoMessage() {}

func (x *NativeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse.ProtoReflect.Descriptor instead.
func (*NativeResponse) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3}
}

var extRange_NativeResponse = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse
}

func (x *NativeResponse) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *NativeResponse) GetAssets() []*NativeResponse_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *NativeResponse) GetAssetsurl() string {
	if x != nil && x.Assetsurl != nil {
		return *x.Assetsurl
	}
	return ""
}

func (x *NativeResponse) GetDcourl() string {
	if x != nil && x.Dcourl != nil {
		return *x.Dcourl
	}
	return ""
}

func (x *NativeResponse) GetLink() *NativeResponse_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *NativeResponse) GetImptrackers() []string {
	if x != nil {
		return x.Imptrackers
	}
	return nil
}

func (x *NativeResponse) GetJstracker() string {
	if x != nil && x.Jstracker != nil {
		return *x.Jstracker
	}
	return ""
}

func (x *NativeResponse) GetEventtrackers() []*NativeResponse_EventTracker {
	if x != nil {
		return x.Eventtrackers
	}
	return nil
}

func (x *NativeResponse) GetPrivacy() string {
	if x != nil && x.Privacy != nil {
		return *x.Privacy
	}
	return ""
}

// OpenRTB 2.5: This object describes the nature and behavior of the entity
// that is the source of the bid request upstream from the exchange.
// The primary purpose of this object is to define post-auction or upstream
// decisioning when the exchange itself does not control the final decision.
// A common example of this is header bidding, but it can also apply to
// upstream server entities such as another RTB exchange, a mediation
// platform, or an ad server combines direct campaigns with 3rd party
// demand in decisioning.
type BidRequest_Source struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Entity responsible for the final impression sale decision,
	// where 0 = exchange, 1 = upstream source
	// RECOMMENDED by the OpenRTB specification.
	Fd *bool `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	// Transaction ID that must be common across all participants in
	// this bid request (e.g., potentially multiple exchanges).
	// RECOMMENDED by the OpenRTB specification.
	Tid *string `protobuf:"bytes,2,opt,name=tid" json:"tid,omitempty"`
	// Payment ID chain string containing embedded syntax
	// described in the TAG Payment ID Protocol v1.0.
	// RECOMMENDED by the OpenRTB specification.
	Pchain *string `protobuf:"bytes,3,opt,name=pchain" json:"pchain,omitempty"`
}

func (x *BidRequest_Source) Reset() {
	*x = BidRequest_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Source) ProtoMessage() {}

func (x *BidRequest_Source) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Source.ProtoReflect.Descriptor instead.
func (*BidRequest_Source) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 0}
}

var extRange_BidRequest_Source = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Source.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Source) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Source
}

func (x *BidRequest_Source) GetFd() bool {
	if x != nil && x.Fd != nil {
		return *x.Fd
	}
	return false
}

func (x *BidRequest_Source) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *BidRequest_Source) GetPchain() string {
	if x != nil && x.Pchain != nil {
		return *x.Pchain
	}
	return ""
}

// OpenRTB 2.0: This object describes an ad placement or impression
// being auctioned.  A single bid request can include multiple Imp objects,
// a use case for which might be an exchange that supports selling all
// ad positions on a given page.  Each Imp object has a required ID so that
// bids can reference them individually.
//
// The presence of Banner (Section 3.2.3), Video (Section 3.2.4),
// and/or Native (Section 3.2.5) objects subordinate to the Imp object
// indicates the type of impression being offered. The publisher can choose
// one such type which is the typical case or mix them at their discretion.
// Any given bid for the impression must conform to one of the offered types.
type BidRequest_Imp struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// A unique identifier for this impression within the context of the bid
	// request (typically, value starts with 1, and increments up to n
	// for n impressions).
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// A Banner object (Section 3.2.3); required if this impression is
	// offered as a banner ad opportunity.
	Banner *BidRequest_Imp_Banner `protobuf:"bytes,2,opt,name=banner" json:"banner,omitempty"`
	// A Video object (Section 3.2.4); required if this impression is
	// offered as a video ad opportunity.
	Video *BidRequest_Imp_Video `protobuf:"bytes,3,opt,name=video" json:"video,omitempty"`
	// An Audio object; required if this impression is offered
	// as an audio ad opportunity.
	Audio *BidRequest_Imp_Audio `protobuf:"bytes,15,opt,name=audio" json:"audio,omitempty"`
	// Name of ad mediation partner, SDK technology, or player responsible
	// for rendering ad (typically video or mobile). Used by some ad servers
	// to customize ad code by partner. Recommended for video and/or apps.
	Displaymanager *string `protobuf:"bytes,4,opt,name=displaymanager" json:"displaymanager,omitempty"`
	// Version of ad mediation partner, SDK technology, or player responsible
	// for rendering ad (typically video or mobile). Used by some ad servers
	// to customize ad code by partner. Recommended for video and/or apps.
	Displaymanagerver *string `protobuf:"bytes,5,opt,name=displaymanagerver" json:"displaymanagerver,omitempty"`
	// 1 = the ad is interstitial or full screen, 0 = not interstitial.
	Instl *bool `protobuf:"varint,6,opt,name=instl" json:"instl,omitempty"`
	// Identifier for specific ad placement or ad tag that was used to
	// initiate the auction. This can be useful for debugging of any issues,
	// or for optimization by the buyer.
	Tagid *string `protobuf:"bytes,7,opt,name=tagid" json:"tagid,omitempty"`
	// Minimum bid for this impression expressed in CPM.
	Bidfloor *float64 `protobuf:"fixed64,8,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different
	// from bid currency returned by bidder if this is allowed by the exchange.
	Bidfloorcur *string `protobuf:"bytes,9,opt,name=bidfloorcur,def=USD" json:"bidfloorcur,omitempty"`
	// Indicates the type of browser opened upon clicking the
	// creative in an app, where 0 = embedded, 1 = native.
	// Note that the Safari View Controller in iOS 9.x devices is considered
	// a native browser for purposes of this attribute.
	Clickbrowser *bool `protobuf:"varint,16,opt,name=clickbrowser" json:"clickbrowser,omitempty"`
	// Flag to indicate if the impression requires secure HTTPS URL creative
	// assets and markup, where 0 = non-secure, 1 = secure.  If omitted,
	// the secure state is unknown, but non-secure HTTP support can be assumed.
	Secure *bool `protobuf:"varint,12,opt,name=secure" json:"secure,omitempty"`
	// Array of exchange-specific names of supported iframe busters.
	Iframebuster []string `protobuf:"bytes,10,rep,name=iframebuster" json:"iframebuster,omitempty"`
	// A Pmp object (Section 3.2.17) containing any private marketplace deals
	// in effect for this impression.
	Pmp *BidRequest_Imp_Pmp `protobuf:"bytes,11,opt,name=pmp" json:"pmp,omitempty"`
	// A Native object (Section 3.2.5); required if this impression is
	// offered as a native ad opportunity.
	Native *BidRequest_Imp_Native `protobuf:"bytes,13,opt,name=native" json:"native,omitempty"`
	// Advisory as to the number of seconds that may elapse
	// between the auction and the actual impression.
	Exp *int32 `protobuf:"varint,14,opt,name=exp" json:"exp,omitempty"`
	// An array of Metric object (Section 3.2.5).
	Metric []*BidRequest_Imp_Metric `protobuf:"bytes,17,rep,name=metric" json:"metric,omitempty"`
}

// Default values for BidRequest_Imp fields.
const (
	Default_BidRequest_Imp_Bidfloor    = float64(0)
	Default_BidRequest_Imp_Bidfloorcur = string("USD")
)

func (x *BidRequest_Imp) Reset() {
	*x = BidRequest_Imp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp) ProtoMessage() {}

func (x *BidRequest_Imp) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1}
}

var extRange_BidRequest_Imp = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp
}

func (x *BidRequest_Imp) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Imp) GetBanner() *BidRequest_Imp_Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *BidRequest_Imp) GetVideo() *BidRequest_Imp_Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *BidRequest_Imp) GetAudio() *BidRequest_Imp_Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *BidRequest_Imp) GetDisplaymanager() string {
	if x != nil && x.Displaymanager != nil {
		return *x.Displaymanager
	}
	return ""
}

func (x *BidRequest_Imp) GetDisplaymanagerver() string {
	if x != nil && x.Displaymanagerver != nil {
		return *x.Displaymanagerver
	}
	return ""
}

func (x *BidRequest_Imp) GetInstl() bool {
	if x != nil && x.Instl != nil {
		return *x.Instl
	}
	return false
}

func (x *BidRequest_Imp) GetTagid() string {
	if x != nil && x.Tagid != nil {
		return *x.Tagid
	}
	return ""
}

func (x *BidRequest_Imp) GetBidfloor() float64 {
	if x != nil && x.Bidfloor != nil {
		return *x.Bidfloor
	}
	return Default_BidRequest_Imp_Bidfloor
}

func (x *BidRequest_Imp) GetBidfloorcur() string {
	if x != nil && x.Bidfloorcur != nil {
		return *x.Bidfloorcur
	}
	return Default_BidRequest_Imp_Bidfloorcur
}

func (x *BidRequest_Imp) GetClickbrowser() bool {
	if x != nil && x.Clickbrowser != nil {
		return *x.Clickbrowser
	}
	return false
}

func (x *BidRequest_Imp) GetSecure() bool {
	if x != nil && x.Secure != nil {
		return *x.Secure
	}
	return false
}

func (x *BidRequest_Imp) GetIframebuster() []string {
	if x != nil {
		return x.Iframebuster
	}
	return nil
}

func (x *BidRequest_Imp) GetPmp() *BidRequest_Imp_Pmp {
	if x != nil {
		return x.Pmp
	}
	return nil
}

func (x *BidRequest_Imp) GetNative() *BidRequest_Imp_Native {
	if x != nil {
		return x.Native
	}
	return nil
}

func (x *BidRequest_Imp) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *BidRequest_Imp) GetMetric() []*BidRequest_Imp_Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

// OpenRTB 2.0: This object should be included if the ad supported content
// is a website as opposed to a non-browser application. A bid request must
// not contain both a Site and an App object. At a minimum, it is useful to
// provide a site ID or page URL, but this is not strictly required.
type BidRequest_Site struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Site ID on the exchange.
	// RECOMMENDED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Site name (may be masked at publisher's request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Domain of the site, used for advertiser side blocking.
	// For example, "foo.com".
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Array of IAB content categories of the site.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	// Array of IAB content categories that describe the current section
	// of the site.
	// See enum ContentCategory.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	// Array of IAB content categories that describe the current page or view
	// of the site.
	// See enum ContentCategory.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	// URL of the page where the impression will be shown.
	Page *string `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
	// Indicates if the site has a privacy policy, where 0 = no, 1 = yes.
	Privacypolicy *bool `protobuf:"varint,8,opt,name=privacypolicy" json:"privacypolicy,omitempty"`
	// Referrer URL that caused navigation to the current page.
	Ref *string `protobuf:"bytes,9,opt,name=ref" json:"ref,omitempty"`
	// Search string that caused navigation to the current page.
	Search *string `protobuf:"bytes,10,opt,name=search" json:"search,omitempty"`
	// Details about the Publisher (Section 3.2.8) of the site.
	Publisher *BidRequest_Publisher `protobuf:"bytes,11,opt,name=publisher" json:"publisher,omitempty"`
	// Details about the Content (Section 3.2.9) within the site.
	Content *BidRequest_Content `protobuf:"bytes,12,opt,name=content" json:"content,omitempty"`
	// Comma separated list of keywords about this site.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	Keywords *string `protobuf:"bytes,13,opt,name=keywords" json:"keywords,omitempty"`
	// Indicates if the site has been programmed to optimize layout
	// when viewed on mobile devices, where 0 = no, 1 = yes.
	Mobile *bool `protobuf:"varint,15,opt,name=mobile" json:"mobile,omitempty"`
}

func (x *BidRequest_Site) Reset() {
	*x = BidRequest_Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Site) ProtoMessage() {}

func (x *BidRequest_Site) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Site.ProtoReflect.Descriptor instead.
func (*BidRequest_Site) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 2}
}

var extRange_BidRequest_Site = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Site.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Site) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Site
}

func (x *BidRequest_Site) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Site) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Site) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *BidRequest_Site) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_Site) GetSectioncat() []string {
	if x != nil {
		return x.Sectioncat
	}
	return nil
}

func (x *BidRequest_Site) GetPagecat() []string {
	if x != nil {
		return x.Pagecat
	}
	return nil
}

func (x *BidRequest_Site) GetPage() string {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return ""
}

func (x *BidRequest_Site) GetPrivacypolicy() bool {
	if x != nil && x.Privacypolicy != nil {
		return *x.Privacypolicy
	}
	return false
}

func (x *BidRequest_Site) GetRef() string {
	if x != nil && x.Ref != nil {
		return *x.Ref
	}
	return ""
}

func (x *BidRequest_Site) GetSearch() string {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return ""
}

func (x *BidRequest_Site) GetPublisher() *BidRequest_Publisher {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *BidRequest_Site) GetContent() *BidRequest_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *BidRequest_Site) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *BidRequest_Site) GetMobile() bool {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return false
}

// OpenRTB 2.0: This object should be included if the ad supported content
// is a non-browser application (typically in mobile) as opposed to a website.
// A bid request must not contain both an App and a Site object.
// At a minimum, it is useful to provide an App ID or bundle,
// but this is not strictly required.
type BidRequest_App struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Application ID on the exchange.
	// RECOMMENDED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Application name (may be aliased at publisher's request). App names for
	// SDK-less requests (mostly from connected TVs) can be provided by the
	// publisher directly in the request.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Domain of the application. For example, "mygame.foo.com".
	Domain *string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	// Array of IAB content categories of the app.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,4,rep,name=cat" json:"cat,omitempty"`
	// Array of IAB content categories that describe the current section
	// of the app.
	// See enum ContentCategory.
	Sectioncat []string `protobuf:"bytes,5,rep,name=sectioncat" json:"sectioncat,omitempty"`
	// Array of IAB content categories that describe the current page or view
	// of the app.
	// See enum ContentCategory.
	Pagecat []string `protobuf:"bytes,6,rep,name=pagecat" json:"pagecat,omitempty"`
	// Application version.
	Ver *string `protobuf:"bytes,7,opt,name=ver" json:"ver,omitempty"`
	// A platform-specific application identifier intended to be
	// unique to the app and independent of the exchange. On Android,
	// this should be a bundle or package name (e.g., com.foo.mygame).
	// On iOS, it is a numeric ID. For SDK-less requests (mostly from connected
	// TVs), it can be provided by the publisher directly in the request.
	Bundle *string `protobuf:"bytes,8,opt,name=bundle" json:"bundle,omitempty"`
	// Indicates if the app has a privacy policy, where 0 = no, 1 = yes.
	Privacypolicy *bool `protobuf:"varint,9,opt,name=privacypolicy" json:"privacypolicy,omitempty"`
	// 0 = app is free, 1 = the app is a paid version.
	Paid *bool `protobuf:"varint,10,opt,name=paid" json:"paid,omitempty"`
	// Details about the Publisher (Section 3.2.8) of the app.
	Publisher *BidRequest_Publisher `protobuf:"bytes,11,opt,name=publisher" json:"publisher,omitempty"`
	// Details about the Content (Section 3.2.9) within the app.
	Content *BidRequest_Content `protobuf:"bytes,12,opt,name=content" json:"content,omitempty"`
	// Comma separated list of keywords about the app.
	Keywords *string `protobuf:"bytes,13,opt,name=keywords" json:"keywords,omitempty"`
	// App store URL for an installed app; for QAG 1.5 compliance.
	Storeurl *string `protobuf:"bytes,16,opt,name=storeurl" json:"storeurl,omitempty"`
}

func (x *BidRequest_App) Reset() {
	*x = BidRequest_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_App) ProtoMessage() {}

func (x *BidRequest_App) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_App.ProtoReflect.Descriptor instead.
func (*BidRequest_App) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 3}
}

var extRange_BidRequest_App = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_App.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_App) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_App
}

func (x *BidRequest_App) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_App) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_App) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

func (x *BidRequest_App) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_App) GetSectioncat() []string {
	if x != nil {
		return x.Sectioncat
	}
	return nil
}

func (x *BidRequest_App) GetPagecat() []string {
	if x != nil {
		return x.Pagecat
	}
	return nil
}

func (x *BidRequest_App) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *BidRequest_App) GetBundle() string {
	if x != nil && x.Bundle != nil {
		return *x.Bundle
	}
	return ""
}

func (x *BidRequest_App) GetPrivacypolicy() bool {
	if x != nil && x.Privacypolicy != nil {
		return *x.Privacypolicy
	}
	return false
}

func (x *BidRequest_App) GetPaid() bool {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return false
}

func (x *BidRequest_App) GetPublisher() *BidRequest_Publisher {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *BidRequest_App) GetContent() *BidRequest_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *BidRequest_App) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *BidRequest_App) GetStoreurl() string {
	if x != nil && x.Storeurl != nil {
		return *x.Storeurl
	}
	return ""
}

// OpenRTB 2.0: This object describes the publisher of the media in which
// the ad will be displayed. The publisher is typically the seller
// in an OpenRTB transaction.
type BidRequest_Publisher struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Exchange-specific publisher ID.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Publisher name (may be aliased at publisher's request).
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of IAB content categories that describe the publisher.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	// Highest level domain of the publisher (e.g., "publisher.com").
	Domain *string `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
}

func (x *BidRequest_Publisher) Reset() {
	*x = BidRequest_Publisher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Publisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Publisher) ProtoMessage() {}

func (x *BidRequest_Publisher) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Publisher.ProtoReflect.Descriptor instead.
func (*BidRequest_Publisher) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 4}
}

var extRange_BidRequest_Publisher = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Publisher.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Publisher) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Publisher
}

func (x *BidRequest_Publisher) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Publisher) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Publisher) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_Publisher) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

// OpenRTB 2.0: This object describes the content in which the impression
// will appear, which may be syndicated or non-syndicated content.
// This object may be useful when syndicated content contains impressions and
// does not necessarily match the publisher's general content.
// The exchange might or might not have knowledge of the page where the
// content is running, as a result of the syndication method.
// For example might be a video impression embedded in an iframe on an
// unknown web property or device.
type BidRequest_Content struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// ID uniquely identifying the content.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Content episode number (typically applies to video content).
	Episode *int32 `protobuf:"varint,2,opt,name=episode" json:"episode,omitempty"`
	// Content title.
	// Video Examples: "Search Committee" (television), "A New Hope" (movie),
	// or "Endgame" (made for web).
	// Non-Video Example: "Why an Antarctic Glacier Is Melting So Quickly"
	// (Time magazine article).
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// Content series.
	// Video Examples: "The Office" (television), "Star Wars" (movie),
	// or "Arby 'N' The Chief" (made for web).
	// Non-Video Example: "Ecocentric" (Time Magazine blog).
	Series *string `protobuf:"bytes,4,opt,name=series" json:"series,omitempty"`
	// Content season; typically for video content (e.g., "Season 3").
	Season *string `protobuf:"bytes,5,opt,name=season" json:"season,omitempty"`
	// Artist credited with the content.
	Artist *string `protobuf:"bytes,21,opt,name=artist" json:"artist,omitempty"`
	// Genre that best describes the content (e.g., rock, pop, etc).
	Genre *string `protobuf:"bytes,22,opt,name=genre" json:"genre,omitempty"`
	// Album to which the content belongs; typically for audio.
	Album *string `protobuf:"bytes,23,opt,name=album" json:"album,omitempty"`
	// International Standard Recording Code conforming to ISO-3901.
	Isrc *string `protobuf:"bytes,24,opt,name=isrc" json:"isrc,omitempty"`
	// URL of the content, for buy-side contextualization or review.
	Url *string `protobuf:"bytes,6,opt,name=url" json:"url,omitempty"`
	// Array of IAB content categories that describe the content.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,7,rep,name=cat" json:"cat,omitempty"`
	// Production quality.
	Prodq *ProductionQuality `protobuf:"varint,25,opt,name=prodq,enum=com.google.openrtb.ProductionQuality" json:"prodq,omitempty"`
	// NOTE: Deprecated in favor of prodq.
	// Video quality per IAB's classification.
	//
	// Deprecated: Do not use.
	Videoquality *ProductionQuality `protobuf:"varint,8,opt,name=videoquality,enum=com.google.openrtb.ProductionQuality" json:"videoquality,omitempty"`
	// Comma separated list of keywords describing the content.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	Keywords *string `protobuf:"bytes,9,opt,name=keywords" json:"keywords,omitempty"`
	// Content rating (e.g., MPAA).
	Contentrating *string `protobuf:"bytes,10,opt,name=contentrating" json:"contentrating,omitempty"`
	// User rating of the content (e.g., number of stars, likes, etc.).
	Userrating *string `protobuf:"bytes,11,opt,name=userrating" json:"userrating,omitempty"`
	// Type of content (game, video, text, etc.).
	Context *ContentContext `protobuf:"varint,20,opt,name=context,enum=com.google.openrtb.ContentContext" json:"context,omitempty"`
	// OpenRTB <= 2.2 compatibility; use context for 2.3+.
	Context_22 *string `protobuf:"bytes,12,opt,name=context_22,json=context22" json:"context_22,omitempty"`
	// 0 = not live, 1 = content is live (e.g., stream, live blog).
	Livestream *bool `protobuf:"varint,13,opt,name=livestream" json:"livestream,omitempty"`
	// 0 = indirect, 1 = direct.
	Sourcerelationship *bool `protobuf:"varint,14,opt,name=sourcerelationship" json:"sourcerelationship,omitempty"`
	// Details about the content Producer (Section 3.2.10).
	Producer *BidRequest_Producer `protobuf:"bytes,15,opt,name=producer" json:"producer,omitempty"`
	// Length of content in seconds; appropriate for video or audio.
	Len *int32 `protobuf:"varint,16,opt,name=len" json:"len,omitempty"`
	// Media rating per QAG guidelines.
	Qagmediarating *QAGMediaRating `protobuf:"varint,17,opt,name=qagmediarating,enum=com.google.openrtb.QAGMediaRating" json:"qagmediarating,omitempty"`
	// Indicator of whether or not the content is embeddable (e.g., an
	// embeddable video player), where 0 = no, 1 = yes.
	Embeddable *bool `protobuf:"varint,18,opt,name=embeddable" json:"embeddable,omitempty"`
	// Content language using ISO-639-1-alpha-2.
	Language *string `protobuf:"bytes,19,opt,name=language" json:"language,omitempty"`
}

func (x *BidRequest_Content) Reset() {
	*x = BidRequest_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Content) ProtoMessage() {}

func (x *BidRequest_Content) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Content.ProtoReflect.Descriptor instead.
func (*BidRequest_Content) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 5}
}

var extRange_BidRequest_Content = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Content.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Content) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Content
}

func (x *BidRequest_Content) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Content) GetEpisode() int32 {
	if x != nil && x.Episode != nil {
		return *x.Episode
	}
	return 0
}

func (x *BidRequest_Content) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *BidRequest_Content) GetSeries() string {
	if x != nil && x.Series != nil {
		return *x.Series
	}
	return ""
}

func (x *BidRequest_Content) GetSeason() string {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return ""
}

func (x *BidRequest_Content) GetArtist() string {
	if x != nil && x.Artist != nil {
		return *x.Artist
	}
	return ""
}

func (x *BidRequest_Content) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

func (x *BidRequest_Content) GetAlbum() string {
	if x != nil && x.Album != nil {
		return *x.Album
	}
	return ""
}

func (x *BidRequest_Content) GetIsrc() string {
	if x != nil && x.Isrc != nil {
		return *x.Isrc
	}
	return ""
}

func (x *BidRequest_Content) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *BidRequest_Content) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_Content) GetProdq() ProductionQuality {
	if x != nil && x.Prodq != nil {
		return *x.Prodq
	}
	return ProductionQuality_QUALITY_UNKNOWN
}

// Deprecated: Do not use.
func (x *BidRequest_Content) GetVideoquality() ProductionQuality {
	if x != nil && x.Videoquality != nil {
		return *x.Videoquality
	}
	return ProductionQuality_QUALITY_UNKNOWN
}

func (x *BidRequest_Content) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *BidRequest_Content) GetContentrating() string {
	if x != nil && x.Contentrating != nil {
		return *x.Contentrating
	}
	return ""
}

func (x *BidRequest_Content) GetUserrating() string {
	if x != nil && x.Userrating != nil {
		return *x.Userrating
	}
	return ""
}

func (x *BidRequest_Content) GetContext() ContentContext {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ContentContext_VIDEO
}

func (x *BidRequest_Content) GetContext_22() string {
	if x != nil && x.Context_22 != nil {
		return *x.Context_22
	}
	return ""
}

func (x *BidRequest_Content) GetLivestream() bool {
	if x != nil && x.Livestream != nil {
		return *x.Livestream
	}
	return false
}

func (x *BidRequest_Content) GetSourcerelationship() bool {
	if x != nil && x.Sourcerelationship != nil {
		return *x.Sourcerelationship
	}
	return false
}

func (x *BidRequest_Content) GetProducer() *BidRequest_Producer {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *BidRequest_Content) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *BidRequest_Content) GetQagmediarating() QAGMediaRating {
	if x != nil && x.Qagmediarating != nil {
		return *x.Qagmediarating
	}
	return QAGMediaRating_ALL_AUDIENCES
}

func (x *BidRequest_Content) GetEmbeddable() bool {
	if x != nil && x.Embeddable != nil {
		return *x.Embeddable
	}
	return false
}

func (x *BidRequest_Content) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

// OpenRTB 2.0: This object defines the producer of the content in which
// the ad will be shown. This is particularly useful when the content is
// syndicated and may be distributed through different publishers and thus
// when the producer and publisher are not necessarily the same entity.
type BidRequest_Producer struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Content producer or originator ID. Useful if content is syndicated,
	// and may be posted on a site using embed tags.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Content producer or originator name (e.g., "Warner Bros").
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of IAB content categories that describe the content producer.
	// See enum ContentCategory.
	Cat []string `protobuf:"bytes,3,rep,name=cat" json:"cat,omitempty"`
	// Highest level domain of the content producer (e.g., "producer.com").
	Domain *string `protobuf:"bytes,4,opt,name=domain" json:"domain,omitempty"`
}

func (x *BidRequest_Producer) Reset() {
	*x = BidRequest_Producer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Producer) ProtoMessage() {}

func (x *BidRequest_Producer) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Producer.ProtoReflect.Descriptor instead.
func (*BidRequest_Producer) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 6}
}

var extRange_BidRequest_Producer = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Producer.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Producer) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Producer
}

func (x *BidRequest_Producer) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Producer) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Producer) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidRequest_Producer) GetDomain() string {
	if x != nil && x.Domain != nil {
		return *x.Domain
	}
	return ""
}

// OpenRTB 2.0: This object provides information pertaining to the device
// through which the user is interacting. Device information includes its
// hardware, platform, location, and carrier data. The device can refer to a
// mobile handset, a desktop computer, set top box, or other digital device.
type BidRequest_Device struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Standard "Do Not Track" flag as set in the header by the browser,
	// where 0 = tracking is unrestricted, 1 = do not track.
	// RECOMMENDED by the OpenRTB specification.
	Dnt *bool `protobuf:"varint,1,opt,name=dnt" json:"dnt,omitempty"`
	// Browser user agent string. Certain data may be redacted or replaced.
	// RECOMMENDED by the OpenRTB specification.
	Ua *string `protobuf:"bytes,2,opt,name=ua" json:"ua,omitempty"`
	// IPv4 address closest to device.
	// RECOMMENDED by the OpenRTB specification.
	Ip *string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	// Location of the device assumed to be the user's current location defined
	// by a Geo object (Section 3.2.12).
	// RECOMMENDED by the OpenRTB specification.
	Geo *BidRequest_Geo `protobuf:"bytes,4,opt,name=geo" json:"geo,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via SHA1.
	Didsha1 *string `protobuf:"bytes,5,opt,name=didsha1" json:"didsha1,omitempty"`
	// Hardware device ID (e.g., IMEI); hashed via MD5.
	Didmd5 *string `protobuf:"bytes,6,opt,name=didmd5" json:"didmd5,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via SHA1.
	Dpidsha1 *string `protobuf:"bytes,7,opt,name=dpidsha1" json:"dpidsha1,omitempty"`
	// Platform device ID (e.g., Android ID); hashed via MD5.
	Dpidmd5 *string `protobuf:"bytes,8,opt,name=dpidmd5" json:"dpidmd5,omitempty"`
	// IPv6 address closest to device.
	Ipv6 *string `protobuf:"bytes,9,opt,name=ipv6" json:"ipv6,omitempty"`
	// Carrier or ISP (e.g., "VERIZON") using exchange curated string
	// names which should be published to bidders a priori.
	Carrier *string `protobuf:"bytes,10,opt,name=carrier" json:"carrier,omitempty"`
	// Browser language using ISO-639-1-alpha-2.
	Language *string `protobuf:"bytes,11,opt,name=language" json:"language,omitempty"`
	// Device make (e.g., "Apple").
	Make *string `protobuf:"bytes,12,opt,name=make" json:"make,omitempty"`
	// Device model (e.g., "iPhone").
	Model *string `protobuf:"bytes,13,opt,name=model" json:"model,omitempty"`
	// Device operating system (e.g., "iOS").
	Os *string `protobuf:"bytes,14,opt,name=os" json:"os,omitempty"`
	// Device operating system version (e.g., "3.1.2").
	Osv *string `protobuf:"bytes,15,opt,name=osv" json:"osv,omitempty"`
	// Hardware version of the device (e.g., "5S" for iPhone 5S).
	Hwv *string `protobuf:"bytes,24,opt,name=hwv" json:"hwv,omitempty"`
	// Physical width of the screen in pixels.
	W *int32 `protobuf:"varint,25,opt,name=w" json:"w,omitempty"`
	// Physical height of the screen in pixels.
	H *int32 `protobuf:"varint,26,opt,name=h" json:"h,omitempty"`
	// Screen size as pixels per linear inch.
	Ppi *int32 `protobuf:"varint,27,opt,name=ppi" json:"ppi,omitempty"`
	// The ratio of physical pixels to device independent pixels.
	Pxratio *float64 `protobuf:"fixed64,28,opt,name=pxratio" json:"pxratio,omitempty"`
	// Support for JavaScript, where 0 = no, 1 = yes.
	Js *bool `protobuf:"varint,16,opt,name=js" json:"js,omitempty"`
	// Indicates if the geolocation API will be available to JavaScript
	// code running in the banner, where 0 = no, 1 = yes.
	Geofetch *bool `protobuf:"varint,29,opt,name=geofetch" json:"geofetch,omitempty"`
	// Network connection type.
	Connectiontype *ConnectionType `protobuf:"varint,17,opt,name=connectiontype,enum=com.google.openrtb.ConnectionType" json:"connectiontype,omitempty"`
	// The general type of device.
	Devicetype *DeviceType `protobuf:"varint,18,opt,name=devicetype,enum=com.google.openrtb.DeviceType" json:"devicetype,omitempty"`
	// Version of Flash supported by the browser.
	Flashver *string `protobuf:"bytes,19,opt,name=flashver" json:"flashver,omitempty"`
	// ID sanctioned for advertiser use in the clear (i.e., not hashed).
	Ifa *string `protobuf:"bytes,20,opt,name=ifa" json:"ifa,omitempty"`
	// MAC address of the device; hashed via SHA1.
	Macsha1 *string `protobuf:"bytes,21,opt,name=macsha1" json:"macsha1,omitempty"`
	// MAC address of the device; hashed via MD5.
	Macmd5 *string `protobuf:"bytes,22,opt,name=macmd5" json:"macmd5,omitempty"`
	// "Limit Ad Tracking" signal commercially endorsed (e.g., iOS, Android),
	// where 0 = tracking is unrestricted, 1 = tracking must be limited per
	// commercial guidelines.
	// RECOMMENDED by the OpenRTB specification.
	Lmt *bool `protobuf:"varint,23,opt,name=lmt" json:"lmt,omitempty"`
	// Mobile carrier as the concatenated MCC-MNC code (e.g.,
	// "310-005" identifies Verizon Wireless CDMA in the USA).
	// Refer to https://en.wikipedia.org/wiki/Mobile_country_code
	// for further examples. Note that the dash between the MCC
	// and MNC parts is required to remove parsing ambiguity.
	Mccmnc *string `protobuf:"bytes,30,opt,name=mccmnc" json:"mccmnc,omitempty"`
}

func (x *BidRequest_Device) Reset() {
	*x = BidRequest_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Device) ProtoMessage() {}

func (x *BidRequest_Device) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Device.ProtoReflect.Descriptor instead.
func (*BidRequest_Device) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 7}
}

var extRange_BidRequest_Device = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Device.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Device) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Device
}

func (x *BidRequest_Device) GetDnt() bool {
	if x != nil && x.Dnt != nil {
		return *x.Dnt
	}
	return false
}

func (x *BidRequest_Device) GetUa() string {
	if x != nil && x.Ua != nil {
		return *x.Ua
	}
	return ""
}

func (x *BidRequest_Device) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *BidRequest_Device) GetGeo() *BidRequest_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *BidRequest_Device) GetDidsha1() string {
	if x != nil && x.Didsha1 != nil {
		return *x.Didsha1
	}
	return ""
}

func (x *BidRequest_Device) GetDidmd5() string {
	if x != nil && x.Didmd5 != nil {
		return *x.Didmd5
	}
	return ""
}

func (x *BidRequest_Device) GetDpidsha1() string {
	if x != nil && x.Dpidsha1 != nil {
		return *x.Dpidsha1
	}
	return ""
}

func (x *BidRequest_Device) GetDpidmd5() string {
	if x != nil && x.Dpidmd5 != nil {
		return *x.Dpidmd5
	}
	return ""
}

func (x *BidRequest_Device) GetIpv6() string {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return ""
}

func (x *BidRequest_Device) GetCarrier() string {
	if x != nil && x.Carrier != nil {
		return *x.Carrier
	}
	return ""
}

func (x *BidRequest_Device) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *BidRequest_Device) GetMake() string {
	if x != nil && x.Make != nil {
		return *x.Make
	}
	return ""
}

func (x *BidRequest_Device) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *BidRequest_Device) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *BidRequest_Device) GetOsv() string {
	if x != nil && x.Osv != nil {
		return *x.Osv
	}
	return ""
}

func (x *BidRequest_Device) GetHwv() string {
	if x != nil && x.Hwv != nil {
		return *x.Hwv
	}
	return ""
}

func (x *BidRequest_Device) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidRequest_Device) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidRequest_Device) GetPpi() int32 {
	if x != nil && x.Ppi != nil {
		return *x.Ppi
	}
	return 0
}

func (x *BidRequest_Device) GetPxratio() float64 {
	if x != nil && x.Pxratio != nil {
		return *x.Pxratio
	}
	return 0
}

func (x *BidRequest_Device) GetJs() bool {
	if x != nil && x.Js != nil {
		return *x.Js
	}
	return false
}

func (x *BidRequest_Device) GetGeofetch() bool {
	if x != nil && x.Geofetch != nil {
		return *x.Geofetch
	}
	return false
}

func (x *BidRequest_Device) GetConnectiontype() ConnectionType {
	if x != nil && x.Connectiontype != nil {
		return *x.Connectiontype
	}
	return ConnectionType_CONNECTION_UNKNOWN
}

func (x *BidRequest_Device) GetDevicetype() DeviceType {
	if x != nil && x.Devicetype != nil {
		return *x.Devicetype
	}
	return DeviceType_MOBILE
}

func (x *BidRequest_Device) GetFlashver() string {
	if x != nil && x.Flashver != nil {
		return *x.Flashver
	}
	return ""
}

func (x *BidRequest_Device) GetIfa() string {
	if x != nil && x.Ifa != nil {
		return *x.Ifa
	}
	return ""
}

func (x *BidRequest_Device) GetMacsha1() string {
	if x != nil && x.Macsha1 != nil {
		return *x.Macsha1
	}
	return ""
}

func (x *BidRequest_Device) GetMacmd5() string {
	if x != nil && x.Macmd5 != nil {
		return *x.Macmd5
	}
	return ""
}

func (x *BidRequest_Device) GetLmt() bool {
	if x != nil && x.Lmt != nil {
		return *x.Lmt
	}
	return false
}

func (x *BidRequest_Device) GetMccmnc() string {
	if x != nil && x.Mccmnc != nil {
		return *x.Mccmnc
	}
	return ""
}

// OpenRTB 2.0: This object encapsulates various methods for specifying a
// geographic location. When subordinate to a Device object, it indicates the
// location of the device which can also be interpreted as the user's current
// location. When subordinate to a User object, it indicates the location of
// the user's home base (i.e., not necessarily their current location).
//
// The lat/lon attributes should only be passed if they conform to the
// accuracy depicted in the type attribute. For example, the centroid of a
// geographic region such as postal code should not be passed.
type BidRequest_Geo struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Latitude from -90.0 to +90.0, where negative is south.
	Lat *float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	// Longitude from -180.0 to +180.0, where negative is west.
	Lon *float64 `protobuf:"fixed64,2,opt,name=lon" json:"lon,omitempty"`
	// Country using ISO-3166-1 Alpha-3.
	Country *string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	// Region code using ISO-3166-2; 2-letter state code if USA.
	Region *string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	// Region of a country using FIPS 10-4 notation. While OpenRTB supports
	// this attribute, it has been withdrawn by NIST in 2008.
	Regionfips104 *string `protobuf:"bytes,5,opt,name=regionfips104" json:"regionfips104,omitempty"`
	// Google metro code; similar to but not exactly Nielsen DMAs.
	// See Appendix A for a link to the codes.
	// (http://code.google.com/apis/adwords/docs/appendix/metrocodes.html).
	Metro *string `protobuf:"bytes,6,opt,name=metro" json:"metro,omitempty"`
	// City using United Nations Code for Trade & Transport Locations.
	// See Appendix A for a link to the codes.
	// (http://www.unece.org/cefact/locode/service/location.htm).
	City *string `protobuf:"bytes,7,opt,name=city" json:"city,omitempty"`
	// Zip/postal code.
	Zip *string `protobuf:"bytes,8,opt,name=zip" json:"zip,omitempty"`
	// Source of location data; recommended when passing lat/lon.
	Type *LocationType `protobuf:"varint,9,opt,name=type,enum=com.google.openrtb.LocationType" json:"type,omitempty"`
	// Estimated location accuracy in meters; recommended when lat/lon
	// are specified and derived from a device's location services
	// (i.e., type = 1). Note that this is the accuracy as reported
	// from the device. Consult OS specific documentation
	// (e.g., Android, iOS) for exact interpretation.
	Accuracy *int32 `protobuf:"varint,11,opt,name=accuracy" json:"accuracy,omitempty"`
	// Number of seconds since this geolocation fix was established.
	// Note that devices may cache location data across multiple fetches.
	// Ideally, this value should be from the time the actual fix was taken.
	Lastfix *int32 `protobuf:"varint,12,opt,name=lastfix" json:"lastfix,omitempty"`
	// Service or provider used to determine geolocation from IP
	// address if applicable (i.e., type = 2).
	Ipservice *LocationService `protobuf:"varint,13,opt,name=ipservice,enum=com.google.openrtb.LocationService" json:"ipservice,omitempty"`
	// Local time as the number +/- of minutes from UTC.
	Utcoffset *int32 `protobuf:"varint,10,opt,name=utcoffset" json:"utcoffset,omitempty"`
}

func (x *BidRequest_Geo) Reset() {
	*x = BidRequest_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Geo) ProtoMessage() {}

func (x *BidRequest_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Geo.ProtoReflect.Descriptor instead.
func (*BidRequest_Geo) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 8}
}

var extRange_BidRequest_Geo = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Geo.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Geo) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Geo
}

func (x *BidRequest_Geo) GetLat() float64 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *BidRequest_Geo) GetLon() float64 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *BidRequest_Geo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *BidRequest_Geo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *BidRequest_Geo) GetRegionfips104() string {
	if x != nil && x.Regionfips104 != nil {
		return *x.Regionfips104
	}
	return ""
}

func (x *BidRequest_Geo) GetMetro() string {
	if x != nil && x.Metro != nil {
		return *x.Metro
	}
	return ""
}

func (x *BidRequest_Geo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *BidRequest_Geo) GetZip() string {
	if x != nil && x.Zip != nil {
		return *x.Zip
	}
	return ""
}

func (x *BidRequest_Geo) GetType() LocationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LocationType_GPS_LOCATION
}

func (x *BidRequest_Geo) GetAccuracy() int32 {
	if x != nil && x.Accuracy != nil {
		return *x.Accuracy
	}
	return 0
}

func (x *BidRequest_Geo) GetLastfix() int32 {
	if x != nil && x.Lastfix != nil {
		return *x.Lastfix
	}
	return 0
}

func (x *BidRequest_Geo) GetIpservice() LocationService {
	if x != nil && x.Ipservice != nil {
		return *x.Ipservice
	}
	return LocationService_IP2LOCATION
}

func (x *BidRequest_Geo) GetUtcoffset() int32 {
	if x != nil && x.Utcoffset != nil {
		return *x.Utcoffset
	}
	return 0
}

// OpenRTB 2.0: This object contains information known or derived about
// the human user of the device (i.e., the audience for advertising).
// The user id is an exchange artifact and may be subject to rotation or other
// privacy policies. However, this user ID must be stable long enough to serve
// reasonably as the basis for frequency capping and retargeting.
type BidRequest_User struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Exchange-specific ID for the user. At least one of id or buyeruid
	// is recommended.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Buyer-specific ID for the user as mapped by the exchange for the buyer.
	// At least one of buyeruid or id is recommended.
	Buyeruid *string `protobuf:"bytes,2,opt,name=buyeruid" json:"buyeruid,omitempty"`
	// Year of birth as a 4-digit integer.
	Yob *int32 `protobuf:"varint,3,opt,name=yob" json:"yob,omitempty"`
	// Gender as "M" male, "F" female, "O" Other. (Null indicates unknown)
	Gender *string `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	// Comma separated list of keywords, interests, or intent.
	// Note: OpenRTB 2.2 allowed an array-of-strings as alternate implementation
	// but this was fixed in 2.3+ where it's definitely a single string with CSV
	// content again. Compatibility with some OpenRTB 2.2 exchanges that adopted
	// the alternate representation may require custom handling of the JSON.
	Keywords *string `protobuf:"bytes,5,opt,name=keywords" json:"keywords,omitempty"`
	// Optional feature to pass bidder data set in the exchange's cookie.
	// The string must be in base85 cookie safe characters and be in any format.
	// Proper JSON encoding must be used to include "escaped" quotation marks.
	Customdata *string `protobuf:"bytes,6,opt,name=customdata" json:"customdata,omitempty"`
	// Location of the user's home base defined by a Geo object
	// (Section 3.2.12). This is not necessarily their current location.
	Geo *BidRequest_Geo `protobuf:"bytes,7,opt,name=geo" json:"geo,omitempty"`
	// Additional user data. Each Data object (Section 3.2.14) represents a
	// different data source.
	Data []*BidRequest_Data `protobuf:"bytes,8,rep,name=data" json:"data,omitempty"`
}

func (x *BidRequest_User) Reset() {
	*x = BidRequest_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_User) ProtoMessage() {}

func (x *BidRequest_User) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_User.ProtoReflect.Descriptor instead.
func (*BidRequest_User) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 9}
}

var extRange_BidRequest_User = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_User.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_User) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_User
}

func (x *BidRequest_User) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_User) GetBuyeruid() string {
	if x != nil && x.Buyeruid != nil {
		return *x.Buyeruid
	}
	return ""
}

func (x *BidRequest_User) GetYob() int32 {
	if x != nil && x.Yob != nil {
		return *x.Yob
	}
	return 0
}

func (x *BidRequest_User) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *BidRequest_User) GetKeywords() string {
	if x != nil && x.Keywords != nil {
		return *x.Keywords
	}
	return ""
}

func (x *BidRequest_User) GetCustomdata() string {
	if x != nil && x.Customdata != nil {
		return *x.Customdata
	}
	return ""
}

func (x *BidRequest_User) GetGeo() *BidRequest_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *BidRequest_User) GetData() []*BidRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// OpenRTB 2.0: The data and segment objects together allow additional data
// about the user to be specified. This data may be from multiple sources
// whether from the exchange itself or third party providers as specified by
// the id field. A bid request can mix data objects from multiple providers or
// can have multiple data objects.
// The specific data providers in use should be published by the exchange
// a priori to its bidders.
// This is used to send detected verticals to the buyer.
// For exchange bidding, this is also used to send key
// value pairs from the publisher to the buyer.
// https://support.google.com/admanager/answer/177381
type BidRequest_Data struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Exchange-specific ID for the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Exchange-specific name for the data provider.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Array of Segment (Section 3.2.15) objects that contain the actual
	// data values.
	Segment []*BidRequest_Data_Segment `protobuf:"bytes,3,rep,name=segment" json:"segment,omitempty"`
}

func (x *BidRequest_Data) Reset() {
	*x = BidRequest_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Data) ProtoMessage() {}

func (x *BidRequest_Data) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Data.ProtoReflect.Descriptor instead.
func (*BidRequest_Data) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 10}
}

var extRange_BidRequest_Data = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Data.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Data) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Data
}

func (x *BidRequest_Data) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Data) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Data) GetSegment() []*BidRequest_Data_Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

// OpenRTB 2.2: This object contains any legal, governmental, or industry
// regulations that apply to the request. The coppa flag signals whether
// or not the request falls under the United States Federal Trade Commission's
// regulations for the United States Children's Online Privacy Protection Act
// ("COPPA"). Refer to Section 7.1 for more information.
type BidRequest_Regs struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Flag indicating if this request is subject to the COPPA regulations
	// established by the USA FTC, where 0 = no, 1 = yes.
	Coppa *bool `protobuf:"varint,1,opt,name=coppa" json:"coppa,omitempty"`
}

func (x *BidRequest_Regs) Reset() {
	*x = BidRequest_Regs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Regs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Regs) ProtoMessage() {}

func (x *BidRequest_Regs) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Regs.ProtoReflect.Descriptor instead.
func (*BidRequest_Regs) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 11}
}

var extRange_BidRequest_Regs = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Regs.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Regs) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Regs
}

func (x *BidRequest_Regs) GetCoppa() bool {
	if x != nil && x.Coppa != nil {
		return *x.Coppa
	}
	return false
}

// OpenRTB 2.5: This object is associated with an impression as
// an array of metrics. These metrics can offer insight into
// the impression to assist with decisioning such as average recent
// viewability, click-through rate, etc.  Each metric is identified
// by its type, reports the value of the metric, and optionally
// identifies the source or vendor measuring the value.
type BidRequest_Imp_Metric struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Type of metric being presented using exchange curated string
	// names which should be published to bidders a priori.
	// REQUIRED by the OpenRTB specification.
	Type *string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// Number representing the value of the metric.
	// Probabilities must be in the range 0.0 - 1.0.
	// REQUIRED by the OpenRTB specification.
	Value *float64 `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	// Source of the value using exchange curated string names
	// which should be published to bidders a priori.
	// If the exchange itself is the source versus a third party,
	// "EXCHANGE" is recommended.
	// RECOMMENDED by the OpenRTB specification.
	Vendor *string `protobuf:"bytes,3,opt,name=vendor" json:"vendor,omitempty"`
}

func (x *BidRequest_Imp_Metric) Reset() {
	*x = BidRequest_Imp_Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Metric) ProtoMessage() {}

func (x *BidRequest_Imp_Metric) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Metric.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Metric) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 0}
}

var extRange_BidRequest_Imp_Metric = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Metric.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Metric) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Metric
}

func (x *BidRequest_Imp_Metric) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *BidRequest_Imp_Metric) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *BidRequest_Imp_Metric) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

// OpenRTB 2.0: This object represents the most general type of
// impression.  Although the term "banner" may have very specific meaning
// in other contexts, here it can be many things including a simple static
// image, an expandable ad unit, or even in-banner video (refer to the Video
// object in Section 3.2.4 for the more generalized and full featured video
// ad units). An array of Banner objects can also appear within the Video
// to describe optional companion ads defined in the VAST specification.
//
// The presence of a Banner as a subordinate of the Imp object indicates
// that this impression is offered as a banner type impression.
// At the publisher's discretion, that same impression may also be offered
// as video and/or native by also including as Imp subordinates the Video
// and/or Native objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Banner struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Width in device independent pixels (DIPS).
	// If no format objects are specified, this is an exact width
	// requirement. Otherwise it is a preferred width.
	W *int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// Height in device independent pixels (DIPS).
	// If no format objects are specified, this is an exact height
	// requirement. Otherwise it is a preferred height.
	H *int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// Array of format objects representing the banner sizes permitted.
	// If none are specified, then use of the h and w attributes
	// is highly recommended.
	Format []*BidRequest_Imp_Banner_Format `protobuf:"bytes,15,rep,name=format" json:"format,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Maximum width in device independent pixels (DIPS).
	//
	// Deprecated: Do not use.
	Wmax *int32 `protobuf:"varint,11,opt,name=wmax" json:"wmax,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Maximum height in device independent pixels (DIPS).
	//
	// Deprecated: Do not use.
	Hmax *int32 `protobuf:"varint,12,opt,name=hmax" json:"hmax,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Minimum width in device independent pixels (DIPS).
	//
	// Deprecated: Do not use.
	Wmin *int32 `protobuf:"varint,13,opt,name=wmin" json:"wmin,omitempty"`
	// NOTE: Deprecated in favor of the format array.
	// Minimum height in device independent pixels (DIPS).
	//
	// Deprecated: Do not use.
	Hmin *int32 `protobuf:"varint,14,opt,name=hmin" json:"hmin,omitempty"`
	// Unique identifier for this banner object. Recommended when Banner
	// objects are used with a Video object (Section 3.2.4) to represent
	// an array of companion ads. Values usually start at 1 and increase
	// with each object; should be unique within an impression.
	Id *string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	// Ad position on screen.
	Pos *AdPosition `protobuf:"varint,4,opt,name=pos,enum=com.google.openrtb.AdPosition" json:"pos,omitempty"`
	// Blocked banner ad types.
	Btype []BannerAdType `protobuf:"varint,5,rep,packed,name=btype,enum=com.google.openrtb.BannerAdType" json:"btype,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,6,rep,packed,name=battr,enum=com.google.openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Allowlist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg", "image/gif" and
	// "application/x-shockwave-flash".
	Mimes []string `protobuf:"bytes,7,rep,name=mimes" json:"mimes,omitempty"`
	// Specify if the banner is delivered in the top frame (true)
	// or in an iframe (false).
	Topframe *bool `protobuf:"varint,8,opt,name=topframe" json:"topframe,omitempty"`
	// Directions in which the banner may expand.
	Expdir []ExpandableDirection `protobuf:"varint,9,rep,packed,name=expdir,enum=com.google.openrtb.ExpandableDirection" json:"expdir,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,10,rep,packed,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Relevant only for Banner objects used with a Video object
	// (Section 3.2.7) in an array of companion ads. Indicates the
	// companion banner rendering mode relative to the associated
	// video, where 0 = concurrent, 1 = end-card.
	Vcm *bool `protobuf:"varint,16,opt,name=vcm" json:"vcm,omitempty"`
}

func (x *BidRequest_Imp_Banner) Reset() {
	*x = BidRequest_Imp_Banner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Banner) ProtoMessage() {}

func (x *BidRequest_Imp_Banner) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Banner.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Banner) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 1}
}

var extRange_BidRequest_Imp_Banner = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Banner.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Banner) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Banner
}

func (x *BidRequest_Imp_Banner) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidRequest_Imp_Banner) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidRequest_Imp_Banner) GetFormat() []*BidRequest_Imp_Banner_Format {
	if x != nil {
		return x.Format
	}
	return nil
}

// Deprecated: Do not use.
func (x *BidRequest_Imp_Banner) GetWmax() int32 {
	if x != nil && x.Wmax != nil {
		return *x.Wmax
	}
	return 0
}

// Deprecated: Do not use.
func (x *BidRequest_Imp_Banner) GetHmax() int32 {
	if x != nil && x.Hmax != nil {
		return *x.Hmax
	}
	return 0
}

// Deprecated: Do not use.
func (x *BidRequest_Imp_Banner) GetWmin() int32 {
	if x != nil && x.Wmin != nil {
		return *x.Wmin
	}
	return 0
}

// Deprecated: Do not use.
func (x *BidRequest_Imp_Banner) GetHmin() int32 {
	if x != nil && x.Hmin != nil {
		return *x.Hmin
	}
	return 0
}

func (x *BidRequest_Imp_Banner) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Imp_Banner) GetPos() AdPosition {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return AdPosition_UNKNOWN
}

func (x *BidRequest_Imp_Banner) GetBtype() []BannerAdType {
	if x != nil {
		return x.Btype
	}
	return nil
}

func (x *BidRequest_Imp_Banner) GetBattr() []CreativeAttribute {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *BidRequest_Imp_Banner) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *BidRequest_Imp_Banner) GetTopframe() bool {
	if x != nil && x.Topframe != nil {
		return *x.Topframe
	}
	return false
}

func (x *BidRequest_Imp_Banner) GetExpdir() []ExpandableDirection {
	if x != nil {
		return x.Expdir
	}
	return nil
}

func (x *BidRequest_Imp_Banner) GetApi() []APIFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequest_Imp_Banner) GetVcm() bool {
	if x != nil && x.Vcm != nil {
		return *x.Vcm
	}
	return false
}

// OpenRTB 2.0: This object represents an in-stream video impression.
// Many of the fields are non-essential for minimally viable transactions,
// but are included to offer fine control when needed. Video in OpenRTB
// generally assumes compliance with the VAST standard. As such, the notion
// of companion ads is supported by optionally including an array of Banner
// objects (refer to the Banner object in Section 3.2.3) that define these
// companion ads.
//
// The presence of a Video as a subordinate of the Imp object indicates
// that this impression is offered as a video type impression. At the
// publisher's discretion, that same impression may also be offered as
// banner and/or native by also including as Imp subordinates the Banner
// and/or Native objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Video struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Allowlist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg", "image/gif" and
	// "application/x-shockwave-flash".
	// REQUIRED by the OpenRTB specification: at least 1 element.
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	// Indicates if the impression must be linear, nonlinear, etc.
	// If none specified, assume all are allowed.
	Linearity *VideoLinearity `protobuf:"varint,2,opt,name=linearity,enum=com.google.openrtb.VideoLinearity" json:"linearity,omitempty"`
	// Minimum video ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Minduration *int32 `protobuf:"varint,3,opt,name=minduration" json:"minduration,omitempty"`
	// Maximum video ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Maxduration *int32 `protobuf:"varint,4,opt,name=maxduration" json:"maxduration,omitempty"`
	// Deprecated; use protocols.
	//
	// Deprecated: Do not use.
	Protocol *Protocol `protobuf:"varint,5,opt,name=protocol,enum=com.google.openrtb.Protocol" json:"protocol,omitempty"`
	// Array of supported video bid response protocols.
	// At least one supported protocol must be specified.
	Protocols []Protocol `protobuf:"varint,21,rep,packed,name=protocols,enum=com.google.openrtb.Protocol" json:"protocols,omitempty"`
	// Width of the video player in device independent pixels (DIPS).
	// RECOMMENDED by the OpenRTB specification.
	W *int32 `protobuf:"varint,6,opt,name=w" json:"w,omitempty"`
	// Height of the video player in device independent pixels (DIPS).
	// RECOMMENDED by the OpenRTB specification.
	H *int32 `protobuf:"varint,7,opt,name=h" json:"h,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or
	// post-roll ad placements.
	// Refer to enum StartDelay for generic values.
	// RECOMMENDED by the OpenRTB specification.
	Startdelay *int32 `protobuf:"varint,8,opt,name=startdelay" json:"startdelay,omitempty"`
	// Indicates if the player will allow the video to be skipped,
	// where 0 = no, 1 = yes.
	// If a bidder sends markup/creative that is itself skippable, the
	// Bid object should include the attr array with an element of
	// 16 indicating skippable video.
	Skip *bool `protobuf:"varint,23,opt,name=skip" json:"skip,omitempty"`
	// Videos of total duration greater than this number of seconds
	// can be skippable; only applicable if the ad is skippable.
	Skipmin *int32 `protobuf:"varint,24,opt,name=skipmin" json:"skipmin,omitempty"`
	// Number of seconds a video must play before skipping is
	// enabled; only applicable if the ad is skippable.
	Skipafter *int32 `protobuf:"varint,25,opt,name=skipafter" json:"skipafter,omitempty"`
	// If multiple ad impressions are offered in the same bid request,
	// the sequence number will allow for the coordinated delivery of
	// multiple creatives.
	Sequence *int32 `protobuf:"varint,9,opt,name=sequence,def=1" json:"sequence,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,10,rep,packed,name=battr,enum=com.google.openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed,
	// and there is no time limit imposed. If greater than 0, then the value
	// represents the number of seconds of extended play supported beyond
	// the maxduration value.
	Maxextended *int32 `protobuf:"varint,11,opt,name=maxextended" json:"maxextended,omitempty"`
	// Minimum bit rate in Kbps.
	Minbitrate *int32 `protobuf:"varint,12,opt,name=minbitrate" json:"minbitrate,omitempty"`
	// Maximum bit rate in Kbps.
	Maxbitrate *int32 `protobuf:"varint,13,opt,name=maxbitrate" json:"maxbitrate,omitempty"`
	// Indicates if letter-boxing of 4:3 content into a 16:9 window is
	// allowed, where 0 = no, 1 = yes.
	Boxingallowed *bool `protobuf:"varint,14,opt,name=boxingallowed,def=1" json:"boxingallowed,omitempty"`
	// Playback methods that may be in use. If none are specified, any
	// method may be used. Only one method is typically used in practice.
	// As a result, this array may be converted to an integer in a future
	// version of the specification. It is strongly advised to use only
	// the first element of this array in preparation for this change.
	Playbackmethod []PlaybackMethod `protobuf:"varint,15,rep,packed,name=playbackmethod,enum=com.google.openrtb.PlaybackMethod" json:"playbackmethod,omitempty"`
	// Supported delivery methods (e.g., streaming, progressive).
	// If none specified, assume all are supported.
	Delivery []ContentDeliveryMethod `protobuf:"varint,16,rep,packed,name=delivery,enum=com.google.openrtb.ContentDeliveryMethod" json:"delivery,omitempty"`
	// Ad position on screen.
	Pos *AdPosition `protobuf:"varint,17,opt,name=pos,enum=com.google.openrtb.AdPosition" json:"pos,omitempty"`
	// Array of Banner objects (Section 3.2.3) if companion ads are available.
	Companionad []*BidRequest_Imp_Banner `protobuf:"bytes,18,rep,name=companionad" json:"companionad,omitempty"`
	// Companion ads in OpenRTB 2.1 format. (Or to be precise, interpretations
	// based on the buggy sample message in 5.1.4, fixed later in 2.2.)
	//
	// Deprecated: Do not use.
	Companionad_21 *BidRequest_Imp_Video_CompanionAd `protobuf:"bytes,22,opt,name=companionad_21,json=companionad21" json:"companionad_21,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,19,rep,packed,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Supported VAST companion ad types.  Recommended if companion Banner
	// objects are included via the companionad array.
	Companiontype []CompanionType `protobuf:"varint,20,rep,packed,name=companiontype,enum=com.google.openrtb.CompanionType" json:"companiontype,omitempty"`
	// Placement type for the impression.
	Placement *VideoPlacementType `protobuf:"varint,26,opt,name=placement,enum=com.google.openrtb.VideoPlacementType" json:"placement,omitempty"`
	// The event that causes playback to end.
	Playbackend *PlaybackCessationMode `protobuf:"varint,27,opt,name=playbackend,enum=com.google.openrtb.PlaybackCessationMode" json:"playbackend,omitempty"`
}

// Default values for BidRequest_Imp_Video fields.
const (
	Default_BidRequest_Imp_Video_Sequence      = int32(1)
	Default_BidRequest_Imp_Video_Boxingallowed = bool(true)
)

func (x *BidRequest_Imp_Video) Reset() {
	*x = BidRequest_Imp_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Video) ProtoMessage() {}

func (x *BidRequest_Imp_Video) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Video.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Video) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 2}
}

var extRange_BidRequest_Imp_Video = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Video.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Video) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Video
}

func (x *BidRequest_Imp_Video) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *BidRequest_Imp_Video) GetLinearity() VideoLinearity {
	if x != nil && x.Linearity != nil {
		return *x.Linearity
	}
	return VideoLinearity_LINEAR
}

func (x *BidRequest_Imp_Video) GetMinduration() int32 {
	if x != nil && x.Minduration != nil {
		return *x.Minduration
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetMaxduration() int32 {
	if x != nil && x.Maxduration != nil {
		return *x.Maxduration
	}
	return 0
}

// Deprecated: Do not use.
func (x *BidRequest_Imp_Video) GetProtocol() Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return Protocol_VAST_1_0
}

func (x *BidRequest_Imp_Video) GetProtocols() []Protocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *BidRequest_Imp_Video) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetStartdelay() int32 {
	if x != nil && x.Startdelay != nil {
		return *x.Startdelay
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetSkip() bool {
	if x != nil && x.Skip != nil {
		return *x.Skip
	}
	return false
}

func (x *BidRequest_Imp_Video) GetSkipmin() int32 {
	if x != nil && x.Skipmin != nil {
		return *x.Skipmin
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetSkipafter() int32 {
	if x != nil && x.Skipafter != nil {
		return *x.Skipafter
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetSequence() int32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return Default_BidRequest_Imp_Video_Sequence
}

func (x *BidRequest_Imp_Video) GetBattr() []CreativeAttribute {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *BidRequest_Imp_Video) GetMaxextended() int32 {
	if x != nil && x.Maxextended != nil {
		return *x.Maxextended
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetMinbitrate() int32 {
	if x != nil && x.Minbitrate != nil {
		return *x.Minbitrate
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetMaxbitrate() int32 {
	if x != nil && x.Maxbitrate != nil {
		return *x.Maxbitrate
	}
	return 0
}

func (x *BidRequest_Imp_Video) GetBoxingallowed() bool {
	if x != nil && x.Boxingallowed != nil {
		return *x.Boxingallowed
	}
	return Default_BidRequest_Imp_Video_Boxingallowed
}

func (x *BidRequest_Imp_Video) GetPlaybackmethod() []PlaybackMethod {
	if x != nil {
		return x.Playbackmethod
	}
	return nil
}

func (x *BidRequest_Imp_Video) GetDelivery() []ContentDeliveryMethod {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *BidRequest_Imp_Video) GetPos() AdPosition {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return AdPosition_UNKNOWN
}

func (x *BidRequest_Imp_Video) GetCompanionad() []*BidRequest_Imp_Banner {
	if x != nil {
		return x.Companionad
	}
	return nil
}

// Deprecated: Do not use.
func (x *BidRequest_Imp_Video) GetCompanionad_21() *BidRequest_Imp_Video_CompanionAd {
	if x != nil {
		return x.Companionad_21
	}
	return nil
}

func (x *BidRequest_Imp_Video) GetApi() []APIFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequest_Imp_Video) GetCompaniontype() []CompanionType {
	if x != nil {
		return x.Companiontype
	}
	return nil
}

func (x *BidRequest_Imp_Video) GetPlacement() VideoPlacementType {
	if x != nil && x.Placement != nil {
		return *x.Placement
	}
	return VideoPlacementType_UNDEFINED_VIDEO_PLACEMENT
}

func (x *BidRequest_Imp_Video) GetPlaybackend() PlaybackCessationMode {
	if x != nil && x.Playbackend != nil {
		return *x.Playbackend
	}
	return PlaybackCessationMode_COMPLETION_OR_USER
}

// This object represents an audio type impression. Many of the fields
// are non-essential for minimally viable transactions, but are included
// to offer fine control when needed. Audio in OpenRTB generally assumes
// compliance with the DAAST standard. As such, the notion of companion
// ads is supported by optionally including an array of Banner objects
// that define these companion ads.
//
// The presence of a Audio as a subordinate of the Imp object indicates
// that this impression is offered as an audio type impression.
// At the publisher's discretion, that same impression may also be offered
// as banner, video, and/or native by also including as Imp subordinates
// objects of those types. However, any given bid for the impression must
// conform to one of the offered types.
type BidRequest_Imp_Audio struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Content MIME types supported (e.g., "audio/mp4").
	// REQUIRED by the OpenRTB specification: at least 1 element.
	Mimes []string `protobuf:"bytes,1,rep,name=mimes" json:"mimes,omitempty"`
	// Minimum audio ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Minduration *int32 `protobuf:"varint,2,opt,name=minduration" json:"minduration,omitempty"`
	// Maximum audio ad duration in seconds.
	// RECOMMENDED by the OpenRTB specification.
	Maxduration *int32 `protobuf:"varint,3,opt,name=maxduration" json:"maxduration,omitempty"`
	// Array of supported audio protocols.
	// RECOMMENDED by the OpenRTB specification.
	Protocols []Protocol `protobuf:"varint,4,rep,packed,name=protocols,enum=com.google.openrtb.Protocol" json:"protocols,omitempty"`
	// Indicates the start delay in seconds for pre-roll, mid-roll, or
	// post-roll ad placements.
	// Refer to enum StartDelay for generic values.
	// RECOMMENDED by the OpenRTB specification.
	Startdelay *int32 `protobuf:"varint,5,opt,name=startdelay" json:"startdelay,omitempty"`
	// If multiple ad impressions are offered in the same bid request,
	// the sequence number will allow for the coordinated delivery of
	// multiple creatives.
	Sequence *int32 `protobuf:"varint,6,opt,name=sequence,def=1" json:"sequence,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,7,rep,packed,name=battr,enum=com.google.openrtb.CreativeAttribute" json:"battr,omitempty"`
	// Maximum extended video ad duration, if extension is allowed.
	// If blank or 0, extension is not allowed. If -1, extension is allowed,
	// and there is no time limit imposed. If greater than 0, then the value
	// represents the number of seconds of extended play supported beyond
	// the maxduration value.
	Maxextended *int32 `protobuf:"varint,8,opt,name=maxextended" json:"maxextended,omitempty"`
	// Minimum bit rate in Kbps.
	Minbitrate *int32 `protobuf:"varint,9,opt,name=minbitrate" json:"minbitrate,omitempty"`
	// Maximum bit rate in Kbps.
	Maxbitrate *int32 `protobuf:"varint,10,opt,name=maxbitrate" json:"maxbitrate,omitempty"`
	// Supported delivery methods (e.g., streaming, progressive).
	// If none specified, assume all are supported.
	Delivery []ContentDeliveryMethod `protobuf:"varint,11,rep,packed,name=delivery,enum=com.google.openrtb.ContentDeliveryMethod" json:"delivery,omitempty"`
	// Array of Banner objects if companion ads are available.
	Companionad []*BidRequest_Imp_Banner `protobuf:"bytes,12,rep,name=companionad" json:"companionad,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,13,rep,packed,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Supported DAAST companion ad types.  Recommended if companion Banner
	// objects are included via the companionad array.
	Companiontype []CompanionType `protobuf:"varint,20,rep,packed,name=companiontype,enum=com.google.openrtb.CompanionType" json:"companiontype,omitempty"`
	// The maximum number of ads that can be played in an ad pod.
	Maxseq *int32 `protobuf:"varint,21,opt,name=maxseq" json:"maxseq,omitempty"`
	// Type of audio feed.
	Feed *FeedType `protobuf:"varint,22,opt,name=feed,enum=com.google.openrtb.FeedType" json:"feed,omitempty"`
	// Indicates if the ad is stitched with audio content or delivered
	// independently, where 0 = no, 1 = yes.
	Stitched *bool `protobuf:"varint,23,opt,name=stitched" json:"stitched,omitempty"`
	// Volume normalization mode.
	Nvol *VolumeNormalizationMode `protobuf:"varint,24,opt,name=nvol,enum=com.google.openrtb.VolumeNormalizationMode" json:"nvol,omitempty"`
}

// Default values for BidRequest_Imp_Audio fields.
const (
	Default_BidRequest_Imp_Audio_Sequence = int32(1)
)

func (x *BidRequest_Imp_Audio) Reset() {
	*x = BidRequest_Imp_Audio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Audio) ProtoMessage() {}

func (x *BidRequest_Imp_Audio) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Audio.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Audio) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 3}
}

var extRange_BidRequest_Imp_Audio = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Audio.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Audio) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Audio
}

func (x *BidRequest_Imp_Audio) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *BidRequest_Imp_Audio) GetMinduration() int32 {
	if x != nil && x.Minduration != nil {
		return *x.Minduration
	}
	return 0
}

func (x *BidRequest_Imp_Audio) GetMaxduration() int32 {
	if x != nil && x.Maxduration != nil {
		return *x.Maxduration
	}
	return 0
}

func (x *BidRequest_Imp_Audio) GetProtocols() []Protocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *BidRequest_Imp_Audio) GetStartdelay() int32 {
	if x != nil && x.Startdelay != nil {
		return *x.Startdelay
	}
	return 0
}

func (x *BidRequest_Imp_Audio) GetSequence() int32 {
	if x != nil && x.Sequence != nil {
		return *x.Sequence
	}
	return Default_BidRequest_Imp_Audio_Sequence
}

func (x *BidRequest_Imp_Audio) GetBattr() []CreativeAttribute {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *BidRequest_Imp_Audio) GetMaxextended() int32 {
	if x != nil && x.Maxextended != nil {
		return *x.Maxextended
	}
	return 0
}

func (x *BidRequest_Imp_Audio) GetMinbitrate() int32 {
	if x != nil && x.Minbitrate != nil {
		return *x.Minbitrate
	}
	return 0
}

func (x *BidRequest_Imp_Audio) GetMaxbitrate() int32 {
	if x != nil && x.Maxbitrate != nil {
		return *x.Maxbitrate
	}
	return 0
}

func (x *BidRequest_Imp_Audio) GetDelivery() []ContentDeliveryMethod {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *BidRequest_Imp_Audio) GetCompanionad() []*BidRequest_Imp_Banner {
	if x != nil {
		return x.Companionad
	}
	return nil
}

func (x *BidRequest_Imp_Audio) GetApi() []APIFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequest_Imp_Audio) GetCompaniontype() []CompanionType {
	if x != nil {
		return x.Companiontype
	}
	return nil
}

func (x *BidRequest_Imp_Audio) GetMaxseq() int32 {
	if x != nil && x.Maxseq != nil {
		return *x.Maxseq
	}
	return 0
}

func (x *BidRequest_Imp_Audio) GetFeed() FeedType {
	if x != nil && x.Feed != nil {
		return *x.Feed
	}
	return FeedType_MUSIC_SERVICE
}

func (x *BidRequest_Imp_Audio) GetStitched() bool {
	if x != nil && x.Stitched != nil {
		return *x.Stitched
	}
	return false
}

func (x *BidRequest_Imp_Audio) GetNvol() VolumeNormalizationMode {
	if x != nil && x.Nvol != nil {
		return *x.Nvol
	}
	return VolumeNormalizationMode_NONE
}

// OpenRTB 2.3: This object represents a native type impression.
// Native ad units are intended to blend seamlessly into the surrounding
// content (e.g., a sponsored Twitter or Facebook post). As such, the
// response must be well-structured to afford the publisher fine-grained
// control over rendering.
//
// The Native Subcommittee has developed a companion specification to
// OpenRTB called the Native Ad Specification. It defines the request
// parameters and response markup structure of native ad units.
// This object provides the means of transporting request parameters as an
// opaque string so that the specific parameters can evolve separately
// under the auspices of the Native Ad Specification. Similarly, the
// ad markup served will be structured according to that specification.
//
// The presence of a Native as a subordinate of the Imp object indicates
// that this impression is offered as a native type impression.
// At the publisher's discretion, that same impression may also be offered
// as banner and/or video by also including as Imp subordinates the Banner
// and/or Video objects, respectively. However, any given bid for the
// impression must conform to one of the offered types.
type BidRequest_Imp_Native struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Types that are assignable to RequestOneof:
	//	*BidRequest_Imp_Native_Request
	//	*BidRequest_Imp_Native_RequestNative
	RequestOneof isBidRequest_Imp_Native_RequestOneof `protobuf_oneof:"request_oneof"`
	// Version of the Native Ad Specification to which request complies.
	// RECOMMENDED by the OpenRTB specification.
	Ver *string `protobuf:"bytes,2,opt,name=ver" json:"ver,omitempty"`
	// List of supported API frameworks for this impression.
	// If an API is not explicitly listed, it is assumed not to be supported.
	Api []APIFramework `protobuf:"varint,3,rep,packed,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Blocked creative attributes.
	Battr []CreativeAttribute `protobuf:"varint,4,rep,packed,name=battr,enum=com.google.openrtb.CreativeAttribute" json:"battr,omitempty"`
}

func (x *BidRequest_Imp_Native) Reset() {
	*x = BidRequest_Imp_Native{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Native) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Native) ProtoMessage() {}

func (x *BidRequest_Imp_Native) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Native.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Native) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 4}
}

var extRange_BidRequest_Imp_Native = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Native.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Native) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Native
}

func (m *BidRequest_Imp_Native) GetRequestOneof() isBidRequest_Imp_Native_RequestOneof {
	if m != nil {
		return m.RequestOneof
	}
	return nil
}

func (x *BidRequest_Imp_Native) GetRequest() string {
	if x, ok := x.GetRequestOneof().(*BidRequest_Imp_Native_Request); ok {
		return x.Request
	}
	return ""
}

func (x *BidRequest_Imp_Native) GetRequestNative() *NativeRequest {
	if x, ok := x.GetRequestOneof().(*BidRequest_Imp_Native_RequestNative); ok {
		return x.RequestNative
	}
	return nil
}

func (x *BidRequest_Imp_Native) GetVer() string {
	if x != nil && x.Ver != nil {
		return *x.Ver
	}
	return ""
}

func (x *BidRequest_Imp_Native) GetApi() []APIFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequest_Imp_Native) GetBattr() []CreativeAttribute {
	if x != nil {
		return x.Battr
	}
	return nil
}

type isBidRequest_Imp_Native_RequestOneof interface {
	isBidRequest_Imp_Native_RequestOneof()
}

type BidRequest_Imp_Native_Request struct {
	// Request payload complying with the Native Ad Specification.
	// Exactly one of {request, request_native} should be used;
	// this is the OpenRTB-compliant field for JSON serialization.
	Request string `protobuf:"bytes,1,opt,name=request,oneof"`
}

type BidRequest_Imp_Native_RequestNative struct {
	// Request payload complying with the Native Ad Specification.
	// Exactly one of {request, request_native} should be used;
	// this is an alternate field preferred for Protobuf serialization.
	RequestNative *NativeRequest `protobuf:"bytes,50,opt,name=request_native,json=requestNative,oneof"`
}

func (*BidRequest_Imp_Native_Request) isBidRequest_Imp_Native_RequestOneof() {}

func (*BidRequest_Imp_Native_RequestNative) isBidRequest_Imp_Native_RequestOneof() {}

// OpenRTB 2.2: This object is the private marketplace container for
// direct deals between buyers and sellers that may pertain to this
// impression. The actual deals are represented as a collection of
// Deal objects. Refer to Section 7.2 for more details.
type BidRequest_Imp_Pmp struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Indicator of auction eligibility to seats named in the Direct Deals
	// object, where 0 = all bids are accepted, 1 = bids are restricted to
	// the deals specified and the terms thereof.
	PrivateAuction *bool `protobuf:"varint,1,opt,name=private_auction,json=privateAuction,def=0" json:"private_auction,omitempty"`
	// Array of Deal (Section 3.2.18) objects that convey the specific deals
	// applicable to this impression.
	Deals []*BidRequest_Imp_Pmp_Deal `protobuf:"bytes,2,rep,name=deals" json:"deals,omitempty"`
}

// Default values for BidRequest_Imp_Pmp fields.
const (
	Default_BidRequest_Imp_Pmp_PrivateAuction = bool(false)
)

func (x *BidRequest_Imp_Pmp) Reset() {
	*x = BidRequest_Imp_Pmp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Pmp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Pmp) ProtoMessage() {}

func (x *BidRequest_Imp_Pmp) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Pmp.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Pmp) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 5}
}

var extRange_BidRequest_Imp_Pmp = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Pmp.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Pmp) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Pmp
}

func (x *BidRequest_Imp_Pmp) GetPrivateAuction() bool {
	if x != nil && x.PrivateAuction != nil {
		return *x.PrivateAuction
	}
	return Default_BidRequest_Imp_Pmp_PrivateAuction
}

func (x *BidRequest_Imp_Pmp) GetDeals() []*BidRequest_Imp_Pmp_Deal {
	if x != nil {
		return x.Deals
	}
	return nil
}

// OpenRTB 2.4: This object represents an allowed size (i.e.,
// height and width combination) for a banner impression.
// These are typically used in an array for an impression where
// multiple sizes are permitted.
type BidRequest_Imp_Banner_Format struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Width in device independent pixels (DIPS).
	W *int32 `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	// Height in device independent pixels (DIPS).
	H *int32 `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	// Relative width when expressing size as a ratio.
	Wratio *int32 `protobuf:"varint,3,opt,name=wratio" json:"wratio,omitempty"`
	// Relative height when expressing size as a ratio.
	Hratio *int32 `protobuf:"varint,4,opt,name=hratio" json:"hratio,omitempty"`
	// The minimum width in device independent pixels (DIPS) at
	// which the ad will be displayed when the size is expressed as a ratio.
	Wmin *int32 `protobuf:"varint,5,opt,name=wmin" json:"wmin,omitempty"`
}

func (x *BidRequest_Imp_Banner_Format) Reset() {
	*x = BidRequest_Imp_Banner_Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Banner_Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Banner_Format) ProtoMessage() {}

func (x *BidRequest_Imp_Banner_Format) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Banner_Format.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Banner_Format) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 1, 0}
}

var extRange_BidRequest_Imp_Banner_Format = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Banner_Format.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Banner_Format) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Banner_Format
}

func (x *BidRequest_Imp_Banner_Format) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidRequest_Imp_Banner_Format) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidRequest_Imp_Banner_Format) GetWratio() int32 {
	if x != nil && x.Wratio != nil {
		return *x.Wratio
	}
	return 0
}

func (x *BidRequest_Imp_Banner_Format) GetHratio() int32 {
	if x != nil && x.Hratio != nil {
		return *x.Hratio
	}
	return 0
}

func (x *BidRequest_Imp_Banner_Format) GetWmin() int32 {
	if x != nil && x.Wmin != nil {
		return *x.Wmin
	}
	return 0
}

// OpenRTB 2.1 compatibility.
type BidRequest_Imp_Video_CompanionAd struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	Banner []*BidRequest_Imp_Banner `protobuf:"bytes,1,rep,name=banner" json:"banner,omitempty"`
}

func (x *BidRequest_Imp_Video_CompanionAd) Reset() {
	*x = BidRequest_Imp_Video_CompanionAd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Video_CompanionAd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Video_CompanionAd) ProtoMessage() {}

func (x *BidRequest_Imp_Video_CompanionAd) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Video_CompanionAd.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Video_CompanionAd) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 2, 0}
}

var extRange_BidRequest_Imp_Video_CompanionAd = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Video_CompanionAd.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Video_CompanionAd) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Video_CompanionAd
}

func (x *BidRequest_Imp_Video_CompanionAd) GetBanner() []*BidRequest_Imp_Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

// OpenRTB 2.2: This object constitutes a specific deal that was struck
// a priori between a buyer and a seller. Its presence with the Pmp
// collection indicates that this impression is available under the terms
// of that deal. Refer to Section 7.2 for more details.
type BidRequest_Imp_Pmp_Deal struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// A unique identifier for the direct deal.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// Minimum bid for this impression expressed in CPM.
	Bidfloor *float64 `protobuf:"fixed64,2,opt,name=bidfloor,def=0" json:"bidfloor,omitempty"`
	// Currency specified using ISO-4217 alpha codes. This may be different
	// from bid currency returned by bidder if this is allowed
	// by the exchange.
	Bidfloorcur *string `protobuf:"bytes,3,opt,name=bidfloorcur,def=USD" json:"bidfloorcur,omitempty"`
	// Allowlist of buyer seats (e.g., advertisers, agencies) that can bid
	// on this deal. IDs of seats and knowledge of the buyer's customers to
	// which they refer must be coordinated between bidders and the exchange
	// a priori. Omission implies no seat restrictions.
	Wseat []string `protobuf:"bytes,4,rep,name=wseat" json:"wseat,omitempty"`
	// Array of advertiser domains (e.g., advertiser.com) allowed to
	// bid on this deal. Omission implies no advertiser restrictions.
	Wadomain []string `protobuf:"bytes,5,rep,name=wadomain" json:"wadomain,omitempty"`
	// Optional override of the overall auction type of the bid request,
	// where 1 = First Price, 2 = Second Price Plus, 3 = the value passed
	// in bidfloor is the agreed upon deal price. Additional auction types
	// can be defined by the exchange.
	At *AuctionType `protobuf:"varint,6,opt,name=at,enum=com.google.openrtb.AuctionType" json:"at,omitempty"`
}

// Default values for BidRequest_Imp_Pmp_Deal fields.
const (
	Default_BidRequest_Imp_Pmp_Deal_Bidfloor    = float64(0)
	Default_BidRequest_Imp_Pmp_Deal_Bidfloorcur = string("USD")
)

func (x *BidRequest_Imp_Pmp_Deal) Reset() {
	*x = BidRequest_Imp_Pmp_Deal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Imp_Pmp_Deal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Imp_Pmp_Deal) ProtoMessage() {}

func (x *BidRequest_Imp_Pmp_Deal) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Imp_Pmp_Deal.ProtoReflect.Descriptor instead.
func (*BidRequest_Imp_Pmp_Deal) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 1, 5, 0}
}

var extRange_BidRequest_Imp_Pmp_Deal = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Imp_Pmp_Deal.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Imp_Pmp_Deal) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Imp_Pmp_Deal
}

func (x *BidRequest_Imp_Pmp_Deal) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Imp_Pmp_Deal) GetBidfloor() float64 {
	if x != nil && x.Bidfloor != nil {
		return *x.Bidfloor
	}
	return Default_BidRequest_Imp_Pmp_Deal_Bidfloor
}

func (x *BidRequest_Imp_Pmp_Deal) GetBidfloorcur() string {
	if x != nil && x.Bidfloorcur != nil {
		return *x.Bidfloorcur
	}
	return Default_BidRequest_Imp_Pmp_Deal_Bidfloorcur
}

func (x *BidRequest_Imp_Pmp_Deal) GetWseat() []string {
	if x != nil {
		return x.Wseat
	}
	return nil
}

func (x *BidRequest_Imp_Pmp_Deal) GetWadomain() []string {
	if x != nil {
		return x.Wadomain
	}
	return nil
}

func (x *BidRequest_Imp_Pmp_Deal) GetAt() AuctionType {
	if x != nil && x.At != nil {
		return *x.At
	}
	return AuctionType_FIRST_PRICE
}

// OpenRTB 2.0: Segment objects are essentially key-value pairs that
// convey specific units of data about the user. The parent Data object
// is a collection of such values from a given data provider.
// The specific segment names and value options must be published by the
// exchange a priori to its bidders.
type BidRequest_Data_Segment struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// ID of the data segment specific to the data provider.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Name of the data segment specific to the data provider.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// String representation of the data segment value.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *BidRequest_Data_Segment) Reset() {
	*x = BidRequest_Data_Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Data_Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Data_Segment) ProtoMessage() {}

func (x *BidRequest_Data_Segment) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Data_Segment.ProtoReflect.Descriptor instead.
func (*BidRequest_Data_Segment) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{0, 10, 0}
}

var extRange_BidRequest_Data_Segment = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidRequest_Data_Segment.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidRequest_Data_Segment) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidRequest_Data_Segment
}

func (x *BidRequest_Data_Segment) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Data_Segment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BidRequest_Data_Segment) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// OpenRTB 2.0: A bid response can contain multiple SeatBid objects, each on
// behalf of a different bidder seat and each containing one or more
// individual bids. If multiple impressions are presented in the request, the
// group attribute can be used to specify if a seat is willing to accept any
// impressions that it can win (default) or if it is only interested in
// winning any if it can win them all as a group.
type BidResponse_SeatBid struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Array of 1+ Bid objects (Section 4.2.3) each related to an impression.
	// Multiple bids can relate to the same impression.
	Bid []*BidResponse_SeatBid_Bid `protobuf:"bytes,1,rep,name=bid" json:"bid,omitempty"`
	// ID of the buyer seat (e.g., advertiser, agency) on whose behalf
	// this bid is made.
	//
	// This ID will be used to breakdown spend and invalid traffic metrics in
	// IVT transparency reporting, given that it is no longer than 64 bytes.
	Seat *string `protobuf:"bytes,2,opt,name=seat" json:"seat,omitempty"`
	// 0 = impressions can be won individually; 1 = impressions must be won or
	// lost as a group.
	Group *bool `protobuf:"varint,3,opt,name=group,def=0" json:"group,omitempty"`
}

// Default values for BidResponse_SeatBid fields.
const (
	Default_BidResponse_SeatBid_Group = bool(false)
)

func (x *BidResponse_SeatBid) Reset() {
	*x = BidResponse_SeatBid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_SeatBid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_SeatBid) ProtoMessage() {}

func (x *BidResponse_SeatBid) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_SeatBid.ProtoReflect.Descriptor instead.
func (*BidResponse_SeatBid) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{1, 0}
}

var extRange_BidResponse_SeatBid = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidResponse_SeatBid.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidResponse_SeatBid) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidResponse_SeatBid
}

func (x *BidResponse_SeatBid) GetBid() []*BidResponse_SeatBid_Bid {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *BidResponse_SeatBid) GetSeat() string {
	if x != nil && x.Seat != nil {
		return *x.Seat
	}
	return ""
}

func (x *BidResponse_SeatBid) GetGroup() bool {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return Default_BidResponse_SeatBid_Group
}

// OpenRTB 2.0: A SeatBid object contains one or more Bid objects,
// each of which relates to a specific impression in the bid request
// via the impid attribute and constitutes an offer to buy that impression
// for a given price.
type BidResponse_SeatBid_Bid struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Bidder generated bid ID to assist with logging/tracking.
	// REQUIRED by the OpenRTB specification.
	Id *string `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	// ID of the Imp object in the related bid request.
	// REQUIRED by the OpenRTB specification.
	Impid *string `protobuf:"bytes,2,req,name=impid" json:"impid,omitempty"`
	// Bid price expressed as CPM although the actual transaction is for a
	// unit impression only. Note that while the type indicates float, integer
	// math is highly recommended when handling currencies
	// (e.g., BigDecimal in Java).
	// REQUIRED by the OpenRTB specification.
	Price *float64 `protobuf:"fixed64,3,req,name=price" json:"price,omitempty"`
	// ID of a preloaded ad to be served if the bid wins.
	Adid *string `protobuf:"bytes,4,opt,name=adid" json:"adid,omitempty"`
	// Win notice URL called by the exchange if the bid wins; optional means
	// of serving ad markup.
	Nurl *string `protobuf:"bytes,5,opt,name=nurl" json:"nurl,omitempty"`
	// Types that are assignable to AdmOneof:
	//	*BidResponse_SeatBid_Bid_Adm
	//	*BidResponse_SeatBid_Bid_AdmNative
	AdmOneof isBidResponse_SeatBid_Bid_AdmOneof `protobuf_oneof:"adm_oneof"`
	// Advertiser domain for block list checking (e.g., "ford.com"). This can
	// be an array of for the case of rotating creatives. Exchanges can
	// mandate that only one domain is allowed.
	Adomain []string `protobuf:"bytes,7,rep,name=adomain" json:"adomain,omitempty"`
	// A platform-specific application identifier intended to be
	// unique to the app and independent of the exchange. On Android,
	// this should be a bundle or package name (e.g., com.foo.mygame).
	// On iOS, it is a numeric ID.
	Bundle *string `protobuf:"bytes,14,opt,name=bundle" json:"bundle,omitempty"`
	// URL without cache-busting to an image that is representative of the
	// content of the campaign for ad quality/safety checking.
	Iurl *string `protobuf:"bytes,8,opt,name=iurl" json:"iurl,omitempty"`
	// Campaign ID to assist with ad quality checking; the collection of
	// creatives for which iurl should be representative.
	Cid *string `protobuf:"bytes,9,opt,name=cid" json:"cid,omitempty"`
	// Creative ID to assist with ad quality checking.
	Crid *string `protobuf:"bytes,10,opt,name=crid" json:"crid,omitempty"`
	// IAB content categories of the creative.
	Cat []string `protobuf:"bytes,15,rep,name=cat" json:"cat,omitempty"`
	// Set of attributes describing the creative.
	Attr []CreativeAttribute `protobuf:"varint,11,rep,packed,name=attr,enum=com.google.openrtb.CreativeAttribute" json:"attr,omitempty"`
	// API required by the markup if applicable.
	Api *APIFramework `protobuf:"varint,18,opt,name=api,enum=com.google.openrtb.APIFramework" json:"api,omitempty"`
	// Video response protocol of the markup if applicable.
	Protocol *Protocol `protobuf:"varint,19,opt,name=protocol,enum=com.google.openrtb.Protocol" json:"protocol,omitempty"`
	// Creative media rating per QAG guidelines.
	Qagmediarating *QAGMediaRating `protobuf:"varint,20,opt,name=qagmediarating,enum=com.google.openrtb.QAGMediaRating" json:"qagmediarating,omitempty"`
	// Reference to the deal.id from the bid request if this bid pertains to a
	// private marketplace direct deal.
	Dealid *string `protobuf:"bytes,13,opt,name=dealid" json:"dealid,omitempty"`
	// Width of the creative in device independent pixels (DIPS).
	W *int32 `protobuf:"varint,16,opt,name=w" json:"w,omitempty"`
	// Height of the creative in device independent pixels (DIPS).
	H *int32 `protobuf:"varint,17,opt,name=h" json:"h,omitempty"`
	// Advisory as to the number of seconds the bidder is willing to
	// wait between the auction and the actual impression.
	Exp *int32 `protobuf:"varint,21,opt,name=exp" json:"exp,omitempty"`
	// Billing notice URL called by the exchange when a winning bid
	// becomes billable based on exchange-specific business policy
	// (e.g., typically delivered, viewed, etc.). Substitution macros
	// (Section 4.4) may be included.
	Burl *string `protobuf:"bytes,22,opt,name=burl" json:"burl,omitempty"`
	// Loss notice URL called by the exchange when a bid is known to
	// have been lost. Substitution macros (Section 4.4) may be
	// included. Exchange-specific policy may preclude support for
	// loss notices or the disclosure of winning clearing prices
	// resulting in ${AUCTION_PRICE} macros being removed (i.e.,
	// replaced with a zero-length string).
	Lurl *string `protobuf:"bytes,23,opt,name=lurl" json:"lurl,omitempty"`
	// Tactic ID to enable buyers to label bids for reporting to the
	// exchange the tactic through which their bid was submitted.
	// The specific usage and meaning of the tactic ID should be
	// communicated between buyer and exchanges a priori.
	Tactic *string `protobuf:"bytes,24,opt,name=tactic" json:"tactic,omitempty"`
	// Language of the creative using ISO-639-1-alpha-2. The nonstandard
	// code "xx" may also be used if the creative has no
	// linguistic content (e.g., a banner with just a company logo).
	Language *string `protobuf:"bytes,25,opt,name=language" json:"language,omitempty"`
	// Relative width of the creative when expressing size as a ratio.
	// Required for Flex Ads.
	Wratio *int32 `protobuf:"varint,26,opt,name=wratio" json:"wratio,omitempty"`
	// Relative height of the creative when expressing size as a ratio.
	// Required for Flex Ads.
	Hratio *int32 `protobuf:"varint,27,opt,name=hratio" json:"hratio,omitempty"`
}

func (x *BidResponse_SeatBid_Bid) Reset() {
	*x = BidResponse_SeatBid_Bid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_SeatBid_Bid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_SeatBid_Bid) ProtoMessage() {}

func (x *BidResponse_SeatBid_Bid) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_SeatBid_Bid.ProtoReflect.Descriptor instead.
func (*BidResponse_SeatBid_Bid) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{1, 0, 0}
}

var extRange_BidResponse_SeatBid_Bid = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use BidResponse_SeatBid_Bid.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*BidResponse_SeatBid_Bid) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_BidResponse_SeatBid_Bid
}

func (x *BidResponse_SeatBid_Bid) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetImpid() string {
	if x != nil && x.Impid != nil {
		return *x.Impid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetPrice() float64 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *BidResponse_SeatBid_Bid) GetAdid() string {
	if x != nil && x.Adid != nil {
		return *x.Adid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetNurl() string {
	if x != nil && x.Nurl != nil {
		return *x.Nurl
	}
	return ""
}

func (m *BidResponse_SeatBid_Bid) GetAdmOneof() isBidResponse_SeatBid_Bid_AdmOneof {
	if m != nil {
		return m.AdmOneof
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetAdm() string {
	if x, ok := x.GetAdmOneof().(*BidResponse_SeatBid_Bid_Adm); ok {
		return x.Adm
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetAdmNative() *NativeResponse {
	if x, ok := x.GetAdmOneof().(*BidResponse_SeatBid_Bid_AdmNative); ok {
		return x.AdmNative
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetAdomain() []string {
	if x != nil {
		return x.Adomain
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetBundle() string {
	if x != nil && x.Bundle != nil {
		return *x.Bundle
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetIurl() string {
	if x != nil && x.Iurl != nil {
		return *x.Iurl
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetCrid() string {
	if x != nil && x.Crid != nil {
		return *x.Crid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetAttr() []CreativeAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *BidResponse_SeatBid_Bid) GetApi() APIFramework {
	if x != nil && x.Api != nil {
		return *x.Api
	}
	return APIFramework_VPAID_1
}

func (x *BidResponse_SeatBid_Bid) GetProtocol() Protocol {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return Protocol_VAST_1_0
}

func (x *BidResponse_SeatBid_Bid) GetQagmediarating() QAGMediaRating {
	if x != nil && x.Qagmediarating != nil {
		return *x.Qagmediarating
	}
	return QAGMediaRating_ALL_AUDIENCES
}

func (x *BidResponse_SeatBid_Bid) GetDealid() string {
	if x != nil && x.Dealid != nil {
		return *x.Dealid
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *BidResponse_SeatBid_Bid) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *BidResponse_SeatBid_Bid) GetExp() int32 {
	if x != nil && x.Exp != nil {
		return *x.Exp
	}
	return 0
}

func (x *BidResponse_SeatBid_Bid) GetBurl() string {
	if x != nil && x.Burl != nil {
		return *x.Burl
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetLurl() string {
	if x != nil && x.Lurl != nil {
		return *x.Lurl
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetTactic() string {
	if x != nil && x.Tactic != nil {
		return *x.Tactic
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *BidResponse_SeatBid_Bid) GetWratio() int32 {
	if x != nil && x.Wratio != nil {
		return *x.Wratio
	}
	return 0
}

func (x *BidResponse_SeatBid_Bid) GetHratio() int32 {
	if x != nil && x.Hratio != nil {
		return *x.Hratio
	}
	return 0
}

type isBidResponse_SeatBid_Bid_AdmOneof interface {
	isBidResponse_SeatBid_Bid_AdmOneof()
}

type BidResponse_SeatBid_Bid_Adm struct {
	// Optional means of conveying ad markup in case the bid wins;
	// supersedes the win notice if markup is included in both.
	// For native ad bids, exactly one of {adm, adm_native} should be used;
	// this is the OpenRTB-compliant field for JSON serialization.
	Adm string `protobuf:"bytes,6,opt,name=adm,oneof"`
}

type BidResponse_SeatBid_Bid_AdmNative struct {
	// Native ad response.
	// For native ad bids, exactly one of {adm, adm_native} should be used;
	// this is the field used for Protobuf serialization.
	AdmNative *NativeResponse `protobuf:"bytes,50,opt,name=adm_native,json=admNative,oneof"`
}

func (*BidResponse_SeatBid_Bid_Adm) isBidResponse_SeatBid_Bid_AdmOneof() {}

func (*BidResponse_SeatBid_Bid_AdmNative) isBidResponse_SeatBid_Bid_AdmOneof() {}

// OpenRTB Native 1.0: The main container object for each asset requested or
// supported by Exchange on behalf of the rendering client.
// Any object that is required is to be flagged as such. Only one of the
// {title,img,video,data} objects should be present in each object.
// All others should be null/absent. The id is to be unique within the
// Asset array so that the response can be aligned.
type NativeRequest_Asset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Unique asset ID, assigned by exchange. Typically a counter for the array.
	// REQUIRED by the OpenRTB Native specification.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Set to true if asset is required
	// (exchange will not accept a bid without it).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	// RECOMMENDED by the OpenRTB Native specification.
	//
	// Types that are assignable to AssetOneof:
	//	*NativeRequest_Asset_Title_
	//	*NativeRequest_Asset_Img
	//	*NativeRequest_Asset_Video
	//	*NativeRequest_Asset_Data_
	AssetOneof isNativeRequest_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
}

// Default values for NativeRequest_Asset fields.
const (
	Default_NativeRequest_Asset_Required = bool(false)
)

func (x *NativeRequest_Asset) Reset() {
	*x = NativeRequest_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_Asset) ProtoMessage() {}

func (x *NativeRequest_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_Asset.ProtoReflect.Descriptor instead.
func (*NativeRequest_Asset) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{2, 0}
}

var extRange_NativeRequest_Asset = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_Asset.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_Asset) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_Asset
}

func (x *NativeRequest_Asset) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NativeRequest_Asset) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return Default_NativeRequest_Asset_Required
}

func (m *NativeRequest_Asset) GetAssetOneof() isNativeRequest_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (x *NativeRequest_Asset) GetTitle() *NativeRequest_Asset_Title {
	if x, ok := x.GetAssetOneof().(*NativeRequest_Asset_Title_); ok {
		return x.Title
	}
	return nil
}

func (x *NativeRequest_Asset) GetImg() *NativeRequest_Asset_Image {
	if x, ok := x.GetAssetOneof().(*NativeRequest_Asset_Img); ok {
		return x.Img
	}
	return nil
}

func (x *NativeRequest_Asset) GetVideo() *BidRequest_Imp_Video {
	if x, ok := x.GetAssetOneof().(*NativeRequest_Asset_Video); ok {
		return x.Video
	}
	return nil
}

func (x *NativeRequest_Asset) GetData() *NativeRequest_Asset_Data {
	if x, ok := x.GetAssetOneof().(*NativeRequest_Asset_Data_); ok {
		return x.Data
	}
	return nil
}

type isNativeRequest_Asset_AssetOneof interface {
	isNativeRequest_Asset_AssetOneof()
}

type NativeRequest_Asset_Title_ struct {
	// Title object for title assets.
	Title *NativeRequest_Asset_Title `protobuf:"bytes,3,opt,name=title,oneof"`
}

type NativeRequest_Asset_Img struct {
	// Image object for image assets.
	Img *NativeRequest_Asset_Image `protobuf:"bytes,4,opt,name=img,oneof"`
}

type NativeRequest_Asset_Video struct {
	// Video object for video assets.
	// Note that in-stream video ads are not part of Native.
	// Native ads may contain a video as the ad creative itself.
	Video *BidRequest_Imp_Video `protobuf:"bytes,5,opt,name=video,oneof"`
}

type NativeRequest_Asset_Data_ struct {
	// Data object for brand name, description, ratings, prices etc.
	Data *NativeRequest_Asset_Data `protobuf:"bytes,6,opt,name=data,oneof"`
}

func (*NativeRequest_Asset_Title_) isNativeRequest_Asset_AssetOneof() {}

func (*NativeRequest_Asset_Img) isNativeRequest_Asset_AssetOneof() {}

func (*NativeRequest_Asset_Video) isNativeRequest_Asset_AssetOneof() {}

func (*NativeRequest_Asset_Data_) isNativeRequest_Asset_AssetOneof() {}

// OpenRTB Native 1.2: The EventTrackers object specifies the type of events
// the bidder can request to be tracked in the bid response, and which types
// of tracking are available for each event type, and is included as an array
// in the request.
type NativeRequest_EventTrackers struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Type of event available for tracking.
	// REQUIRED by the OpenRTB Native specification.
	Event *EventType `protobuf:"varint,1,req,name=event,enum=com.google.openrtb.EventType" json:"event,omitempty"`
	// Array of types of tracking available for the given event.
	// REQUIRED by the OpenRTB Native specification.
	Methods []EventTrackingMethod `protobuf:"varint,2,rep,name=methods,enum=com.google.openrtb.EventTrackingMethod" json:"methods,omitempty"`
}

func (x *NativeRequest_EventTrackers) Reset() {
	*x = NativeRequest_EventTrackers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_EventTrackers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_EventTrackers) ProtoMessage() {}

func (x *NativeRequest_EventTrackers) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_EventTrackers.ProtoReflect.Descriptor instead.
func (*NativeRequest_EventTrackers) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{2, 1}
}

var extRange_NativeRequest_EventTrackers = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_EventTrackers.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_EventTrackers) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_EventTrackers
}

func (x *NativeRequest_EventTrackers) GetEvent() EventType {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return EventType_IMPRESSION
}

func (x *NativeRequest_EventTrackers) GetMethods() []EventTrackingMethod {
	if x != nil {
		return x.Methods
	}
	return nil
}

// OpenRTB Native 1.0: The Title object is to be used for title element
// of the Native ad.
type NativeRequest_Asset_Title struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Maximum length of the text in the title element.
	// RECOMMENDED that the value be either of: 25, 90, 140.
	// REQUIRED by the OpenRTB Native specification.
	Len *int32 `protobuf:"varint,1,req,name=len" json:"len,omitempty"`
}

func (x *NativeRequest_Asset_Title) Reset() {
	*x = NativeRequest_Asset_Title{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_Asset_Title) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_Asset_Title) ProtoMessage() {}

func (x *NativeRequest_Asset_Title) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_Asset_Title.ProtoReflect.Descriptor instead.
func (*NativeRequest_Asset_Title) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{2, 0, 0}
}

var extRange_NativeRequest_Asset_Title = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_Asset_Title.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_Asset_Title) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_Asset_Title
}

func (x *NativeRequest_Asset_Title) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

// OpenRTB Native 1.0: The Image object to be used for all image elements
// of the Native ad such as Icons, Main Image, etc.
// RECOMMENDED sizes and aspect ratios are included in ImageAssetType.
type NativeRequest_Asset_Image struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Type ID of the image element supported by the publisher.
	// The publisher can display this information in an appropriate format.
	Type *ImageAssetType `protobuf:"varint,1,opt,name=type,enum=com.google.openrtb.ImageAssetType" json:"type,omitempty"`
	// Width of the image in pixels.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// Height of the image in pixels.
	H *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
	// The minimum requested width of the image in pixels. This option should
	// be used for any rescaling of images by the client. Either w or wmin
	// should be transmitted. If only w is included, it should be considered
	// an exact requirement.
	// RECOMMENDED by the OpenRTB Native specification.
	Wmin *int32 `protobuf:"varint,4,opt,name=wmin" json:"wmin,omitempty"`
	// The minimum requested height of the image in pixels. This option should
	// be used for any rescaling of images by the client. Either h or hmin
	// should be transmitted. If only h is included, it should be considered
	// an exact requirement.
	// RECOMMENDED by the OpenRTB Native specification.
	Hmin *int32 `protobuf:"varint,5,opt,name=hmin" json:"hmin,omitempty"`
	// Allowlist of content MIME types supported. Popular MIME types include,
	// but are not limited to "image/jpg" and "image/gif". Each implementing
	// Exchange should have their own list of supported types in the
	// integration docs. See Wikipedia's MIME page for more information and
	// links to all IETF RFCs. If blank, assume all types are allowed.
	Mimes []string `protobuf:"bytes,6,rep,name=mimes" json:"mimes,omitempty"`
}

func (x *NativeRequest_Asset_Image) Reset() {
	*x = NativeRequest_Asset_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_Asset_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_Asset_Image) ProtoMessage() {}

func (x *NativeRequest_Asset_Image) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_Asset_Image.ProtoReflect.Descriptor instead.
func (*NativeRequest_Asset_Image) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{2, 0, 1}
}

var extRange_NativeRequest_Asset_Image = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_Asset_Image.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_Asset_Image) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_Asset_Image
}

func (x *NativeRequest_Asset_Image) GetType() ImageAssetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ImageAssetType_ICON
}

func (x *NativeRequest_Asset_Image) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *NativeRequest_Asset_Image) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

func (x *NativeRequest_Asset_Image) GetWmin() int32 {
	if x != nil && x.Wmin != nil {
		return *x.Wmin
	}
	return 0
}

func (x *NativeRequest_Asset_Image) GetHmin() int32 {
	if x != nil && x.Hmin != nil {
		return *x.Hmin
	}
	return 0
}

func (x *NativeRequest_Asset_Image) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

// OpenRTB Native 1.0: The Data Object is to be used for all non-core
// elements of the native unit such as Ratings, Review Count, Stars,
// Download count, descriptions etc. It is also generic for future of Native
// elements not contemplated at the time of the writing of this document.
type NativeRequest_Asset_Data struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Type ID of the element supported by the publisher. The publisher can
	// display this information in an appropriate format.
	// REQUIRED by the OpenRTB Native specification.
	Type *DataAssetType `protobuf:"varint,1,req,name=type,enum=com.google.openrtb.DataAssetType" json:"type,omitempty"`
	// Maximum length of the text in the element's response. Longer strings
	// may be truncated and ellipsized by Ad Exchange or the publisher during
	// rendering.
	Len *int32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (x *NativeRequest_Asset_Data) Reset() {
	*x = NativeRequest_Asset_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeRequest_Asset_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeRequest_Asset_Data) ProtoMessage() {}

func (x *NativeRequest_Asset_Data) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeRequest_Asset_Data.ProtoReflect.Descriptor instead.
func (*NativeRequest_Asset_Data) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{2, 0, 2}
}

var extRange_NativeRequest_Asset_Data = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeRequest_Asset_Data.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeRequest_Asset_Data) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeRequest_Asset_Data
}

func (x *NativeRequest_Asset_Data) GetType() DataAssetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DataAssetType_SPONSORED
}

func (x *NativeRequest_Asset_Data) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

// OpenRTB Native 1.0: Used for "call to action" assets, or other links from
// the Native ad. This Object should be associated to its peer object in the
// parent Asset Object or as the primary link in the top level NativeResponse
// object. When that peer object is activated (clicked) the action should take
// the user to the location of the link.
type NativeResponse_Link struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Landing URL of the clickable link.
	// REQUIRED by the OpenRTB Native specification.
	Url *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	// List of third-party tracker URLs to be fired on click of the URL.
	Clicktrackers []string `protobuf:"bytes,2,rep,name=clicktrackers" json:"clicktrackers,omitempty"`
	// Fallback URL for deeplink. To be used if the URL given in url is not
	// supported by the device.
	Fallback *string `protobuf:"bytes,3,opt,name=fallback" json:"fallback,omitempty"`
}

func (x *NativeResponse_Link) Reset() {
	*x = NativeResponse_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Link) ProtoMessage() {}

func (x *NativeResponse_Link) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Link.ProtoReflect.Descriptor instead.
func (*NativeResponse_Link) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3, 0}
}

var extRange_NativeResponse_Link = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Link.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Link) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Link
}

func (x *NativeResponse_Link) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *NativeResponse_Link) GetClicktrackers() []string {
	if x != nil {
		return x.Clicktrackers
	}
	return nil
}

func (x *NativeResponse_Link) GetFallback() string {
	if x != nil && x.Fallback != nil {
		return *x.Fallback
	}
	return ""
}

// OpenRTB Native 1.0: Corresponds to the Asset Object in the request.
// The main container object for each asset requested or supported by Exchange
// on behalf of the rendering client. Any object that is required is to be
// flagged as such. Only one of the {title,img,video,data} objects should be
// present in each object. All others should be null/absent. The id is to be
// unique within the Asset array so that the response can be aligned.
type NativeResponse_Asset struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Unique asset ID, assigned by exchange, must match one of the asset IDs
	// in request.
	// REQUIRED in 1.0, or in 1.2 if embedded asset is being used.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Set to 1 if asset is required. (bidder requires it to be displayed).
	Required *bool `protobuf:"varint,2,opt,name=required,def=0" json:"required,omitempty"`
	// RECOMMENDED by the OpenRTB Native specification.
	//
	// Types that are assignable to AssetOneof:
	//	*NativeResponse_Asset_Title_
	//	*NativeResponse_Asset_Img
	//	*NativeResponse_Asset_Video_
	//	*NativeResponse_Asset_Data_
	AssetOneof isNativeResponse_Asset_AssetOneof `protobuf_oneof:"asset_oneof"`
	// Link object for call to actions.
	// This link object applies if the asset item is activated (clicked).
	// If there is no link object on the asset, the parent link object on the
	// bid response apply.
	Link *NativeResponse_Link `protobuf:"bytes,7,opt,name=link" json:"link,omitempty"`
}

// Default values for NativeResponse_Asset fields.
const (
	Default_NativeResponse_Asset_Required = bool(false)
)

func (x *NativeResponse_Asset) Reset() {
	*x = NativeResponse_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset) ProtoMessage() {}

func (x *NativeResponse_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3, 1}
}

var extRange_NativeResponse_Asset = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset
}

func (x *NativeResponse_Asset) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *NativeResponse_Asset) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return Default_NativeResponse_Asset_Required
}

func (m *NativeResponse_Asset) GetAssetOneof() isNativeResponse_Asset_AssetOneof {
	if m != nil {
		return m.AssetOneof
	}
	return nil
}

func (x *NativeResponse_Asset) GetTitle() *NativeResponse_Asset_Title {
	if x, ok := x.GetAssetOneof().(*NativeResponse_Asset_Title_); ok {
		return x.Title
	}
	return nil
}

func (x *NativeResponse_Asset) GetImg() *NativeResponse_Asset_Image {
	if x, ok := x.GetAssetOneof().(*NativeResponse_Asset_Img); ok {
		return x.Img
	}
	return nil
}

func (x *NativeResponse_Asset) GetVideo() *NativeResponse_Asset_Video {
	if x, ok := x.GetAssetOneof().(*NativeResponse_Asset_Video_); ok {
		return x.Video
	}
	return nil
}

func (x *NativeResponse_Asset) GetData() *NativeResponse_Asset_Data {
	if x, ok := x.GetAssetOneof().(*NativeResponse_Asset_Data_); ok {
		return x.Data
	}
	return nil
}

func (x *NativeResponse_Asset) GetLink() *NativeResponse_Link {
	if x != nil {
		return x.Link
	}
	return nil
}

type isNativeResponse_Asset_AssetOneof interface {
	isNativeResponse_Asset_AssetOneof()
}

type NativeResponse_Asset_Title_ struct {
	// Title object for title assets.
	Title *NativeResponse_Asset_Title `protobuf:"bytes,3,opt,name=title,oneof"`
}

type NativeResponse_Asset_Img struct {
	// Image object for image assets.
	Img *NativeResponse_Asset_Image `protobuf:"bytes,4,opt,name=img,oneof"`
}

type NativeResponse_Asset_Video_ struct {
	// Video object for video assets.
	// Note that in-stream video ads are not part of Native.
	// Native ads may contain a video as the ad creative itself.
	Video *NativeResponse_Asset_Video `protobuf:"bytes,5,opt,name=video,oneof"`
}

type NativeResponse_Asset_Data_ struct {
	// Data object for ratings, prices etc.
	Data *NativeResponse_Asset_Data `protobuf:"bytes,6,opt,name=data,oneof"`
}

func (*NativeResponse_Asset_Title_) isNativeResponse_Asset_AssetOneof() {}

func (*NativeResponse_Asset_Img) isNativeResponse_Asset_AssetOneof() {}

func (*NativeResponse_Asset_Video_) isNativeResponse_Asset_AssetOneof() {}

func (*NativeResponse_Asset_Data_) isNativeResponse_Asset_AssetOneof() {}

// OpenRTB Native 1.2: The event trackers response is an array of objects and
// specifies the types of events the bidder wishes to track and the
// URLs/information to track them. Bidder must only respond with methods
// indicated as available in the request. Note that most javascript trackers
// expect to be loaded at impression time, so it's not generally recommended
// for the buyer to respond with javascript trackers on other events, but the
// appropriateness of this is up to each buyer.
type NativeResponse_EventTracker struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Type of event to track.
	// REQUIRED if embedded asset is being used.
	Event *EventType `protobuf:"varint,1,opt,name=event,enum=com.google.openrtb.EventType" json:"event,omitempty"`
	// Type of tracking requested.
	// REQUIRED if embedded asset is being used.
	Method *EventTrackingMethod `protobuf:"varint,2,req,name=method,enum=com.google.openrtb.EventTrackingMethod" json:"method,omitempty"`
	// The URL of the image or js.
	// REQUIRED for image or js, optional for custom.
	Url *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
}

func (x *NativeResponse_EventTracker) Reset() {
	*x = NativeResponse_EventTracker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_EventTracker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_EventTracker) ProtoMessage() {}

func (x *NativeResponse_EventTracker) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_EventTracker.ProtoReflect.Descriptor instead.
func (*NativeResponse_EventTracker) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3, 2}
}

var extRange_NativeResponse_EventTracker = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_EventTracker.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_EventTracker) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_EventTracker
}

func (x *NativeResponse_EventTracker) GetEvent() EventType {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return EventType_IMPRESSION
}

func (x *NativeResponse_EventTracker) GetMethod() EventTrackingMethod {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return EventTrackingMethod_IMG
}

func (x *NativeResponse_EventTracker) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

// OpenRTB Native 1.0: Corresponds to the Title Object in the request,
// with the value filled in.
// If using assetsurl or dcourl response rather than embedded asset
// response, it is recommended that three title objects be provided, the
// length of each is less than or equal to the three recommended maximum
// title lengths (25,90,140).
type NativeResponse_Asset_Title struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The text associated with the text element.
	// REQUIRED by the OpenRTB Native specification.
	Text *string `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	// The length of the title being provided.
	// REQUIRED if using assetsurl/dcourl representation.
	// Implemented in 1.2
	Len *int32 `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
}

func (x *NativeResponse_Asset_Title) Reset() {
	*x = NativeResponse_Asset_Title{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset_Title) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset_Title) ProtoMessage() {}

func (x *NativeResponse_Asset_Title) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset_Title.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset_Title) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3, 1, 0}
}

var extRange_NativeResponse_Asset_Title = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset_Title.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset_Title) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset_Title
}

func (x *NativeResponse_Asset_Title) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *NativeResponse_Asset_Title) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

// OpenRTB Native 1.0: Corresponds to the Image Object in the request.
// The Image object to be used for all image elements of the Native ad
// such as Icons, Main Image, etc.
// It is recommended that if assetsurl/dcourl is being used rather than
// embbedded assets, that an image of each recommended aspect ratio
// (per ImageType enum) be provided for image type 3 (MAIN_IMAGE).
type NativeResponse_Asset_Image struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The type of image element being submitted from the ImageType enum.
	// REQUIRED for assetsurl or dcourl responses,
	// not required to embedded asset responses.
	// Implemented in 1.2
	Type *ImageAssetType `protobuf:"varint,4,opt,name=type,enum=com.google.openrtb.ImageAssetType" json:"type,omitempty"`
	// URL of the image asset.
	// REQUIRED by the OpenRTB Native specification.
	Url *string `protobuf:"bytes,1,req,name=url" json:"url,omitempty"`
	// Width of the image in pixels.
	// RECOMMENDED in 1.0, 1.1, or in 1.2 for embedded asset responses.
	// REQUIRED in 1.2 for assetsurl or dcourl if multiple assets
	// of the same type submitted.
	W *int32 `protobuf:"varint,2,opt,name=w" json:"w,omitempty"`
	// Height of the image in pixels.
	// RECOMMENDED in 1.0, 1.1, or in 1.2 for embedded asset responses.
	// REQUIRED in 1.2 for assetsurl or dcourl if multiple assets
	// of the same type submitted.
	H *int32 `protobuf:"varint,3,opt,name=h" json:"h,omitempty"`
}

func (x *NativeResponse_Asset_Image) Reset() {
	*x = NativeResponse_Asset_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset_Image) ProtoMessage() {}

func (x *NativeResponse_Asset_Image) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset_Image.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset_Image) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3, 1, 1}
}

var extRange_NativeResponse_Asset_Image = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset_Image.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset_Image) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset_Image
}

func (x *NativeResponse_Asset_Image) GetType() ImageAssetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ImageAssetType_ICON
}

func (x *NativeResponse_Asset_Image) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *NativeResponse_Asset_Image) GetW() int32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

func (x *NativeResponse_Asset_Image) GetH() int32 {
	if x != nil && x.H != nil {
		return *x.H
	}
	return 0
}

// OpenRTB Native 1.0: Corresponds to the Data Object in the request, with
// the value filled in. The Data Object is to be used for all miscellaneous
// elements of the native unit such as Brand Name, Ratings, Review Count,
// Stars, Downloads, etc. It is also generic for future of native elements
// not contemplated at the time of the writing of this document.
type NativeResponse_Asset_Data struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// The type of data element being submitted from the DataAssetTypes enum.
	// REQUIRED in 1.2 for assetsurl or dcourl responses.
	// Implemented in 1.2.
	Type *DataAssetType `protobuf:"varint,3,opt,name=type,enum=com.google.openrtb.DataAssetType" json:"type,omitempty"`
	// The length of the data element being submitted. Where applicable, must
	// comply with the recommended maximum lengths in the DataAssetType enum.
	// REQUIRED in 1.2 for assetsurl or dcourl responses.
	// Implemented in 1.2.
	Len *int32 `protobuf:"varint,4,opt,name=len" json:"len,omitempty"`
	// The optional formatted string name of the data type to be displayed.
	// DEPRECATED in 1.2.
	Label *string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	// The formatted string of data to be displayed. Can contain a formatted
	// value such as "5 stars" or "$10" or "3.4 stars out of 5".
	// REQUIRED by the OpenRTB Native specification.
	Value *string `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
}

func (x *NativeResponse_Asset_Data) Reset() {
	*x = NativeResponse_Asset_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset_Data) ProtoMessage() {}

func (x *NativeResponse_Asset_Data) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset_Data.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset_Data) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3, 1, 2}
}

var extRange_NativeResponse_Asset_Data = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset_Data.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset_Data) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset_Data
}

func (x *NativeResponse_Asset_Data) GetType() DataAssetType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DataAssetType_SPONSORED
}

func (x *NativeResponse_Asset_Data) GetLen() int32 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *NativeResponse_Asset_Data) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *NativeResponse_Asset_Data) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// OpenRTB Native 1.0: Corresponds to the Video Object in the request,
// yet containing a value of a conforming VAST tag as a value.
type NativeResponse_Asset_Video struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// VAST xml.
	// REQUIRED by the OpenRTB Native specification.
	Vasttag *string `protobuf:"bytes,1,req,name=vasttag" json:"vasttag,omitempty"`
}

func (x *NativeResponse_Asset_Video) Reset() {
	*x = NativeResponse_Asset_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_openrtb_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NativeResponse_Asset_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NativeResponse_Asset_Video) ProtoMessage() {}

func (x *NativeResponse_Asset_Video) ProtoReflect() protoreflect.Message {
	mi := &file_openrtb_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NativeResponse_Asset_Video.ProtoReflect.Descriptor instead.
func (*NativeResponse_Asset_Video) Descriptor() ([]byte, []int) {
	return file_openrtb_proto_rawDescGZIP(), []int{3, 1, 3}
}

var extRange_NativeResponse_Asset_Video = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 9999},
}

// Deprecated: Use NativeResponse_Asset_Video.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*NativeResponse_Asset_Video) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_NativeResponse_Asset_Video
}

func (x *NativeResponse_Asset_Video) GetVasttag() string {
	if x != nil && x.Vasttag != nil {
		return *x.Vasttag
	}
	return ""
}

var File_openrtb_proto protoreflect.FileDescriptor

var file_openrtb_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x22, 0xd2, 0x45, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x69, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x52, 0x03, 0x69, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x3d, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x72, 0x65,
	0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x73, 0x52, 0x04, 0x72,
	0x65, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x02,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x52, 0x02, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6d, 0x61, 0x78, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x73, 0x65, 0x61, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x77, 0x73, 0x65, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x70, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x61,
	0x6c, 0x6c, 0x69, 0x6d, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x75, 0x72, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x75, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x63, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x63, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x64, 0x76, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x64, 0x76,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x70, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x61, 0x70, 0x70, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x73, 0x65, 0x61, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x73, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x49, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x02, 0x66, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2a, 0x05,
	0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xb4, 0x22, 0x0a, 0x03, 0x49, 0x6d, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a,
	0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d,
	0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x3e, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x49, 0x6d, 0x70, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x67, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x30, 0x52, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x12, 0x25, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x03, 0x55, 0x53, 0x44, 0x52, 0x0b, 0x62, 0x69, 0x64,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x62, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x70, 0x6d, 0x70, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x50, 0x6d, 0x70, 0x52, 0x03, 0x70,
	0x6d, 0x70, 0x12, 0x41, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x1a, 0x51, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xc6, 0x05,
	0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x68, 0x12, 0x48, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x04, 0x77, 0x6d, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x04, 0x77, 0x6d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x04, 0x68, 0x6d, 0x61, 0x78, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6d, 0x61, 0x78, 0x12, 0x16,
	0x0a, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x41, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x3a, 0x0a, 0x05, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x05,
	0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x64, 0x69, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x65, 0x78,
	0x70, 0x64, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x63, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x76, 0x63, 0x6d, 0x1a, 0x6f,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a,
	0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x8a, 0x0b, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x6d, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69,
	0x70, 0x6d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x61, 0x74,
	0x74, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x62, 0x6f, 0x78, 0x69, 0x6e, 0x67, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75,
	0x65, 0x52, 0x0d, 0x62, 0x6f, 0x78, 0x69, 0x6e, 0x67, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x49, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x4b, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x12, 0x5f, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x5f, 0x32, 0x31, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x32, 0x31, 0x12, 0x36, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x50,
	0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x65, 0x73, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x1a, 0x57, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x1a, 0xce, 0x06, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x02, 0x10, 0x01, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f,
	0x6e, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61,
	0x64, 0x12, 0x36, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x4b, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x73, 0x65, 0x71,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x73, 0x65, 0x71, 0x12, 0x30,
	0x0a, 0x04, 0x66, 0x65, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x74, 0x69, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x04,
	0x6e, 0x76, 0x6f, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x76, 0x6f, 0x6c, 0x2a, 0x05, 0x08,
	0x64, 0x10, 0x90, 0x4e, 0x1a, 0x93, 0x02, 0x0a, 0x06, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x1a, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x03, 0x61, 0x70, 0x69,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x61, 0x70,
	0x69, 0x12, 0x3f, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x62, 0x61, 0x74,
	0x74, 0x72, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x0f, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x1a, 0xc8, 0x02, 0x0a, 0x03, 0x50,
	0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x50, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x05,
	0x64, 0x65, 0x61, 0x6c, 0x73, 0x1a, 0xc6, 0x01, 0x0a, 0x04, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x3a, 0x01, 0x30, 0x52, 0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x25, 0x0a,
	0x0b, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x03, 0x55, 0x53, 0x44, 0x52, 0x0b, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f,
	0x72, 0x63, 0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x73, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x73, 0x65, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x02, 0x61, 0x74, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05,
	0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xb7, 0x03, 0x0a,
	0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x63, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2a,
	0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xba, 0x03, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x75, 0x72, 0x6c, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x1a, 0x60, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2a, 0x05,
	0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xf6, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x72, 0x63, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x3b, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x64, 0x71, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x64, 0x71, 0x12, 0x4d, 0x0a, 0x0c, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x32, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x32, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69,
	0x76, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12,
	0x4a, 0x0a, 0x0e, 0x71, 0x61, 0x67, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x51, 0x41, 0x47,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x71, 0x61, 0x67,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x5f,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a,
	0x91, 0x06, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x75, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x34, 0x0a, 0x03,
	0x67, 0x65, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x03, 0x67,
	0x65, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x64, 0x6d, 0x64, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x70, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x70, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x70, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x70, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70,
	0x76, 0x36, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x73, 0x76, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x73, 0x76,
	0x12, 0x10, 0x0a, 0x03, 0x68, 0x77, 0x76, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68,
	0x77, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77,
	0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x70, 0x69, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x70, 0x69,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x78, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x70, 0x78, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6a, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6a, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x65,
	0x6f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x67, 0x65,
	0x6f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x76, 0x65, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x76, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x66, 0x61, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x66, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x73, 0x68, 0x61, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x73, 0x68, 0x61, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x63, 0x6d, 0x64, 0x35, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x6d,
	0x64, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6d, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x6c, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x63, 0x63, 0x6d, 0x6e, 0x63, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x63, 0x63, 0x6d, 0x6e, 0x63, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x1a, 0x91, 0x03, 0x0a, 0x03, 0x47, 0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x70, 0x73, 0x31,
	0x30, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x66, 0x69, 0x70, 0x73, 0x31, 0x30, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x7a, 0x69, 0x70, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x69, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x69, 0x78, 0x12,
	0x41, 0x0a, 0x09, 0x69, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x09, 0x69, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x8e, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x65, 0x72, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x79, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x79, 0x6f, 0x62, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0xc4, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x4a, 0x0a, 0x07,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a,
	0x23, 0x0a, 0x04, 0x52, 0x65, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x70, 0x70, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x2a, 0x05, 0x08,
	0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x1b, 0x0a, 0x19, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x87, 0x09, 0x0a, 0x0b, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74,
	0x62, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x42,
	0x69, 0x64, 0x52, 0x07, 0x73, 0x65, 0x61, 0x74, 0x62, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x69, 0x64, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x69, 0x64, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x75, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x03, 0x6e, 0x62, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x6f, 0x42, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x52, 0x03, 0x6e, 0x62, 0x72, 0x1a, 0xa2, 0x07, 0x0a, 0x07, 0x53, 0x65, 0x61, 0x74, 0x42,
	0x69, 0x64, 0x12, 0x3d, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x72, 0x74, 0x62, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x61, 0x74, 0x42, 0x69, 0x64, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x03, 0x62, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x65, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x1a, 0x9f, 0x06, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x70, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x03, 0x61, 0x64, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x64, 0x6d, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x64, 0x6d, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x64,
	0x6d, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x72, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x72, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04,
	0x61, 0x74, 0x74, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x0e, 0x71, 0x61, 0x67, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x51, 0x41, 0x47, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e,
	0x71, 0x61, 0x67, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x65, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x65, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x62, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x75, 0x72, 0x6c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x63, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x77, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x0b, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x5f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10,
	0x90, 0x4e, 0x22, 0x97, 0x0b, 0x0a, 0x0d, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x49, 0x64, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x34, 0x0a, 0x06,
	0x61, 0x64, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x52, 0x06, 0x61, 0x64, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4a, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x6c, 0x63,
	0x6d, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x70, 0x6c, 0x63, 0x6d, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x70, 0x6c,
	0x63, 0x6d, 0x74, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52,
	0x08, 0x70, 0x6c, 0x63, 0x6d, 0x74, 0x63, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x03, 0x73, 0x65, 0x71,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x3f,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x75, 0x72, 0x6c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x72, 0x6c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x6c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x75, 0x72, 0x6c, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x55, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x1a, 0xfd, 0x04, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x41, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6d, 0x67, 0x12, 0x40, 0x0a, 0x05, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x2e, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x42, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x20, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x1a, 0xa0, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x77, 0x6d, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x68, 0x6d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x2a,
	0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x56, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05,
	0x08, 0x64, 0x10, 0x90, 0x4e, 0x42, 0x0d, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x1a, 0x8e, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x2a, 0x05,
	0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x22, 0x96, 0x0b, 0x0a,
	0x0e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x75, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x63, 0x6f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x63, 0x6f, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x70,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6a, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72,
	0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x0d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x1a, 0x61, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x81, 0x06, 0x0a, 0x05, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x2e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x42, 0x0a, 0x03, 0x69, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74,
	0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x69, 0x6d, 0x67, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x43, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x4e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x3b, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x34, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x2a, 0x05, 0x08, 0x64,
	0x10, 0x90, 0x4e, 0x1a, 0x74, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x68, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x82, 0x01, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x1a, 0x28,
	0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x73, 0x74, 0x74,
	0x61, 0x67, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x73, 0x74, 0x74, 0x61,
	0x67, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x42,
	0x0d, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x1a, 0x9d,
	0x01, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x33, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x72, 0x74, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x2a, 0x05, 0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0x05,
	0x08, 0x64, 0x10, 0x90, 0x4e, 0x2a, 0xda, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x31,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x31, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x32, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x31, 0x5f, 0x33, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x34,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x35, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x31, 0x5f, 0x36, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x31, 0x5f, 0x37, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x32, 0x10, 0x09,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x32, 0x5f, 0x32, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32,
	0x5f, 0x33, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x34, 0x10, 0x0d,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x35, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x32, 0x5f, 0x36, 0x10, 0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32,
	0x5f, 0x37, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x38, 0x10, 0x11,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x39, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x30, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x32, 0x5f, 0x31, 0x31, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31,
	0x32, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x33, 0x10, 0x16,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x34, 0x10, 0x17, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x35, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x32, 0x5f, 0x31, 0x36, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f,
	0x31, 0x37, 0x10, 0x1a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x38, 0x10,
	0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x31, 0x39, 0x10, 0x1c, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x32, 0x30, 0x10, 0x1d, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x32, 0x5f, 0x32, 0x31, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32,
	0x5f, 0x32, 0x32, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x5f, 0x32, 0x33,
	0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x33, 0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x33, 0x5f, 0x31, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33,
	0x5f, 0x32, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x33, 0x10, 0x24,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x34, 0x10, 0x25, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x33, 0x5f, 0x35, 0x10, 0x26, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33,
	0x5f, 0x36, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x37, 0x10, 0x28,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x38, 0x10, 0x29, 0x12, 0x0a, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x33, 0x5f, 0x39, 0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x33,
	0x5f, 0x31, 0x30, 0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x31, 0x31,
	0x10, 0x2c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x33, 0x5f, 0x31, 0x32, 0x10, 0x2d, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x34, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x34, 0x5f, 0x31, 0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x32, 0x10,
	0x30, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x33, 0x10, 0x31, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x34, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x34, 0x5f, 0x35, 0x10, 0x33, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x36, 0x10,
	0x34, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x37, 0x10, 0x35, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x38, 0x10, 0x36, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x34, 0x5f, 0x39, 0x10, 0x37, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x31, 0x30,
	0x10, 0x38, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x34, 0x5f, 0x31, 0x31, 0x10, 0x39, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x35, 0x10, 0x3a, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x35, 0x5f, 0x31, 0x10, 0x3b, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x32, 0x10,
	0x3c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x33, 0x10, 0x3d, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x34, 0x10, 0x3e, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x35, 0x5f, 0x35, 0x10, 0x3f, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x36, 0x10,
	0x40, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x37, 0x10, 0x41, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x38, 0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x35, 0x5f, 0x39, 0x10, 0x43, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x31, 0x30,
	0x10, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x31, 0x31, 0x10, 0x45, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x31, 0x32, 0x10, 0x46, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x35, 0x5f, 0x31, 0x33, 0x10, 0x47, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x35, 0x5f, 0x31, 0x34, 0x10, 0x48, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x35, 0x5f, 0x31,
	0x35, 0x10, 0x49, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x36, 0x10, 0x4a, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x31, 0x10, 0x4b, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x36, 0x5f, 0x32, 0x10, 0x4c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x33, 0x10,
	0x4d, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x34, 0x10, 0x4e, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x35, 0x10, 0x4f, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x36, 0x5f, 0x36, 0x10, 0x50, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x37, 0x10,
	0x51, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x38, 0x10, 0x52, 0x12, 0x0a, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x36, 0x5f, 0x39, 0x10, 0x53, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x41, 0x42,
	0x37, 0x10, 0x54, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x10, 0x55, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x10, 0x56, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x41, 0x42, 0x37, 0x5f, 0x33, 0x10, 0x57, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f,
	0x34, 0x10, 0x58, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x35, 0x10, 0x59, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x36, 0x10, 0x5a, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x41, 0x42, 0x37, 0x5f, 0x37, 0x10, 0x5b, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f,
	0x38, 0x10, 0x5c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x39, 0x10, 0x5d, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x30, 0x10, 0x5e, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x31, 0x10, 0x5f, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x37, 0x5f, 0x31, 0x32, 0x10, 0x60, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31,
	0x33, 0x10, 0x61, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x34, 0x10, 0x62,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x35, 0x10, 0x63, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x36, 0x10, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x37, 0x5f, 0x31, 0x37, 0x10, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f,
	0x31, 0x38, 0x10, 0x66, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x31, 0x39, 0x10,
	0x67, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x30, 0x10, 0x68, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x31, 0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x37, 0x5f, 0x32, 0x32, 0x10, 0x6a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37,
	0x5f, 0x32, 0x33, 0x10, 0x6b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x34,
	0x10, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x35, 0x10, 0x6d, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x36, 0x10, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x37, 0x5f, 0x32, 0x37, 0x10, 0x6f, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x37, 0x5f, 0x32, 0x38, 0x10, 0x70, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x32,
	0x39, 0x10, 0x71, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x30, 0x10, 0x72,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x31, 0x10, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x32, 0x10, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x37, 0x5f, 0x33, 0x33, 0x10, 0x75, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f,
	0x33, 0x34, 0x10, 0x76, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x35, 0x10,
	0x77, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x36, 0x10, 0x78, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x33, 0x37, 0x10, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x37, 0x5f, 0x33, 0x38, 0x10, 0x7a, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37,
	0x5f, 0x33, 0x39, 0x10, 0x7b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x34, 0x30,
	0x10, 0x7c, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x34, 0x31, 0x10, 0x7d, 0x12,
	0x0b, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f, 0x34, 0x32, 0x10, 0x7e, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x37, 0x5f, 0x34, 0x33, 0x10, 0x7f, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x37, 0x5f, 0x34, 0x34, 0x10, 0x80, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x37, 0x5f,
	0x34, 0x35, 0x10, 0x81, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x38, 0x10, 0x82, 0x01,
	0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x10, 0x83, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x32, 0x10, 0x84, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41,
	0x42, 0x38, 0x5f, 0x33, 0x10, 0x85, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f,
	0x34, 0x10, 0x86, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x35, 0x10, 0x87,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x36, 0x10, 0x88, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x37, 0x10, 0x89, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49,
	0x41, 0x42, 0x38, 0x5f, 0x38, 0x10, 0x8a, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x38,
	0x5f, 0x39, 0x10, 0x8b, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x30,
	0x10, 0x8c, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x31, 0x10, 0x8d,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x32, 0x10, 0x8e, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x33, 0x10, 0x8f, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x34, 0x10, 0x90, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x38, 0x5f, 0x31, 0x35, 0x10, 0x91, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x38, 0x5f, 0x31, 0x36, 0x10, 0x92, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f,
	0x31, 0x37, 0x10, 0x93, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x38, 0x5f, 0x31, 0x38,
	0x10, 0x94, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x49, 0x41, 0x42, 0x39, 0x10, 0x95, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x10, 0x96, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49,
	0x41, 0x42, 0x39, 0x5f, 0x32, 0x10, 0x97, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39,
	0x5f, 0x33, 0x10, 0x98, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x34, 0x10,
	0x99, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x35, 0x10, 0x9a, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x36, 0x10, 0x9b, 0x01, 0x12, 0x0b, 0x0a, 0x06,
	0x49, 0x41, 0x42, 0x39, 0x5f, 0x37, 0x10, 0x9c, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42,
	0x39, 0x5f, 0x38, 0x10, 0x9d, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x39,
	0x10, 0x9e, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x30, 0x10, 0x9f,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x31, 0x10, 0xa0, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x32, 0x10, 0xa1, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x33, 0x10, 0xa2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x39, 0x5f, 0x31, 0x34, 0x10, 0xa3, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x39, 0x5f, 0x31, 0x35, 0x10, 0xa4, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f,
	0x31, 0x36, 0x10, 0xa5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x37,
	0x10, 0xa6, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x38, 0x10, 0xa7,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x31, 0x39, 0x10, 0xa8, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x30, 0x10, 0xa9, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x31, 0x10, 0xaa, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x39, 0x5f, 0x32, 0x32, 0x10, 0xab, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x39, 0x5f, 0x32, 0x33, 0x10, 0xac, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f,
	0x32, 0x34, 0x10, 0xad, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x35,
	0x10, 0xae, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x36, 0x10, 0xaf,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x37, 0x10, 0xb0, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x38, 0x10, 0xb1, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x39, 0x5f, 0x32, 0x39, 0x10, 0xb2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x39, 0x5f, 0x33, 0x30, 0x10, 0xb3, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x39, 0x5f, 0x33, 0x31, 0x10, 0xb4, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x30,
	0x10, 0xb5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x31, 0x10, 0xb6,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x32, 0x10, 0xb7, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x33, 0x10, 0xb8, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x34, 0x10, 0xb9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x30, 0x5f, 0x35, 0x10, 0xba, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x30, 0x5f, 0x36, 0x10, 0xbb, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30,
	0x5f, 0x37, 0x10, 0xbc, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x38,
	0x10, 0xbd, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x30, 0x5f, 0x39, 0x10, 0xbe,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x31, 0x10, 0xbf, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x31, 0x5f, 0x31, 0x10, 0xc0, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x31, 0x5f, 0x32, 0x10, 0xc1, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x31, 0x5f, 0x33, 0x10, 0xc2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x31,
	0x5f, 0x34, 0x10, 0xc3, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x31, 0x5f, 0x35,
	0x10, 0xc4, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x32, 0x10, 0xc5, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x32, 0x5f, 0x31, 0x10, 0xc6, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x32, 0x5f, 0x32, 0x10, 0xc7, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x32, 0x5f, 0x33, 0x10, 0xc8, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42,
	0x31, 0x33, 0x10, 0xc9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x31,
	0x10, 0xca, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x32, 0x10, 0xcb,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x33, 0x10, 0xcc, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x34, 0x10, 0xcd, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x35, 0x10, 0xce, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x33, 0x5f, 0x36, 0x10, 0xcf, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x33, 0x5f, 0x37, 0x10, 0xd0, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33,
	0x5f, 0x38, 0x10, 0xd1, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x39,
	0x10, 0xd2, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x31, 0x30, 0x10,
	0xd3, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x31, 0x31, 0x10, 0xd4,
	0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x33, 0x5f, 0x31, 0x32, 0x10, 0xd5, 0x01,
	0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x34, 0x10, 0xd6, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x31, 0x10, 0xd7, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x31, 0x34, 0x5f, 0x32, 0x10, 0xd8, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x34, 0x5f, 0x33, 0x10, 0xd9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f,
	0x34, 0x10, 0xda, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x35, 0x10,
	0xdb, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x36, 0x10, 0xdc, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x37, 0x10, 0xdd, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x34, 0x5f, 0x38, 0x10, 0xde, 0x01, 0x12, 0x0a, 0x0a, 0x05,
	0x49, 0x41, 0x42, 0x31, 0x35, 0x10, 0xdf, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x35, 0x5f, 0x31, 0x10, 0xe0, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f,
	0x32, 0x10, 0xe1, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x33, 0x10,
	0xe2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x34, 0x10, 0xe3, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x35, 0x10, 0xe4, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x36, 0x10, 0xe5, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x35, 0x5f, 0x37, 0x10, 0xe6, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x31, 0x35, 0x5f, 0x38, 0x10, 0xe7, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x35, 0x5f, 0x39, 0x10, 0xe8, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x35, 0x5f,
	0x31, 0x30, 0x10, 0xe9, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x36, 0x10, 0xea,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x36, 0x5f, 0x31, 0x10, 0xeb, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x36, 0x5f, 0x32, 0x10, 0xec, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x36, 0x5f, 0x33, 0x10, 0xed, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x36, 0x5f, 0x34, 0x10, 0xee, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x36, 0x5f, 0x35, 0x10, 0xef, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x36,
	0x5f, 0x36, 0x10, 0xf0, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x36, 0x5f, 0x37,
	0x10, 0xf1, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x31, 0x37, 0x10, 0xf2, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x10, 0xf3, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x10, 0xf4, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x10, 0xf5, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x31, 0x37, 0x5f, 0x34, 0x10, 0xf6, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37,
	0x5f, 0x35, 0x10, 0xf7, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x36,
	0x10, 0xf8, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x37, 0x10, 0xf9,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x38, 0x10, 0xfa, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x39, 0x10, 0xfb, 0x01, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x30, 0x10, 0xfc, 0x01, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x31, 0x10, 0xfd, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x32, 0x10, 0xfe, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x31, 0x37, 0x5f, 0x31, 0x33, 0x10, 0xff, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42,
	0x31, 0x37, 0x5f, 0x31, 0x34, 0x10, 0x80, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31,
	0x37, 0x5f, 0x31, 0x35, 0x10, 0x81, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37,
	0x5f, 0x31, 0x36, 0x10, 0x82, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f,
	0x31, 0x37, 0x10, 0x83, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31,
	0x38, 0x10, 0x84, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x31, 0x39,
	0x10, 0x85, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x30, 0x10,
	0x86, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x31, 0x10, 0x87,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x32, 0x10, 0x88, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x33, 0x10, 0x89, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x34, 0x10, 0x8a, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x35, 0x10, 0x8b, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x36, 0x10, 0x8c, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x37, 0x10, 0x8d, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x37, 0x5f, 0x32, 0x38, 0x10, 0x8e, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x31, 0x37, 0x5f, 0x32, 0x39, 0x10, 0x8f, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42,
	0x31, 0x37, 0x5f, 0x33, 0x30, 0x10, 0x90, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31,
	0x37, 0x5f, 0x33, 0x31, 0x10, 0x91, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37,
	0x5f, 0x33, 0x32, 0x10, 0x92, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f,
	0x33, 0x33, 0x10, 0x93, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33,
	0x34, 0x10, 0x94, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x35,
	0x10, 0x95, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x36, 0x10,
	0x96, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x37, 0x10, 0x97,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x38, 0x10, 0x98, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x33, 0x39, 0x10, 0x99, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x30, 0x10, 0x9a, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x31, 0x10, 0x9b, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x32, 0x10, 0x9c, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x33, 0x10, 0x9d, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x37, 0x5f, 0x34, 0x34, 0x10, 0x9e, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41,
	0x42, 0x31, 0x38, 0x10, 0x9f, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f,
	0x31, 0x10, 0xa0, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x32, 0x10,
	0xa1, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x33, 0x10, 0xa2, 0x02,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x34, 0x10, 0xa3, 0x02, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x35, 0x10, 0xa4, 0x02, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x38, 0x5f, 0x36, 0x10, 0xa5, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41,
	0x42, 0x31, 0x39, 0x10, 0xa6, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f,
	0x31, 0x10, 0xa7, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x10,
	0xa8, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x10, 0xa9, 0x02,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x34, 0x10, 0xaa, 0x02, 0x12, 0x0c,
	0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x35, 0x10, 0xab, 0x02, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x36, 0x10, 0xac, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x31, 0x39, 0x5f, 0x37, 0x10, 0xad, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31,
	0x39, 0x5f, 0x38, 0x10, 0xae, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f,
	0x39, 0x10, 0xaf, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x30,
	0x10, 0xb0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x31, 0x10,
	0xb1, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x32, 0x10, 0xb2,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x33, 0x10, 0xb3, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x34, 0x10, 0xb4, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x35, 0x10, 0xb5, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x36, 0x10, 0xb6, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x37, 0x10, 0xb7, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x38, 0x10, 0xb8, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x39, 0x5f, 0x31, 0x39, 0x10, 0xb9, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x31, 0x39, 0x5f, 0x32, 0x30, 0x10, 0xba, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42,
	0x31, 0x39, 0x5f, 0x32, 0x31, 0x10, 0xbb, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31,
	0x39, 0x5f, 0x32, 0x32, 0x10, 0xbc, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39,
	0x5f, 0x32, 0x33, 0x10, 0xbd, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f,
	0x32, 0x34, 0x10, 0xbe, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32,
	0x35, 0x10, 0xbf, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x36,
	0x10, 0xc0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x37, 0x10,
	0xc1, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x38, 0x10, 0xc2,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x32, 0x39, 0x10, 0xc3, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x30, 0x10, 0xc4, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x31, 0x10, 0xc5, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x32, 0x10, 0xc6, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x33, 0x10, 0xc7, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x34, 0x10, 0xc8, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x31, 0x39, 0x5f, 0x33, 0x35, 0x10, 0xc9, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x31, 0x39, 0x5f, 0x33, 0x36, 0x10, 0xca, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42,
	0x32, 0x30, 0x10, 0xcb, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31,
	0x10, 0xcc, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32, 0x10, 0xcd,
	0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x33, 0x10, 0xce, 0x02, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x34, 0x10, 0xcf, 0x02, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x35, 0x10, 0xd0, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x32, 0x30, 0x5f, 0x36, 0x10, 0xd1, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x32, 0x30, 0x5f, 0x37, 0x10, 0xd2, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30,
	0x5f, 0x38, 0x10, 0xd3, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x39,
	0x10, 0xd4, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x30, 0x10,
	0xd5, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x31, 0x10, 0xd6,
	0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x32, 0x10, 0xd7, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x33, 0x10, 0xd8, 0x02, 0x12,
	0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x34, 0x10, 0xd9, 0x02, 0x12, 0x0d,
	0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x35, 0x10, 0xda, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x36, 0x10, 0xdb, 0x02, 0x12, 0x0d, 0x0a, 0x08,
	0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x37, 0x10, 0xdc, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49,
	0x41, 0x42, 0x32, 0x30, 0x5f, 0x31, 0x38, 0x10, 0xdd, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41,
	0x42, 0x32, 0x30, 0x5f, 0x31, 0x39, 0x10, 0xde, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42,
	0x32, 0x30, 0x5f, 0x32, 0x30, 0x10, 0xdf, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32,
	0x30, 0x5f, 0x32, 0x31, 0x10, 0xe0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30,
	0x5f, 0x32, 0x32, 0x10, 0xe1, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f,
	0x32, 0x33, 0x10, 0xe2, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32,
	0x34, 0x10, 0xe3, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32, 0x35,
	0x10, 0xe4, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32, 0x36, 0x10,
	0xe5, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x30, 0x5f, 0x32, 0x37, 0x10, 0xe6,
	0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x31, 0x10, 0xe7, 0x02, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x32, 0x31, 0x5f, 0x31, 0x10, 0xe8, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x32, 0x31, 0x5f, 0x32, 0x10, 0xe9, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x32, 0x31, 0x5f, 0x33, 0x10, 0xea, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x32,
	0x10, 0xeb, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x32, 0x5f, 0x31, 0x10, 0xec,
	0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x32, 0x5f, 0x32, 0x10, 0xed, 0x02, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x32, 0x5f, 0x33, 0x10, 0xee, 0x02, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x32, 0x32, 0x5f, 0x34, 0x10, 0xef, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49,
	0x41, 0x42, 0x32, 0x33, 0x10, 0xf0, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33,
	0x5f, 0x31, 0x10, 0xf1, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x32,
	0x10, 0xf2, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x33, 0x10, 0xf3,
	0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x34, 0x10, 0xf4, 0x02, 0x12,
	0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x35, 0x10, 0xf5, 0x02, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x36, 0x10, 0xf6, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x41, 0x42, 0x32, 0x33, 0x5f, 0x37, 0x10, 0xf7, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42,
	0x32, 0x33, 0x5f, 0x38, 0x10, 0xf8, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x33,
	0x5f, 0x39, 0x10, 0xf9, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x41, 0x42, 0x32, 0x33, 0x5f, 0x31,
	0x30, 0x10, 0xfa, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x34, 0x10, 0xfb, 0x02,
	0x12, 0x0a, 0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x35, 0x10, 0xfc, 0x02, 0x12, 0x0c, 0x0a, 0x07,
	0x49, 0x41, 0x42, 0x32, 0x35, 0x5f, 0x31, 0x10, 0xfd, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x32, 0x35, 0x5f, 0x32, 0x10, 0xfe, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32,
	0x35, 0x5f, 0x33, 0x10, 0xff, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x35, 0x5f,
	0x34, 0x10, 0x80, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x35, 0x5f, 0x35, 0x10,
	0x81, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x35, 0x5f, 0x36, 0x10, 0x82, 0x03,
	0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x35, 0x5f, 0x37, 0x10, 0x83, 0x03, 0x12, 0x0a,
	0x0a, 0x05, 0x49, 0x41, 0x42, 0x32, 0x36, 0x10, 0x84, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41,
	0x42, 0x32, 0x36, 0x5f, 0x31, 0x10, 0x85, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32,
	0x36, 0x5f, 0x32, 0x10, 0x86, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x36, 0x5f,
	0x33, 0x10, 0x87, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x41, 0x42, 0x32, 0x36, 0x5f, 0x34, 0x10,
	0x88, 0x03, 0x2a, 0x41, 0x0a, 0x0b, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x55, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x58, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x58, 0x48, 0x54, 0x4d,
	0x4c, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x4a, 0x41, 0x56, 0x41, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x41, 0x44, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x2a, 0xac, 0x03, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x44, 0x49, 0x4f,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x58, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x45,
	0x58, 0x50, 0x41, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45,
	0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x06, 0x12, 0x22, 0x0a,
	0x1e, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x49, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x50, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52,
	0x4f, 0x56, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x47,
	0x47, 0x45, 0x53, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x4e,
	0x4f, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x52, 0x56, 0x45,
	0x59, 0x53, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x53, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4f, 0x52, 0x5f, 0x41,
	0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x1b, 0x0a, 0x17,
	0x48, 0x41, 0x53, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46,
	0x5f, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x5f,
	0x43, 0x41, 0x4e, 0x5f, 0x42, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x10,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x10, 0x11, 0x2a, 0x66, 0x0a, 0x0c, 0x41,
	0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0b, 0x0a, 0x07, 0x56,
	0x50, 0x41, 0x49, 0x44, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x50, 0x41, 0x49,
	0x44, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x31,
	0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x4d, 0x4d, 0x41, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x32, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x33, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4d, 0x49, 0x44, 0x5f,
	0x31, 0x10, 0x07, 0x2a, 0xa8, 0x01, 0x0a, 0x0a, 0x41, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46, 0x4f, 0x4c,
	0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x4c, 0x59, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x54,
	0x48, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x45, 0x4c,
	0x4f, 0x57, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4f,
	0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x49, 0x44, 0x45, 0x42, 0x41, 0x52,
	0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x07, 0x2a, 0x2c,
	0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x02, 0x2a, 0xc0, 0x01, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53,
	0x54, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f,
	0x32, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f,
	0x30, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x5f,
	0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x53,
	0x54, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50,
	0x50, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x5f,
	0x30, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x34, 0x5f, 0x30, 0x5f,
	0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x41,
	0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x41, 0x53,
	0x54, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x0a, 0x2a,
	0x8d, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f, 0x54, 0x4f, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x55, 0x53, 0x45, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x06, 0x2a,
	0x59, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x0c, 0x0a,
	0x08, 0x50, 0x52, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x10, 0x47,
	0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x4d, 0x49, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1e, 0x0a, 0x11, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10,
	0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0xae, 0x01, 0x0a, 0x12, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x5f,
	0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x2a, 0x63, 0x0a, 0x15, 0x50,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x65, 0x73, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x45, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03,
	0x2a, 0x79, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54,
	0x48, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x49, 0x46, 0x49,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x32, 0x47, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x33, 0x47, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x34, 0x47, 0x10, 0x06, 0x2a, 0x57, 0x0a, 0x13, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50,
	0x41, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x53, 0x43, 0x52, 0x45,
	0x45, 0x4e, 0x10, 0x05, 0x2a, 0x37, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x6b, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41,
	0x4d, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x2a, 0x5c, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x13, 0x0a, 0x0f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x53, 0x55, 0x4d,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x3b, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x50, 0x53, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x50,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x4b, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x50, 0x32, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x55,
	0x53, 0x54, 0x41, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x58, 0x4d, 0x49, 0x4e,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x54, 0x41, 0x43, 0x55, 0x49, 0x54, 0x59,
	0x10, 0x04, 0x2a, 0x87, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x5f, 0x54, 0x56, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x49, 0x47, 0x48, 0x45, 0x4e,
	0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x54, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x45, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x58, 0x10, 0x07, 0x2a, 0x3b, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d,
	0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x2a, 0x45, 0x0a, 0x0e, 0x51, 0x41, 0x47,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x0a, 0x0d, 0x41,
	0x4c, 0x4c, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x56, 0x45, 0x52, 0x59, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f,
	0x31, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x03,
	0x2a, 0x8d, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x42, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x45, 0x42, 0x5f, 0x53, 0x50, 0x49, 0x44, 0x45,
	0x52, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55, 0x53, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x5f, 0x4e, 0x4f, 0x4e, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49,
	0x43, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x58, 0x59, 0x49, 0x50, 0x10,
	0x05, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41,
	0x49, 0x4c, 0x59, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x0a,
	0x2a, 0xfb, 0x05, 0x0a, 0x0a, 0x4c, 0x6f, 0x73, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x49, 0x44, 0x5f, 0x57, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x50, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x49, 0x44,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x4f, 0x4d, 0x41,
	0x49, 0x4e, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x55, 0x50, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x08, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x10, 0x09, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x49, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x10,
	0x64, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x10, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4c,
	0x4f, 0x53, 0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x66,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x50, 0x4d, 0x50, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x10, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x68, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0xc8, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xc9, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0xca, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0xcb, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xcc, 0x01, 0x12,
	0x22, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45,
	0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0xcd, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xce, 0x01,
	0x12, 0x18, 0x0a, 0x13, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x10, 0xcf, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f,
	0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xd0, 0x01, 0x12, 0x20, 0x0a, 0x1b,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xd1, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49,
	0x42, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xd2,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x44,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xd3,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x4e,
	0x49, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0xd4, 0x01, 0x12,
	0x1d, 0x0a, 0x18, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x50, 0x4d, 0x50, 0x10, 0xd5, 0x01, 0x2a, 0x39,
	0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x55,
	0x53, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x4f, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x17, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x45, 0x41, 0x4b, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d,
	0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f, 0x55, 0x44, 0x4e, 0x45, 0x53, 0x53, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x56, 0x4f, 0x4c, 0x55,
	0x4d, 0x45, 0x10, 0x04, 0x2a, 0x74, 0x0a, 0x08, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x45, 0x57, 0x53, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x41, 0x52, 0x4f, 0x55, 0x53, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x49, 0x44, 0x10, 0x07, 0x2a, 0x7c, 0x0a, 0x08, 0x41, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57,
	0x49, 0x44, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x4d, 0x4f,
	0x54, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x49, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x44, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x55, 0x4e, 0x49, 0x54, 0x49, 0x44, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x05, 0x2a, 0x33, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x03, 0x2a, 0x94, 0x02,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x49, 0x58, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x43, 0x4c,
	0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e,
	0x54, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x15, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x49, 0x4d,
	0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x45,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x1f,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x20, 0x2a, 0x4e, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x2a, 0xa8, 0x01, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x4f,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x49, 0x4b, 0x45, 0x53, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x53, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x4c, 0x45, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x53, 0x43, 0x32,
	0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x55, 0x52, 0x4c,
	0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x41, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0c, 0x2a,
	0x2e, 0x0a, 0x0e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x4f, 0x47, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x2a,
	0x5d, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x52, 0x43, 0x5f, 0x35, 0x30, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x52,
	0x43, 0x5f, 0x31, 0x30, 0x30, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x45, 0x57, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x35, 0x30, 0x10, 0x04, 0x2a, 0x26,
	0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4d, 0x47, 0x10, 0x01, 0x12, 0x06,
	0x0a, 0x02, 0x4a, 0x53, 0x10, 0x02, 0x42, 0x18, 0x42, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x74,
	0x62, 0x5a, 0x0d, 0x2e, 0x2f, 0x3b, 0x6f, 0x70, 0x65, 0x6e, 0x72, 0x74, 0x62, 0x61, 0x64, 0x78,
}

var (
	file_openrtb_proto_rawDescOnce sync.Once
	file_openrtb_proto_rawDescData = file_openrtb_proto_rawDesc
)

func file_openrtb_proto_rawDescGZIP() []byte {
	file_openrtb_proto_rawDescOnce.Do(func() {
		file_openrtb_proto_rawDescData = protoimpl.X.CompressGZIP(file_openrtb_proto_rawDescData)
	})
	return file_openrtb_proto_rawDescData
}

var file_openrtb_proto_enumTypes = make([]protoimpl.EnumInfo, 35)
var file_openrtb_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_openrtb_proto_goTypes = []interface{}{
	(ContentCategory)(0),                     // 0: com.google.openrtb.ContentCategory
	(AuctionType)(0),                         // 1: com.google.openrtb.AuctionType
	(BannerAdType)(0),                        // 2: com.google.openrtb.BannerAdType
	(CreativeAttribute)(0),                   // 3: com.google.openrtb.CreativeAttribute
	(APIFramework)(0),                        // 4: com.google.openrtb.APIFramework
	(AdPosition)(0),                          // 5: com.google.openrtb.AdPosition
	(VideoLinearity)(0),                      // 6: com.google.openrtb.VideoLinearity
	(Protocol)(0),                            // 7: com.google.openrtb.Protocol
	(PlaybackMethod)(0),                      // 8: com.google.openrtb.PlaybackMethod
	(StartDelay)(0),                          // 9: com.google.openrtb.StartDelay
	(VideoPlacementType)(0),                  // 10: com.google.openrtb.VideoPlacementType
	(PlaybackCessationMode)(0),               // 11: com.google.openrtb.PlaybackCessationMode
	(ConnectionType)(0),                      // 12: com.google.openrtb.ConnectionType
	(ExpandableDirection)(0),                 // 13: com.google.openrtb.ExpandableDirection
	(ContentDeliveryMethod)(0),               // 14: com.google.openrtb.ContentDeliveryMethod
	(ContentContext)(0),                      // 15: com.google.openrtb.ContentContext
	(ProductionQuality)(0),                   // 16: com.google.openrtb.ProductionQuality
	(LocationType)(0),                        // 17: com.google.openrtb.LocationType
	(LocationService)(0),                     // 18: com.google.openrtb.LocationService
	(DeviceType)(0),                          // 19: com.google.openrtb.DeviceType
	(CompanionType)(0),                       // 20: com.google.openrtb.CompanionType
	(QAGMediaRating)(0),                      // 21: com.google.openrtb.QAGMediaRating
	(NoBidReason)(0),                         // 22: com.google.openrtb.NoBidReason
	(LossReason)(0),                          // 23: com.google.openrtb.LossReason
	(FeedType)(0),                            // 24: com.google.openrtb.FeedType
	(VolumeNormalizationMode)(0),             // 25: com.google.openrtb.VolumeNormalizationMode
	(LayoutId)(0),                            // 26: com.google.openrtb.LayoutId
	(AdUnitId)(0),                            // 27: com.google.openrtb.AdUnitId
	(ContextType)(0),                         // 28: com.google.openrtb.ContextType
	(ContextSubtype)(0),                      // 29: com.google.openrtb.ContextSubtype
	(PlacementType)(0),                       // 30: com.google.openrtb.PlacementType
	(DataAssetType)(0),                       // 31: com.google.openrtb.DataAssetType
	(ImageAssetType)(0),                      // 32: com.google.openrtb.ImageAssetType
	(EventType)(0),                           // 33: com.google.openrtb.EventType
	(EventTrackingMethod)(0),                 // 34: com.google.openrtb.EventTrackingMethod
	(*BidRequest)(nil),                       // 35: com.google.openrtb.BidRequest
	(*BidResponse)(nil),                      // 36: com.google.openrtb.BidResponse
	(*NativeRequest)(nil),                    // 37: com.google.openrtb.NativeRequest
	(*NativeResponse)(nil),                   // 38: com.google.openrtb.NativeResponse
	(*BidRequest_Source)(nil),                // 39: com.google.openrtb.BidRequest.Source
	(*BidRequest_Imp)(nil),                   // 40: com.google.openrtb.BidRequest.Imp
	(*BidRequest_Site)(nil),                  // 41: com.google.openrtb.BidRequest.Site
	(*BidRequest_App)(nil),                   // 42: com.google.openrtb.BidRequest.App
	(*BidRequest_Publisher)(nil),             // 43: com.google.openrtb.BidRequest.Publisher
	(*BidRequest_Content)(nil),               // 44: com.google.openrtb.BidRequest.Content
	(*BidRequest_Producer)(nil),              // 45: com.google.openrtb.BidRequest.Producer
	(*BidRequest_Device)(nil),                // 46: com.google.openrtb.BidRequest.Device
	(*BidRequest_Geo)(nil),                   // 47: com.google.openrtb.BidRequest.Geo
	(*BidRequest_User)(nil),                  // 48: com.google.openrtb.BidRequest.User
	(*BidRequest_Data)(nil),                  // 49: com.google.openrtb.BidRequest.Data
	(*BidRequest_Regs)(nil),                  // 50: com.google.openrtb.BidRequest.Regs
	(*BidRequest_Imp_Metric)(nil),            // 51: com.google.openrtb.BidRequest.Imp.Metric
	(*BidRequest_Imp_Banner)(nil),            // 52: com.google.openrtb.BidRequest.Imp.Banner
	(*BidRequest_Imp_Video)(nil),             // 53: com.google.openrtb.BidRequest.Imp.Video
	(*BidRequest_Imp_Audio)(nil),             // 54: com.google.openrtb.BidRequest.Imp.Audio
	(*BidRequest_Imp_Native)(nil),            // 55: com.google.openrtb.BidRequest.Imp.Native
	(*BidRequest_Imp_Pmp)(nil),               // 56: com.google.openrtb.BidRequest.Imp.Pmp
	(*BidRequest_Imp_Banner_Format)(nil),     // 57: com.google.openrtb.BidRequest.Imp.Banner.Format
	(*BidRequest_Imp_Video_CompanionAd)(nil), // 58: com.google.openrtb.BidRequest.Imp.Video.CompanionAd
	(*BidRequest_Imp_Pmp_Deal)(nil),          // 59: com.google.openrtb.BidRequest.Imp.Pmp.Deal
	(*BidRequest_Data_Segment)(nil),          // 60: com.google.openrtb.BidRequest.Data.Segment
	(*BidResponse_SeatBid)(nil),              // 61: com.google.openrtb.BidResponse.SeatBid
	(*BidResponse_SeatBid_Bid)(nil),          // 62: com.google.openrtb.BidResponse.SeatBid.Bid
	(*NativeRequest_Asset)(nil),              // 63: com.google.openrtb.NativeRequest.Asset
	(*NativeRequest_EventTrackers)(nil),      // 64: com.google.openrtb.NativeRequest.EventTrackers
	(*NativeRequest_Asset_Title)(nil),        // 65: com.google.openrtb.NativeRequest.Asset.Title
	(*NativeRequest_Asset_Image)(nil),        // 66: com.google.openrtb.NativeRequest.Asset.Image
	(*NativeRequest_Asset_Data)(nil),         // 67: com.google.openrtb.NativeRequest.Asset.Data
	(*NativeResponse_Link)(nil),              // 68: com.google.openrtb.NativeResponse.Link
	(*NativeResponse_Asset)(nil),             // 69: com.google.openrtb.NativeResponse.Asset
	(*NativeResponse_EventTracker)(nil),      // 70: com.google.openrtb.NativeResponse.EventTracker
	(*NativeResponse_Asset_Title)(nil),       // 71: com.google.openrtb.NativeResponse.Asset.Title
	(*NativeResponse_Asset_Image)(nil),       // 72: com.google.openrtb.NativeResponse.Asset.Image
	(*NativeResponse_Asset_Data)(nil),        // 73: com.google.openrtb.NativeResponse.Asset.Data
	(*NativeResponse_Asset_Video)(nil),       // 74: com.google.openrtb.NativeResponse.Asset.Video
}
var file_openrtb_proto_depIdxs = []int32{
	40, // 0: com.google.openrtb.BidRequest.imp:type_name -> com.google.openrtb.BidRequest.Imp
	41, // 1: com.google.openrtb.BidRequest.site:type_name -> com.google.openrtb.BidRequest.Site
	42, // 2: com.google.openrtb.BidRequest.app:type_name -> com.google.openrtb.BidRequest.App
	46, // 3: com.google.openrtb.BidRequest.device:type_name -> com.google.openrtb.BidRequest.Device
	50, // 4: com.google.openrtb.BidRequest.regs:type_name -> com.google.openrtb.BidRequest.Regs
	48, // 5: com.google.openrtb.BidRequest.user:type_name -> com.google.openrtb.BidRequest.User
	1,  // 6: com.google.openrtb.BidRequest.at:type_name -> com.google.openrtb.AuctionType
	39, // 7: com.google.openrtb.BidRequest.source:type_name -> com.google.openrtb.BidRequest.Source
	61, // 8: com.google.openrtb.BidResponse.seatbid:type_name -> com.google.openrtb.BidResponse.SeatBid
	22, // 9: com.google.openrtb.BidResponse.nbr:type_name -> com.google.openrtb.NoBidReason
	26, // 10: com.google.openrtb.NativeRequest.layout:type_name -> com.google.openrtb.LayoutId
	27, // 11: com.google.openrtb.NativeRequest.adunit:type_name -> com.google.openrtb.AdUnitId
	28, // 12: com.google.openrtb.NativeRequest.context:type_name -> com.google.openrtb.ContextType
	29, // 13: com.google.openrtb.NativeRequest.contextsubtype:type_name -> com.google.openrtb.ContextSubtype
	30, // 14: com.google.openrtb.NativeRequest.plcmttype:type_name -> com.google.openrtb.PlacementType
	63, // 15: com.google.openrtb.NativeRequest.assets:type_name -> com.google.openrtb.NativeRequest.Asset
	64, // 16: com.google.openrtb.NativeRequest.eventtrackers:type_name -> com.google.openrtb.NativeRequest.EventTrackers
	69, // 17: com.google.openrtb.NativeResponse.assets:type_name -> com.google.openrtb.NativeResponse.Asset
	68, // 18: com.google.openrtb.NativeResponse.link:type_name -> com.google.openrtb.NativeResponse.Link
	70, // 19: com.google.openrtb.NativeResponse.eventtrackers:type_name -> com.google.openrtb.NativeResponse.EventTracker
	52, // 20: com.google.openrtb.BidRequest.Imp.banner:type_name -> com.google.openrtb.BidRequest.Imp.Banner
	53, // 21: com.google.openrtb.BidRequest.Imp.video:type_name -> com.google.openrtb.BidRequest.Imp.Video
	54, // 22: com.google.openrtb.BidRequest.Imp.audio:type_name -> com.google.openrtb.BidRequest.Imp.Audio
	56, // 23: com.google.openrtb.BidRequest.Imp.pmp:type_name -> com.google.openrtb.BidRequest.Imp.Pmp
	55, // 24: com.google.openrtb.BidRequest.Imp.native:type_name -> com.google.openrtb.BidRequest.Imp.Native
	51, // 25: com.google.openrtb.BidRequest.Imp.metric:type_name -> com.google.openrtb.BidRequest.Imp.Metric
	43, // 26: com.google.openrtb.BidRequest.Site.publisher:type_name -> com.google.openrtb.BidRequest.Publisher
	44, // 27: com.google.openrtb.BidRequest.Site.content:type_name -> com.google.openrtb.BidRequest.Content
	43, // 28: com.google.openrtb.BidRequest.App.publisher:type_name -> com.google.openrtb.BidRequest.Publisher
	44, // 29: com.google.openrtb.BidRequest.App.content:type_name -> com.google.openrtb.BidRequest.Content
	16, // 30: com.google.openrtb.BidRequest.Content.prodq:type_name -> com.google.openrtb.ProductionQuality
	16, // 31: com.google.openrtb.BidRequest.Content.videoquality:type_name -> com.google.openrtb.ProductionQuality
	15, // 32: com.google.openrtb.BidRequest.Content.context:type_name -> com.google.openrtb.ContentContext
	45, // 33: com.google.openrtb.BidRequest.Content.producer:type_name -> com.google.openrtb.BidRequest.Producer
	21, // 34: com.google.openrtb.BidRequest.Content.qagmediarating:type_name -> com.google.openrtb.QAGMediaRating
	47, // 35: com.google.openrtb.BidRequest.Device.geo:type_name -> com.google.openrtb.BidRequest.Geo
	12, // 36: com.google.openrtb.BidRequest.Device.connectiontype:type_name -> com.google.openrtb.ConnectionType
	19, // 37: com.google.openrtb.BidRequest.Device.devicetype:type_name -> com.google.openrtb.DeviceType
	17, // 38: com.google.openrtb.BidRequest.Geo.type:type_name -> com.google.openrtb.LocationType
	18, // 39: com.google.openrtb.BidRequest.Geo.ipservice:type_name -> com.google.openrtb.LocationService
	47, // 40: com.google.openrtb.BidRequest.User.geo:type_name -> com.google.openrtb.BidRequest.Geo
	49, // 41: com.google.openrtb.BidRequest.User.data:type_name -> com.google.openrtb.BidRequest.Data
	60, // 42: com.google.openrtb.BidRequest.Data.segment:type_name -> com.google.openrtb.BidRequest.Data.Segment
	57, // 43: com.google.openrtb.BidRequest.Imp.Banner.format:type_name -> com.google.openrtb.BidRequest.Imp.Banner.Format
	5,  // 44: com.google.openrtb.BidRequest.Imp.Banner.pos:type_name -> com.google.openrtb.AdPosition
	2,  // 45: com.google.openrtb.BidRequest.Imp.Banner.btype:type_name -> com.google.openrtb.BannerAdType
	3,  // 46: com.google.openrtb.BidRequest.Imp.Banner.battr:type_name -> com.google.openrtb.CreativeAttribute
	13, // 47: com.google.openrtb.BidRequest.Imp.Banner.expdir:type_name -> com.google.openrtb.ExpandableDirection
	4,  // 48: com.google.openrtb.BidRequest.Imp.Banner.api:type_name -> com.google.openrtb.APIFramework
	6,  // 49: com.google.openrtb.BidRequest.Imp.Video.linearity:type_name -> com.google.openrtb.VideoLinearity
	7,  // 50: com.google.openrtb.BidRequest.Imp.Video.protocol:type_name -> com.google.openrtb.Protocol
	7,  // 51: com.google.openrtb.BidRequest.Imp.Video.protocols:type_name -> com.google.openrtb.Protocol
	3,  // 52: com.google.openrtb.BidRequest.Imp.Video.battr:type_name -> com.google.openrtb.CreativeAttribute
	8,  // 53: com.google.openrtb.BidRequest.Imp.Video.playbackmethod:type_name -> com.google.openrtb.PlaybackMethod
	14, // 54: com.google.openrtb.BidRequest.Imp.Video.delivery:type_name -> com.google.openrtb.ContentDeliveryMethod
	5,  // 55: com.google.openrtb.BidRequest.Imp.Video.pos:type_name -> com.google.openrtb.AdPosition
	52, // 56: com.google.openrtb.BidRequest.Imp.Video.companionad:type_name -> com.google.openrtb.BidRequest.Imp.Banner
	58, // 57: com.google.openrtb.BidRequest.Imp.Video.companionad_21:type_name -> com.google.openrtb.BidRequest.Imp.Video.CompanionAd
	4,  // 58: com.google.openrtb.BidRequest.Imp.Video.api:type_name -> com.google.openrtb.APIFramework
	20, // 59: com.google.openrtb.BidRequest.Imp.Video.companiontype:type_name -> com.google.openrtb.CompanionType
	10, // 60: com.google.openrtb.BidRequest.Imp.Video.placement:type_name -> com.google.openrtb.VideoPlacementType
	11, // 61: com.google.openrtb.BidRequest.Imp.Video.playbackend:type_name -> com.google.openrtb.PlaybackCessationMode
	7,  // 62: com.google.openrtb.BidRequest.Imp.Audio.protocols:type_name -> com.google.openrtb.Protocol
	3,  // 63: com.google.openrtb.BidRequest.Imp.Audio.battr:type_name -> com.google.openrtb.CreativeAttribute
	14, // 64: com.google.openrtb.BidRequest.Imp.Audio.delivery:type_name -> com.google.openrtb.ContentDeliveryMethod
	52, // 65: com.google.openrtb.BidRequest.Imp.Audio.companionad:type_name -> com.google.openrtb.BidRequest.Imp.Banner
	4,  // 66: com.google.openrtb.BidRequest.Imp.Audio.api:type_name -> com.google.openrtb.APIFramework
	20, // 67: com.google.openrtb.BidRequest.Imp.Audio.companiontype:type_name -> com.google.openrtb.CompanionType
	24, // 68: com.google.openrtb.BidRequest.Imp.Audio.feed:type_name -> com.google.openrtb.FeedType
	25, // 69: com.google.openrtb.BidRequest.Imp.Audio.nvol:type_name -> com.google.openrtb.VolumeNormalizationMode
	37, // 70: com.google.openrtb.BidRequest.Imp.Native.request_native:type_name -> com.google.openrtb.NativeRequest
	4,  // 71: com.google.openrtb.BidRequest.Imp.Native.api:type_name -> com.google.openrtb.APIFramework
	3,  // 72: com.google.openrtb.BidRequest.Imp.Native.battr:type_name -> com.google.openrtb.CreativeAttribute
	59, // 73: com.google.openrtb.BidRequest.Imp.Pmp.deals:type_name -> com.google.openrtb.BidRequest.Imp.Pmp.Deal
	52, // 74: com.google.openrtb.BidRequest.Imp.Video.CompanionAd.banner:type_name -> com.google.openrtb.BidRequest.Imp.Banner
	1,  // 75: com.google.openrtb.BidRequest.Imp.Pmp.Deal.at:type_name -> com.google.openrtb.AuctionType
	62, // 76: com.google.openrtb.BidResponse.SeatBid.bid:type_name -> com.google.openrtb.BidResponse.SeatBid.Bid
	38, // 77: com.google.openrtb.BidResponse.SeatBid.Bid.adm_native:type_name -> com.google.openrtb.NativeResponse
	3,  // 78: com.google.openrtb.BidResponse.SeatBid.Bid.attr:type_name -> com.google.openrtb.CreativeAttribute
	4,  // 79: com.google.openrtb.BidResponse.SeatBid.Bid.api:type_name -> com.google.openrtb.APIFramework
	7,  // 80: com.google.openrtb.BidResponse.SeatBid.Bid.protocol:type_name -> com.google.openrtb.Protocol
	21, // 81: com.google.openrtb.BidResponse.SeatBid.Bid.qagmediarating:type_name -> com.google.openrtb.QAGMediaRating
	65, // 82: com.google.openrtb.NativeRequest.Asset.title:type_name -> com.google.openrtb.NativeRequest.Asset.Title
	66, // 83: com.google.openrtb.NativeRequest.Asset.img:type_name -> com.google.openrtb.NativeRequest.Asset.Image
	53, // 84: com.google.openrtb.NativeRequest.Asset.video:type_name -> com.google.openrtb.BidRequest.Imp.Video
	67, // 85: com.google.openrtb.NativeRequest.Asset.data:type_name -> com.google.openrtb.NativeRequest.Asset.Data
	33, // 86: com.google.openrtb.NativeRequest.EventTrackers.event:type_name -> com.google.openrtb.EventType
	34, // 87: com.google.openrtb.NativeRequest.EventTrackers.methods:type_name -> com.google.openrtb.EventTrackingMethod
	32, // 88: com.google.openrtb.NativeRequest.Asset.Image.type:type_name -> com.google.openrtb.ImageAssetType
	31, // 89: com.google.openrtb.NativeRequest.Asset.Data.type:type_name -> com.google.openrtb.DataAssetType
	71, // 90: com.google.openrtb.NativeResponse.Asset.title:type_name -> com.google.openrtb.NativeResponse.Asset.Title
	72, // 91: com.google.openrtb.NativeResponse.Asset.img:type_name -> com.google.openrtb.NativeResponse.Asset.Image
	74, // 92: com.google.openrtb.NativeResponse.Asset.video:type_name -> com.google.openrtb.NativeResponse.Asset.Video
	73, // 93: com.google.openrtb.NativeResponse.Asset.data:type_name -> com.google.openrtb.NativeResponse.Asset.Data
	68, // 94: com.google.openrtb.NativeResponse.Asset.link:type_name -> com.google.openrtb.NativeResponse.Link
	33, // 95: com.google.openrtb.NativeResponse.EventTracker.event:type_name -> com.google.openrtb.EventType
	34, // 96: com.google.openrtb.NativeResponse.EventTracker.method:type_name -> com.google.openrtb.EventTrackingMethod
	32, // 97: com.google.openrtb.NativeResponse.Asset.Image.type:type_name -> com.google.openrtb.ImageAssetType
	31, // 98: com.google.openrtb.NativeResponse.Asset.Data.type:type_name -> com.google.openrtb.DataAssetType
	99, // [99:99] is the sub-list for method output_type
	99, // [99:99] is the sub-list for method input_type
	99, // [99:99] is the sub-list for extension type_name
	99, // [99:99] is the sub-list for extension extendee
	0,  // [0:99] is the sub-list for field type_name
}

func init() { file_openrtb_proto_init() }
func file_openrtb_proto_init() {
	if File_openrtb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_openrtb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Publisher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Producer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Regs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Banner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Audio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Native); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Pmp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Banner_Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Video_CompanionAd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Imp_Pmp_Deal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Data_Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_SeatBid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_SeatBid_Bid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_EventTrackers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_Asset_Title); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_Asset_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeRequest_Asset_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_EventTracker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset_Title); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_openrtb_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NativeResponse_Asset_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
	}
	file_openrtb_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BidRequest_Site_)(nil),
		(*BidRequest_App_)(nil),
	}
	file_openrtb_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*BidRequest_Imp_Native_Request)(nil),
		(*BidRequest_Imp_Native_RequestNative)(nil),
	}
	file_openrtb_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*BidResponse_SeatBid_Bid_Adm)(nil),
		(*BidResponse_SeatBid_Bid_AdmNative)(nil),
	}
	file_openrtb_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*NativeRequest_Asset_Title_)(nil),
		(*NativeRequest_Asset_Img)(nil),
		(*NativeRequest_Asset_Video)(nil),
		(*NativeRequest_Asset_Data_)(nil),
	}
	file_openrtb_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*NativeResponse_Asset_Title_)(nil),
		(*NativeResponse_Asset_Img)(nil),
		(*NativeResponse_Asset_Video_)(nil),
		(*NativeResponse_Asset_Data_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_openrtb_proto_rawDesc,
			NumEnums:      35,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_openrtb_proto_goTypes,
		DependencyIndexes: file_openrtb_proto_depIdxs,
		EnumInfos:         file_openrtb_proto_enumTypes,
		MessageInfos:      file_openrtb_proto_msgTypes,
	}.Build()
	File_openrtb_proto = out.File
	file_openrtb_proto_rawDesc = nil
	file_openrtb_proto_goTypes = nil
	file_openrtb_proto_depIdxs = nil
}
